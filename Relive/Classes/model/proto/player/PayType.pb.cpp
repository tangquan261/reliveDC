// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PayType.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PayType.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

void protobuf_ShutdownFile_PayType_2eproto() {
  delete PayTypeMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PayType_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PayType_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PayTypeMsg::default_instance_ = new PayTypeMsg();
  PayTypeMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PayType_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PayType_2eproto_once_);
void protobuf_AddDesc_PayType_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PayType_2eproto_once_,
                 &protobuf_AddDesc_PayType_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PayType_2eproto {
  StaticDescriptorInitializer_PayType_2eproto() {
    protobuf_AddDesc_PayType_2eproto();
  }
} static_descriptor_initializer_PayType_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PayTypeMsg::kPayTypeFieldNumber;
const int PayTypeMsg::kProperty1FieldNumber;
const int PayTypeMsg::kProperty2FieldNumber;
const int PayTypeMsg::kTypeFieldNumber;
#endif  // !_MSC_VER

PayTypeMsg::PayTypeMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PayTypeMsg::InitAsDefaultInstance() {
}

PayTypeMsg::PayTypeMsg(const PayTypeMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PayTypeMsg::SharedCtor() {
  _cached_size_ = 0;
  pay_type_ = 0;
  property1_ = 0;
  property2_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayTypeMsg::~PayTypeMsg() {
  SharedDtor();
}

void PayTypeMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PayTypeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PayTypeMsg& PayTypeMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PayType_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PayType_2eproto();
#endif
  return *default_instance_;
}

PayTypeMsg* PayTypeMsg::default_instance_ = NULL;

PayTypeMsg* PayTypeMsg::New() const {
  return new PayTypeMsg;
}

void PayTypeMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pay_type_ = 0;
    property1_ = 0;
    property2_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PayTypeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pay_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_type_)));
          set_has_pay_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_property1;
        break;
      }

      // optional int32 property1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property1_)));
          set_has_property1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_property2;
        break;
      }

      // optional int32 property2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property2_)));
          set_has_property2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayTypeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pay_type = 1;
  if (has_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pay_type(), output);
  }

  // optional int32 property1 = 2;
  if (has_property1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->property1(), output);
  }

  // optional int32 property2 = 3;
  if (has_property2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->property2(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

}

int PayTypeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pay_type = 1;
    if (has_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_type());
    }

    // optional int32 property1 = 2;
    if (has_property1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property1());
    }

    // optional int32 property2 = 3;
    if (has_property2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property2());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayTypeMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PayTypeMsg*>(&from));
}

void PayTypeMsg::MergeFrom(const PayTypeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pay_type()) {
      set_pay_type(from.pay_type());
    }
    if (from.has_property1()) {
      set_property1(from.property1());
    }
    if (from.has_property2()) {
      set_property2(from.property2());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void PayTypeMsg::CopyFrom(const PayTypeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayTypeMsg::IsInitialized() const {

  return true;
}

void PayTypeMsg::Swap(PayTypeMsg* other) {
  if (other != this) {
    std::swap(pay_type_, other->pay_type_);
    std::swap(property1_, other->property1_);
    std::swap(property2_, other->property2_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PayTypeMsg::GetTypeName() const {
  return "com.road.yishi.proto.player.PayTypeMsg";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)
