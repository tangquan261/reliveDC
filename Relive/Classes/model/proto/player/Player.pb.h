// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Player.proto

#ifndef PROTOBUF_Player_2eproto__INCLUDED
#define PROTOBUF_Player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "PlayerOrder.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Player_2eproto();
void protobuf_AssignDesc_Player_2eproto();
void protobuf_ShutdownFile_Player_2eproto();

class PlayerMsg;

// ===================================================================

class PlayerMsg : public ::google::protobuf::MessageLite {
 public:
  PlayerMsg();
  virtual ~PlayerMsg();

  PlayerMsg(const PlayerMsg& from);

  inline PlayerMsg& operator=(const PlayerMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlayerMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerMsg* other);

  // implements Message ----------------------------------------------

  PlayerMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerMsg& from);
  void MergeFrom(const PlayerMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 pic = 4;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 4;
  inline ::google::protobuf::int32 pic() const;
  inline void set_pic(::google::protobuf::int32 value);

  // optional int32 camp = 5;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 5;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // optional int32 point = 6;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 6;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // optional int32 gift_token = 7;
  inline bool has_gift_token() const;
  inline void clear_gift_token();
  static const int kGiftTokenFieldNumber = 7;
  inline ::google::protobuf::int32 gift_token() const;
  inline void set_gift_token(::google::protobuf::int32 value);

  // optional int32 state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional string last_award = 9;
  inline bool has_last_award() const;
  inline void clear_last_award();
  static const int kLastAwardFieldNumber = 9;
  inline const ::std::string& last_award() const;
  inline void set_last_award(const ::std::string& value);
  inline void set_last_award(const char* value);
  inline void set_last_award(const char* value, size_t size);
  inline ::std::string* mutable_last_award();
  inline ::std::string* release_last_award();
  inline void set_allocated_last_award(::std::string* last_award);

  // optional int32 quest_site_len = 10;
  inline bool has_quest_site_len() const;
  inline void clear_quest_site_len();
  static const int kQuestSiteLenFieldNumber = 10;
  inline ::google::protobuf::int32 quest_site_len() const;
  inline void set_quest_site_len(::google::protobuf::int32 value);

  // optional bytes quest_site = 11;
  inline bool has_quest_site() const;
  inline void clear_quest_site();
  static const int kQuestSiteFieldNumber = 11;
  inline const ::std::string& quest_site() const;
  inline void set_quest_site(const ::std::string& value);
  inline void set_quest_site(const char* value);
  inline void set_quest_site(const void* value, size_t size);
  inline ::std::string* mutable_quest_site();
  inline ::std::string* release_quest_site();
  inline void set_allocated_quest_site(::std::string* quest_site);

  // optional int32 consortia_id = 12;
  inline bool has_consortia_id() const;
  inline void clear_consortia_id();
  static const int kConsortiaIdFieldNumber = 12;
  inline ::google::protobuf::int32 consortia_id() const;
  inline void set_consortia_id(::google::protobuf::int32 value);

  // optional string consortia_name = 13;
  inline bool has_consortia_name() const;
  inline void clear_consortia_name();
  static const int kConsortiaNameFieldNumber = 13;
  inline const ::std::string& consortia_name() const;
  inline void set_consortia_name(const ::std::string& value);
  inline void set_consortia_name(const char* value);
  inline void set_consortia_name(const char* value, size_t size);
  inline ::std::string* mutable_consortia_name();
  inline ::std::string* release_consortia_name();
  inline void set_allocated_consortia_name(::std::string* consortia_name);

  // optional int32 claim_id = 14;
  inline bool has_claim_id() const;
  inline void clear_claim_id();
  static const int kClaimIdFieldNumber = 14;
  inline ::google::protobuf::int32 claim_id() const;
  inline void set_claim_id(::google::protobuf::int32 value);

  // optional string claim_name = 15;
  inline bool has_claim_name() const;
  inline void clear_claim_name();
  static const int kClaimNameFieldNumber = 15;
  inline const ::std::string& claim_name() const;
  inline void set_claim_name(const ::std::string& value);
  inline void set_claim_name(const char* value);
  inline void set_claim_name(const char* value, size_t size);
  inline ::std::string* mutable_claim_name();
  inline ::std::string* release_claim_name();
  inline void set_allocated_claim_name(::std::string* claim_name);

  // optional int32 grades = 16;
  inline bool has_grades() const;
  inline void clear_grades();
  static const int kGradesFieldNumber = 16;
  inline ::google::protobuf::int32 grades() const;
  inline void set_grades(::google::protobuf::int32 value);

  // optional int32 gp = 17;
  inline bool has_gp() const;
  inline void clear_gp();
  static const int kGpFieldNumber = 17;
  inline ::google::protobuf::int32 gp() const;
  inline void set_gp(::google::protobuf::int32 value);

  // optional int32 repute = 18;
  inline bool has_repute() const;
  inline void clear_repute();
  static const int kReputeFieldNumber = 18;
  inline ::google::protobuf::int32 repute() const;
  inline void set_repute(::google::protobuf::int32 value);

  // optional int32 consortia_offer = 19;
  inline bool has_consortia_offer() const;
  inline void clear_consortia_offer();
  static const int kConsortiaOfferFieldNumber = 19;
  inline ::google::protobuf::int32 consortia_offer() const;
  inline void set_consortia_offer(::google::protobuf::int32 value);

  // optional int32 strategy = 20;
  inline bool has_strategy() const;
  inline void clear_strategy();
  static const int kStrategyFieldNumber = 20;
  inline ::google::protobuf::int32 strategy() const;
  inline void set_strategy(::google::protobuf::int32 value);

  // optional int32 weary = 21;
  inline bool has_weary() const;
  inline void clear_weary();
  static const int kWearyFieldNumber = 21;
  inline ::google::protobuf::int32 weary() const;
  inline void set_weary(::google::protobuf::int32 value);

  // optional int32 attack_left_count = 22;
  inline bool has_attack_left_count() const;
  inline void clear_attack_left_count();
  static const int kAttackLeftCountFieldNumber = 22;
  inline ::google::protobuf::int32 attack_left_count() const;
  inline void set_attack_left_count(::google::protobuf::int32 value);

  // optional int32 novice_process = 23;
  inline bool has_novice_process() const;
  inline void clear_novice_process();
  static const int kNoviceProcessFieldNumber = 23;
  inline ::google::protobuf::int32 novice_process() const;
  inline void set_novice_process(::google::protobuf::int32 value);

  // optional int32 consortia_attack = 24;
  inline bool has_consortia_attack() const;
  inline void clear_consortia_attack();
  static const int kConsortiaAttackFieldNumber = 24;
  inline ::google::protobuf::int32 consortia_attack() const;
  inline void set_consortia_attack(::google::protobuf::int32 value);

  // optional int32 consortia_defence = 25;
  inline bool has_consortia_defence() const;
  inline void clear_consortia_defence();
  static const int kConsortiaDefenceFieldNumber = 25;
  inline ::google::protobuf::int32 consortia_defence() const;
  inline void set_consortia_defence(::google::protobuf::int32 value);

  // optional int32 consortia_agility = 26;
  inline bool has_consortia_agility() const;
  inline void clear_consortia_agility();
  static const int kConsortiaAgilityFieldNumber = 26;
  inline ::google::protobuf::int32 consortia_agility() const;
  inline void set_consortia_agility(::google::protobuf::int32 value);

  // optional int32 consortia_ability = 27;
  inline bool has_consortia_ability() const;
  inline void clear_consortia_ability();
  static const int kConsortiaAbilityFieldNumber = 27;
  inline ::google::protobuf::int32 consortia_ability() const;
  inline void set_consortia_ability(::google::protobuf::int32 value);

  // optional int32 consortia_captain = 28;
  inline bool has_consortia_captain() const;
  inline void clear_consortia_captain();
  static const int kConsortiaCaptainFieldNumber = 28;
  inline ::google::protobuf::int32 consortia_captain() const;
  inline void set_consortia_captain(::google::protobuf::int32 value);

  // optional int32 gp_order = 29;
  inline bool has_gp_order() const;
  inline void clear_gp_order();
  static const int kGpOrderFieldNumber = 29;
  inline ::google::protobuf::int32 gp_order() const;
  inline void set_gp_order(::google::protobuf::int32 value);

  // optional int32 fighting_capacity = 30;
  inline bool has_fighting_capacity() const;
  inline void clear_fighting_capacity();
  static const int kFightingCapacityFieldNumber = 30;
  inline ::google::protobuf::int32 fighting_capacity() const;
  inline void set_fighting_capacity(::google::protobuf::int32 value);

  // optional string grade_process = 31;
  inline bool has_grade_process() const;
  inline void clear_grade_process();
  static const int kGradeProcessFieldNumber = 31;
  inline const ::std::string& grade_process() const;
  inline void set_grade_process(const ::std::string& value);
  inline void set_grade_process(const char* value);
  inline void set_grade_process(const char* value, size_t size);
  inline ::std::string* mutable_grade_process();
  inline ::std::string* release_grade_process();
  inline void set_allocated_grade_process(::std::string* grade_process);

  // optional int32 time_process = 32;
  inline bool has_time_process() const;
  inline void clear_time_process();
  static const int kTimeProcessFieldNumber = 32;
  inline ::google::protobuf::int32 time_process() const;
  inline void set_time_process(::google::protobuf::int32 value);

  // optional bool time_get = 33;
  inline bool has_time_get() const;
  inline void clear_time_get();
  static const int kTimeGetFieldNumber = 33;
  inline bool time_get() const;
  inline void set_time_get(bool value);

  // optional string campaign_site = 34;
  inline bool has_campaign_site() const;
  inline void clear_campaign_site();
  static const int kCampaignSiteFieldNumber = 34;
  inline const ::std::string& campaign_site() const;
  inline void set_campaign_site(const ::std::string& value);
  inline void set_campaign_site(const char* value);
  inline void set_campaign_site(const char* value, size_t size);
  inline ::std::string* mutable_campaign_site();
  inline ::std::string* release_campaign_site();
  inline void set_allocated_campaign_site(::std::string* campaign_site);

  // optional int32 bag_count = 35;
  inline bool has_bag_count() const;
  inline void clear_bag_count();
  static const int kBagCountFieldNumber = 35;
  inline ::google::protobuf::int32 bag_count() const;
  inline void set_bag_count(::google::protobuf::int32 value);

  // optional int32 match_win = 36;
  inline bool has_match_win() const;
  inline void clear_match_win();
  static const int kMatchWinFieldNumber = 36;
  inline ::google::protobuf::int32 match_win() const;
  inline void set_match_win(::google::protobuf::int32 value);

  // optional int32 match_failed = 37;
  inline bool has_match_failed() const;
  inline void clear_match_failed();
  static const int kMatchFailedFieldNumber = 37;
  inline ::google::protobuf::int32 match_failed() const;
  inline void set_match_failed(::google::protobuf::int32 value);

  // optional int32 consortia_gold = 38;
  inline bool has_consortia_gold() const;
  inline void clear_consortia_gold();
  static const int kConsortiaGoldFieldNumber = 38;
  inline ::google::protobuf::int32 consortia_gold() const;
  inline void set_consortia_gold(::google::protobuf::int32 value);

  // optional int32 consortia_physique = 39;
  inline bool has_consortia_physique() const;
  inline void clear_consortia_physique();
  static const int kConsortiaPhysiqueFieldNumber = 39;
  inline ::google::protobuf::int32 consortia_physique() const;
  inline void set_consortia_physique(::google::protobuf::int32 value);

  // optional int32 right = 40;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 40;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);

  // optional int32 job = 41;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 41;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // optional int32 leed_process = 42;
  inline bool has_leed_process() const;
  inline void clear_leed_process();
  static const int kLeedProcessFieldNumber = 42;
  inline ::google::protobuf::int32 leed_process() const;
  inline void set_leed_process(::google::protobuf::int32 value);

  // optional int32 star_count = 43;
  inline bool has_star_count() const;
  inline void clear_star_count();
  static const int kStarCountFieldNumber = 43;
  inline ::google::protobuf::int32 star_count() const;
  inline void set_star_count(::google::protobuf::int32 value);

  // optional string signDate = 44;
  inline bool has_signdate() const;
  inline void clear_signdate();
  static const int kSignDateFieldNumber = 44;
  inline const ::std::string& signdate() const;
  inline void set_signdate(const ::std::string& value);
  inline void set_signdate(const char* value);
  inline void set_signdate(const char* value, size_t size);
  inline ::std::string* mutable_signdate();
  inline ::std::string* release_signdate();
  inline void set_allocated_signdate(::std::string* signdate);

  // optional int32 signTimes = 45;
  inline bool has_signtimes() const;
  inline void clear_signtimes();
  static const int kSignTimesFieldNumber = 45;
  inline ::google::protobuf::int32 signtimes() const;
  inline void set_signtimes(::google::protobuf::int32 value);

  // optional int32 signSite = 46;
  inline bool has_signsite() const;
  inline void clear_signsite();
  static const int kSignSiteFieldNumber = 46;
  inline ::google::protobuf::int32 signsite() const;
  inline void set_signsite(::google::protobuf::int32 value);

  // optional .com.road.yishi.proto.player.PlayerOrderMsg order = 47;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 47;
  inline const ::com::road::yishi::proto::player::PlayerOrderMsg& order() const;
  inline ::com::road::yishi::proto::player::PlayerOrderMsg* mutable_order();
  inline ::com::road::yishi::proto::player::PlayerOrderMsg* release_order();
  inline void set_allocated_order(::com::road::yishi::proto::player::PlayerOrderMsg* order);

  // optional int32 startFree = 48;
  inline bool has_startfree() const;
  inline void clear_startfree();
  static const int kStartFreeFieldNumber = 48;
  inline ::google::protobuf::int32 startfree() const;
  inline void set_startfree(::google::protobuf::int32 value);

  // optional int64 totalGp = 49;
  inline bool has_totalgp() const;
  inline void clear_totalgp();
  static const int kTotalGpFieldNumber = 49;
  inline ::google::protobuf::int64 totalgp() const;
  inline void set_totalgp(::google::protobuf::int64 value);

  // optional bool refuseFriend = 50;
  inline bool has_refusefriend() const;
  inline void clear_refusefriend();
  static const int kRefuseFriendFieldNumber = 50;
  inline bool refusefriend() const;
  inline void set_refusefriend(bool value);

  // optional bool refuseInvite = 51;
  inline bool has_refuseinvite() const;
  inline void clear_refuseinvite();
  static const int kRefuseInviteFieldNumber = 51;
  inline bool refuseinvite() const;
  inline void set_refuseinvite(bool value);

  // optional int32 consortia_totaloffer = 52;
  inline bool has_consortia_totaloffer() const;
  inline void clear_consortia_totaloffer();
  static const int kConsortiaTotalofferFieldNumber = 52;
  inline ::google::protobuf::int32 consortia_totaloffer() const;
  inline void set_consortia_totaloffer(::google::protobuf::int32 value);

  // optional bool show_version = 53;
  inline bool has_show_version() const;
  inline void clear_show_version();
  static const int kShowVersionFieldNumber = 53;
  inline bool show_version() const;
  inline void set_show_version(bool value);

  // optional int32 campaign_count = 54;
  inline bool has_campaign_count() const;
  inline void clear_campaign_count();
  static const int kCampaignCountFieldNumber = 54;
  inline ::google::protobuf::int32 campaign_count() const;
  inline void set_campaign_count(::google::protobuf::int32 value);

  // optional int32 time_run = 55;
  inline bool has_time_run() const;
  inline void clear_time_run();
  static const int kTimeRunFieldNumber = 55;
  inline ::google::protobuf::int32 time_run() const;
  inline void set_time_run(::google::protobuf::int32 value);

  // optional int32 qte_guide = 56;
  inline bool has_qte_guide() const;
  inline void clear_qte_guide();
  static const int kQteGuideFieldNumber = 56;
  inline ::google::protobuf::int32 qte_guide() const;
  inline void set_qte_guide(::google::protobuf::int32 value);

  // optional int32 starpoint = 57;
  inline bool has_starpoint() const;
  inline void clear_starpoint();
  static const int kStarpointFieldNumber = 57;
  inline ::google::protobuf::int32 starpoint() const;
  inline void set_starpoint(::google::protobuf::int32 value);

  // optional bool is_auto = 58;
  inline bool has_is_auto() const;
  inline void clear_is_auto();
  static const int kIsAutoFieldNumber = 58;
  inline bool is_auto() const;
  inline void set_is_auto(bool value);

  // optional string lastOutConsortia = 59;
  inline bool has_lastoutconsortia() const;
  inline void clear_lastoutconsortia();
  static const int kLastOutConsortiaFieldNumber = 59;
  inline const ::std::string& lastoutconsortia() const;
  inline void set_lastoutconsortia(const ::std::string& value);
  inline void set_lastoutconsortia(const char* value);
  inline void set_lastoutconsortia(const char* value, size_t size);
  inline ::std::string* mutable_lastoutconsortia();
  inline ::std::string* release_lastoutconsortia();
  inline void set_allocated_lastoutconsortia(::std::string* lastoutconsortia);

  // optional int32 geste = 60;
  inline bool has_geste() const;
  inline void clear_geste();
  static const int kGesteFieldNumber = 60;
  inline ::google::protobuf::int32 geste() const;
  inline void set_geste(::google::protobuf::int32 value);

  // optional int32 storeGrade = 61;
  inline bool has_storegrade() const;
  inline void clear_storegrade();
  static const int kStoreGradeFieldNumber = 61;
  inline ::google::protobuf::int32 storegrade() const;
  inline void set_storegrade(::google::protobuf::int32 value);

  // optional int32 storeGp = 62;
  inline bool has_storegp() const;
  inline void clear_storegp();
  static const int kStoreGpFieldNumber = 62;
  inline ::google::protobuf::int32 storegp() const;
  inline void set_storegp(::google::protobuf::int32 value);

  // optional int32 relogin_process = 63;
  inline bool has_relogin_process() const;
  inline void clear_relogin_process();
  static const int kReloginProcessFieldNumber = 63;
  inline ::google::protobuf::int32 relogin_process() const;
  inline void set_relogin_process(::google::protobuf::int32 value);

  // optional int32 relogin_count = 64;
  inline bool has_relogin_count() const;
  inline void clear_relogin_count();
  static const int kReloginCountFieldNumber = 64;
  inline ::google::protobuf::int32 relogin_count() const;
  inline void set_relogin_count(::google::protobuf::int32 value);

  // optional int32 blessingCount = 65;
  inline bool has_blessingcount() const;
  inline void clear_blessingcount();
  static const int kBlessingCountFieldNumber = 65;
  inline ::google::protobuf::int32 blessingcount() const;
  inline void set_blessingcount(::google::protobuf::int32 value);

  // optional int32 blessingBuff = 66;
  inline bool has_blessingbuff() const;
  inline void clear_blessingbuff();
  static const int kBlessingBuffFieldNumber = 66;
  inline ::google::protobuf::int32 blessingbuff() const;
  inline void set_blessingbuff(::google::protobuf::int32 value);

  // optional int32 blessingMaxCount = 67;
  inline bool has_blessingmaxcount() const;
  inline void clear_blessingmaxcount();
  static const int kBlessingMaxCountFieldNumber = 67;
  inline ::google::protobuf::int32 blessingmaxcount() const;
  inline void set_blessingmaxcount(::google::protobuf::int32 value);

  // optional bool first_charge = 68;
  inline bool has_first_charge() const;
  inline void clear_first_charge();
  static const int kFirstChargeFieldNumber = 68;
  inline bool first_charge() const;
  inline void set_first_charge(bool value);

  // optional int32 charm = 69;
  inline bool has_charm() const;
  inline void clear_charm();
  static const int kCharmFieldNumber = 69;
  inline ::google::protobuf::int32 charm() const;
  inline void set_charm(::google::protobuf::int32 value);

  // optional int32 match_room_count = 70;
  inline bool has_match_room_count() const;
  inline void clear_match_room_count();
  static const int kMatchRoomCountFieldNumber = 70;
  inline ::google::protobuf::int32 match_room_count() const;
  inline void set_match_room_count(::google::protobuf::int32 value);

  // optional bool king_buff = 71;
  inline bool has_king_buff() const;
  inline void clear_king_buff();
  static const int kKingBuffFieldNumber = 71;
  inline bool king_buff() const;
  inline void set_king_buff(bool value);

  // optional int32 leave_gp = 72;
  inline bool has_leave_gp() const;
  inline void clear_leave_gp();
  static const int kLeaveGpFieldNumber = 72;
  inline ::google::protobuf::int32 leave_gp() const;
  inline void set_leave_gp(::google::protobuf::int32 value);

  // optional int32 altar_consortiaId = 73;
  inline bool has_altar_consortiaid() const;
  inline void clear_altar_consortiaid();
  static const int kAltarConsortiaIdFieldNumber = 73;
  inline ::google::protobuf::int32 altar_consortiaid() const;
  inline void set_altar_consortiaid(::google::protobuf::int32 value);

  // optional string server_name = 74;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 74;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional int32 reward_times = 75;
  inline bool has_reward_times() const;
  inline void clear_reward_times();
  static const int kRewardTimesFieldNumber = 75;
  inline ::google::protobuf::int32 reward_times() const;
  inline void set_reward_times(::google::protobuf::int32 value);

  // optional int32 war_field_count = 76;
  inline bool has_war_field_count() const;
  inline void clear_war_field_count();
  static const int kWarFieldCountFieldNumber = 76;
  inline ::google::protobuf::int32 war_field_count() const;
  inline void set_war_field_count(::google::protobuf::int32 value);

  // optional int32 trial_count = 77;
  inline bool has_trial_count() const;
  inline void clear_trial_count();
  static const int kTrialCountFieldNumber = 77;
  inline ::google::protobuf::int32 trial_count() const;
  inline void set_trial_count(::google::protobuf::int32 value);

  // optional int32 appell_id = 78;
  inline bool has_appell_id() const;
  inline void clear_appell_id();
  static const int kAppellIdFieldNumber = 78;
  inline ::google::protobuf::int32 appell_id() const;
  inline void set_appell_id(::google::protobuf::int32 value);

  // optional int32 cross_score = 79;
  inline bool has_cross_score() const;
  inline void clear_cross_score();
  static const int kCrossScoreFieldNumber = 79;
  inline ::google::protobuf::int32 cross_score() const;
  inline void set_cross_score(::google::protobuf::int32 value);

  // optional int32 trial_max_count = 80;
  inline bool has_trial_max_count() const;
  inline void clear_trial_max_count();
  static const int kTrialMaxCountFieldNumber = 80;
  inline ::google::protobuf::int32 trial_max_count() const;
  inline void set_trial_max_count(::google::protobuf::int32 value);

  // optional int32 weary_limit = 81;
  inline bool has_weary_limit() const;
  inline void clear_weary_limit();
  static const int kWearyLimitFieldNumber = 81;
  inline ::google::protobuf::int32 weary_limit() const;
  inline void set_weary_limit(::google::protobuf::int32 value);

  // optional int32 lords_score = 82;
  inline bool has_lords_score() const;
  inline void clear_lords_score();
  static const int kLordsScoreFieldNumber = 82;
  inline ::google::protobuf::int32 lords_score() const;
  inline void set_lords_score(::google::protobuf::int32 value);

  // optional bool is_received = 83;
  inline bool has_is_received() const;
  inline void clear_is_received();
  static const int kIsReceivedFieldNumber = 83;
  inline bool is_received() const;
  inline void set_is_received(bool value);

  // optional int32 mine_score = 84;
  inline bool has_mine_score() const;
  inline void clear_mine_score();
  static const int kMineScoreFieldNumber = 84;
  inline ::google::protobuf::int32 mine_score() const;
  inline void set_mine_score(::google::protobuf::int32 value);

  // optional bool is_back_player = 85;
  inline bool has_is_back_player() const;
  inline void clear_is_back_player();
  static const int kIsBackPlayerFieldNumber = 85;
  inline bool is_back_player() const;
  inline void set_is_back_player(bool value);

  // optional bool refuseTeamInvite = 86;
  inline bool has_refuseteaminvite() const;
  inline void clear_refuseteaminvite();
  static const int kRefuseTeamInviteFieldNumber = 86;
  inline bool refuseteaminvite() const;
  inline void set_refuseteaminvite(bool value);

  // optional int32 campaign_maxcount = 87;
  inline bool has_campaign_maxcount() const;
  inline void clear_campaign_maxcount();
  static const int kCampaignMaxcountFieldNumber = 87;
  inline ::google::protobuf::int32 campaign_maxcount() const;
  inline void set_campaign_maxcount(::google::protobuf::int32 value);

  // optional int32 seniorStoreGrade = 88;
  inline bool has_seniorstoregrade() const;
  inline void clear_seniorstoregrade();
  static const int kSeniorStoreGradeFieldNumber = 88;
  inline ::google::protobuf::int32 seniorstoregrade() const;
  inline void set_seniorstoregrade(::google::protobuf::int32 value);

  // optional int32 seniorStoreGp = 89;
  inline bool has_seniorstoregp() const;
  inline void clear_seniorstoregp();
  static const int kSeniorStoreGpFieldNumber = 89;
  inline ::google::protobuf::int32 seniorstoregp() const;
  inline void set_seniorstoregp(::google::protobuf::int32 value);

  // optional int32 dragonCampaign_Count = 90;
  inline bool has_dragoncampaign_count() const;
  inline void clear_dragoncampaign_count();
  static const int kDragonCampaignCountFieldNumber = 90;
  inline ::google::protobuf::int32 dragoncampaign_count() const;
  inline void set_dragoncampaign_count(::google::protobuf::int32 value);

  // optional int32 dragonCampaign_MaxCount = 91;
  inline bool has_dragoncampaign_maxcount() const;
  inline void clear_dragoncampaign_maxcount();
  static const int kDragonCampaignMaxCountFieldNumber = 91;
  inline ::google::protobuf::int32 dragoncampaign_maxcount() const;
  inline void set_dragoncampaign_maxcount(::google::protobuf::int32 value);

  // optional int32 cross_guild_score = 92;
  inline bool has_cross_guild_score() const;
  inline void clear_cross_guild_score();
  static const int kCrossGuildScoreFieldNumber = 92;
  inline ::google::protobuf::int32 cross_guild_score() const;
  inline void set_cross_guild_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.PlayerMsg)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_gift_token();
  inline void clear_has_gift_token();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_last_award();
  inline void clear_has_last_award();
  inline void set_has_quest_site_len();
  inline void clear_has_quest_site_len();
  inline void set_has_quest_site();
  inline void clear_has_quest_site();
  inline void set_has_consortia_id();
  inline void clear_has_consortia_id();
  inline void set_has_consortia_name();
  inline void clear_has_consortia_name();
  inline void set_has_claim_id();
  inline void clear_has_claim_id();
  inline void set_has_claim_name();
  inline void clear_has_claim_name();
  inline void set_has_grades();
  inline void clear_has_grades();
  inline void set_has_gp();
  inline void clear_has_gp();
  inline void set_has_repute();
  inline void clear_has_repute();
  inline void set_has_consortia_offer();
  inline void clear_has_consortia_offer();
  inline void set_has_strategy();
  inline void clear_has_strategy();
  inline void set_has_weary();
  inline void clear_has_weary();
  inline void set_has_attack_left_count();
  inline void clear_has_attack_left_count();
  inline void set_has_novice_process();
  inline void clear_has_novice_process();
  inline void set_has_consortia_attack();
  inline void clear_has_consortia_attack();
  inline void set_has_consortia_defence();
  inline void clear_has_consortia_defence();
  inline void set_has_consortia_agility();
  inline void clear_has_consortia_agility();
  inline void set_has_consortia_ability();
  inline void clear_has_consortia_ability();
  inline void set_has_consortia_captain();
  inline void clear_has_consortia_captain();
  inline void set_has_gp_order();
  inline void clear_has_gp_order();
  inline void set_has_fighting_capacity();
  inline void clear_has_fighting_capacity();
  inline void set_has_grade_process();
  inline void clear_has_grade_process();
  inline void set_has_time_process();
  inline void clear_has_time_process();
  inline void set_has_time_get();
  inline void clear_has_time_get();
  inline void set_has_campaign_site();
  inline void clear_has_campaign_site();
  inline void set_has_bag_count();
  inline void clear_has_bag_count();
  inline void set_has_match_win();
  inline void clear_has_match_win();
  inline void set_has_match_failed();
  inline void clear_has_match_failed();
  inline void set_has_consortia_gold();
  inline void clear_has_consortia_gold();
  inline void set_has_consortia_physique();
  inline void clear_has_consortia_physique();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_leed_process();
  inline void clear_has_leed_process();
  inline void set_has_star_count();
  inline void clear_has_star_count();
  inline void set_has_signdate();
  inline void clear_has_signdate();
  inline void set_has_signtimes();
  inline void clear_has_signtimes();
  inline void set_has_signsite();
  inline void clear_has_signsite();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_startfree();
  inline void clear_has_startfree();
  inline void set_has_totalgp();
  inline void clear_has_totalgp();
  inline void set_has_refusefriend();
  inline void clear_has_refusefriend();
  inline void set_has_refuseinvite();
  inline void clear_has_refuseinvite();
  inline void set_has_consortia_totaloffer();
  inline void clear_has_consortia_totaloffer();
  inline void set_has_show_version();
  inline void clear_has_show_version();
  inline void set_has_campaign_count();
  inline void clear_has_campaign_count();
  inline void set_has_time_run();
  inline void clear_has_time_run();
  inline void set_has_qte_guide();
  inline void clear_has_qte_guide();
  inline void set_has_starpoint();
  inline void clear_has_starpoint();
  inline void set_has_is_auto();
  inline void clear_has_is_auto();
  inline void set_has_lastoutconsortia();
  inline void clear_has_lastoutconsortia();
  inline void set_has_geste();
  inline void clear_has_geste();
  inline void set_has_storegrade();
  inline void clear_has_storegrade();
  inline void set_has_storegp();
  inline void clear_has_storegp();
  inline void set_has_relogin_process();
  inline void clear_has_relogin_process();
  inline void set_has_relogin_count();
  inline void clear_has_relogin_count();
  inline void set_has_blessingcount();
  inline void clear_has_blessingcount();
  inline void set_has_blessingbuff();
  inline void clear_has_blessingbuff();
  inline void set_has_blessingmaxcount();
  inline void clear_has_blessingmaxcount();
  inline void set_has_first_charge();
  inline void clear_has_first_charge();
  inline void set_has_charm();
  inline void clear_has_charm();
  inline void set_has_match_room_count();
  inline void clear_has_match_room_count();
  inline void set_has_king_buff();
  inline void clear_has_king_buff();
  inline void set_has_leave_gp();
  inline void clear_has_leave_gp();
  inline void set_has_altar_consortiaid();
  inline void clear_has_altar_consortiaid();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_reward_times();
  inline void clear_has_reward_times();
  inline void set_has_war_field_count();
  inline void clear_has_war_field_count();
  inline void set_has_trial_count();
  inline void clear_has_trial_count();
  inline void set_has_appell_id();
  inline void clear_has_appell_id();
  inline void set_has_cross_score();
  inline void clear_has_cross_score();
  inline void set_has_trial_max_count();
  inline void clear_has_trial_max_count();
  inline void set_has_weary_limit();
  inline void clear_has_weary_limit();
  inline void set_has_lords_score();
  inline void clear_has_lords_score();
  inline void set_has_is_received();
  inline void clear_has_is_received();
  inline void set_has_mine_score();
  inline void clear_has_mine_score();
  inline void set_has_is_back_player();
  inline void clear_has_is_back_player();
  inline void set_has_refuseteaminvite();
  inline void clear_has_refuseteaminvite();
  inline void set_has_campaign_maxcount();
  inline void clear_has_campaign_maxcount();
  inline void set_has_seniorstoregrade();
  inline void clear_has_seniorstoregrade();
  inline void set_has_seniorstoregp();
  inline void clear_has_seniorstoregp();
  inline void set_has_dragoncampaign_count();
  inline void clear_has_dragoncampaign_count();
  inline void set_has_dragoncampaign_maxcount();
  inline void clear_has_dragoncampaign_maxcount();
  inline void set_has_cross_guild_score();
  inline void clear_has_cross_guild_score();

  ::std::string* nick_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 pic_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 point_;
  ::google::protobuf::int32 gift_token_;
  ::std::string* last_award_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 quest_site_len_;
  ::std::string* quest_site_;
  ::google::protobuf::int32 consortia_id_;
  ::google::protobuf::int32 claim_id_;
  ::std::string* consortia_name_;
  ::std::string* claim_name_;
  ::google::protobuf::int32 grades_;
  ::google::protobuf::int32 gp_;
  ::google::protobuf::int32 repute_;
  ::google::protobuf::int32 consortia_offer_;
  ::google::protobuf::int32 strategy_;
  ::google::protobuf::int32 weary_;
  ::google::protobuf::int32 attack_left_count_;
  ::google::protobuf::int32 novice_process_;
  ::google::protobuf::int32 consortia_attack_;
  ::google::protobuf::int32 consortia_defence_;
  ::google::protobuf::int32 consortia_agility_;
  ::google::protobuf::int32 consortia_ability_;
  ::google::protobuf::int32 consortia_captain_;
  ::google::protobuf::int32 gp_order_;
  ::google::protobuf::int32 fighting_capacity_;
  ::google::protobuf::int32 time_process_;
  ::std::string* grade_process_;
  ::std::string* campaign_site_;
  ::google::protobuf::int32 bag_count_;
  ::google::protobuf::int32 match_win_;
  ::google::protobuf::int32 match_failed_;
  ::google::protobuf::int32 consortia_gold_;
  ::google::protobuf::int32 consortia_physique_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 leed_process_;
  ::std::string* signdate_;
  ::google::protobuf::int32 star_count_;
  ::google::protobuf::int32 signtimes_;
  ::google::protobuf::int32 signsite_;
  bool time_get_;
  bool refusefriend_;
  bool refuseinvite_;
  bool show_version_;
  ::com::road::yishi::proto::player::PlayerOrderMsg* order_;
  ::google::protobuf::int64 totalgp_;
  ::google::protobuf::int32 startfree_;
  ::google::protobuf::int32 consortia_totaloffer_;
  ::google::protobuf::int32 campaign_count_;
  ::google::protobuf::int32 time_run_;
  ::google::protobuf::int32 qte_guide_;
  ::google::protobuf::int32 starpoint_;
  ::std::string* lastoutconsortia_;
  ::google::protobuf::int32 geste_;
  ::google::protobuf::int32 storegrade_;
  ::google::protobuf::int32 storegp_;
  ::google::protobuf::int32 relogin_process_;
  ::google::protobuf::int32 relogin_count_;
  ::google::protobuf::int32 blessingcount_;
  ::google::protobuf::int32 blessingbuff_;
  ::google::protobuf::int32 blessingmaxcount_;
  ::google::protobuf::int32 charm_;
  ::google::protobuf::int32 match_room_count_;
  bool is_auto_;
  bool first_charge_;
  bool king_buff_;
  bool is_received_;
  ::google::protobuf::int32 leave_gp_;
  ::std::string* server_name_;
  ::google::protobuf::int32 altar_consortiaid_;
  ::google::protobuf::int32 reward_times_;
  ::google::protobuf::int32 war_field_count_;
  ::google::protobuf::int32 trial_count_;
  ::google::protobuf::int32 appell_id_;
  ::google::protobuf::int32 cross_score_;
  ::google::protobuf::int32 trial_max_count_;
  ::google::protobuf::int32 weary_limit_;
  ::google::protobuf::int32 lords_score_;
  ::google::protobuf::int32 mine_score_;
  bool is_back_player_;
  bool refuseteaminvite_;
  ::google::protobuf::int32 campaign_maxcount_;
  ::google::protobuf::int32 seniorstoregrade_;
  ::google::protobuf::int32 seniorstoregp_;
  ::google::protobuf::int32 dragoncampaign_count_;
  ::google::protobuf::int32 dragoncampaign_maxcount_;
  ::google::protobuf::int32 cross_guild_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(92 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Player_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Player_2eproto();
  #endif
  friend void protobuf_AssignDesc_Player_2eproto();
  friend void protobuf_ShutdownFile_Player_2eproto();

  void InitAsDefaultInstance();
  static PlayerMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerMsg

// optional int32 player_id = 1;
inline bool PlayerMsg::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMsg::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMsg::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMsg::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 PlayerMsg::player_id() const {
  return player_id_;
}
inline void PlayerMsg::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string nick_name = 2;
inline bool PlayerMsg::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMsg::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMsg::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMsg::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& PlayerMsg::nick_name() const {
  return *nick_name_;
}
inline void PlayerMsg::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void PlayerMsg::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void PlayerMsg::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* PlayerMsg::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 3;
inline bool PlayerMsg::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMsg::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMsg::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMsg::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 PlayerMsg::sex() const {
  return sex_;
}
inline void PlayerMsg::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 pic = 4;
inline bool PlayerMsg::has_pic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerMsg::set_has_pic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerMsg::clear_has_pic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerMsg::clear_pic() {
  pic_ = 0;
  clear_has_pic();
}
inline ::google::protobuf::int32 PlayerMsg::pic() const {
  return pic_;
}
inline void PlayerMsg::set_pic(::google::protobuf::int32 value) {
  set_has_pic();
  pic_ = value;
}

// optional int32 camp = 5;
inline bool PlayerMsg::has_camp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerMsg::set_has_camp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerMsg::clear_has_camp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerMsg::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 PlayerMsg::camp() const {
  return camp_;
}
inline void PlayerMsg::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// optional int32 point = 6;
inline bool PlayerMsg::has_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerMsg::set_has_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerMsg::clear_has_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerMsg::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 PlayerMsg::point() const {
  return point_;
}
inline void PlayerMsg::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// optional int32 gift_token = 7;
inline bool PlayerMsg::has_gift_token() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerMsg::set_has_gift_token() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerMsg::clear_has_gift_token() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerMsg::clear_gift_token() {
  gift_token_ = 0;
  clear_has_gift_token();
}
inline ::google::protobuf::int32 PlayerMsg::gift_token() const {
  return gift_token_;
}
inline void PlayerMsg::set_gift_token(::google::protobuf::int32 value) {
  set_has_gift_token();
  gift_token_ = value;
}

// optional int32 state = 8;
inline bool PlayerMsg::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerMsg::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerMsg::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerMsg::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 PlayerMsg::state() const {
  return state_;
}
inline void PlayerMsg::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string last_award = 9;
inline bool PlayerMsg::has_last_award() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerMsg::set_has_last_award() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerMsg::clear_has_last_award() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerMsg::clear_last_award() {
  if (last_award_ != &::google::protobuf::internal::kEmptyString) {
    last_award_->clear();
  }
  clear_has_last_award();
}
inline const ::std::string& PlayerMsg::last_award() const {
  return *last_award_;
}
inline void PlayerMsg::set_last_award(const ::std::string& value) {
  set_has_last_award();
  if (last_award_ == &::google::protobuf::internal::kEmptyString) {
    last_award_ = new ::std::string;
  }
  last_award_->assign(value);
}
inline void PlayerMsg::set_last_award(const char* value) {
  set_has_last_award();
  if (last_award_ == &::google::protobuf::internal::kEmptyString) {
    last_award_ = new ::std::string;
  }
  last_award_->assign(value);
}
inline void PlayerMsg::set_last_award(const char* value, size_t size) {
  set_has_last_award();
  if (last_award_ == &::google::protobuf::internal::kEmptyString) {
    last_award_ = new ::std::string;
  }
  last_award_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_last_award() {
  set_has_last_award();
  if (last_award_ == &::google::protobuf::internal::kEmptyString) {
    last_award_ = new ::std::string;
  }
  return last_award_;
}
inline ::std::string* PlayerMsg::release_last_award() {
  clear_has_last_award();
  if (last_award_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_award_;
    last_award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_last_award(::std::string* last_award) {
  if (last_award_ != &::google::protobuf::internal::kEmptyString) {
    delete last_award_;
  }
  if (last_award) {
    set_has_last_award();
    last_award_ = last_award;
  } else {
    clear_has_last_award();
    last_award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 quest_site_len = 10;
inline bool PlayerMsg::has_quest_site_len() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerMsg::set_has_quest_site_len() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerMsg::clear_has_quest_site_len() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerMsg::clear_quest_site_len() {
  quest_site_len_ = 0;
  clear_has_quest_site_len();
}
inline ::google::protobuf::int32 PlayerMsg::quest_site_len() const {
  return quest_site_len_;
}
inline void PlayerMsg::set_quest_site_len(::google::protobuf::int32 value) {
  set_has_quest_site_len();
  quest_site_len_ = value;
}

// optional bytes quest_site = 11;
inline bool PlayerMsg::has_quest_site() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerMsg::set_has_quest_site() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerMsg::clear_has_quest_site() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerMsg::clear_quest_site() {
  if (quest_site_ != &::google::protobuf::internal::kEmptyString) {
    quest_site_->clear();
  }
  clear_has_quest_site();
}
inline const ::std::string& PlayerMsg::quest_site() const {
  return *quest_site_;
}
inline void PlayerMsg::set_quest_site(const ::std::string& value) {
  set_has_quest_site();
  if (quest_site_ == &::google::protobuf::internal::kEmptyString) {
    quest_site_ = new ::std::string;
  }
  quest_site_->assign(value);
}
inline void PlayerMsg::set_quest_site(const char* value) {
  set_has_quest_site();
  if (quest_site_ == &::google::protobuf::internal::kEmptyString) {
    quest_site_ = new ::std::string;
  }
  quest_site_->assign(value);
}
inline void PlayerMsg::set_quest_site(const void* value, size_t size) {
  set_has_quest_site();
  if (quest_site_ == &::google::protobuf::internal::kEmptyString) {
    quest_site_ = new ::std::string;
  }
  quest_site_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_quest_site() {
  set_has_quest_site();
  if (quest_site_ == &::google::protobuf::internal::kEmptyString) {
    quest_site_ = new ::std::string;
  }
  return quest_site_;
}
inline ::std::string* PlayerMsg::release_quest_site() {
  clear_has_quest_site();
  if (quest_site_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = quest_site_;
    quest_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_quest_site(::std::string* quest_site) {
  if (quest_site_ != &::google::protobuf::internal::kEmptyString) {
    delete quest_site_;
  }
  if (quest_site) {
    set_has_quest_site();
    quest_site_ = quest_site;
  } else {
    clear_has_quest_site();
    quest_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 consortia_id = 12;
inline bool PlayerMsg::has_consortia_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerMsg::set_has_consortia_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerMsg::clear_has_consortia_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerMsg::clear_consortia_id() {
  consortia_id_ = 0;
  clear_has_consortia_id();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_id() const {
  return consortia_id_;
}
inline void PlayerMsg::set_consortia_id(::google::protobuf::int32 value) {
  set_has_consortia_id();
  consortia_id_ = value;
}

// optional string consortia_name = 13;
inline bool PlayerMsg::has_consortia_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerMsg::set_has_consortia_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerMsg::clear_has_consortia_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerMsg::clear_consortia_name() {
  if (consortia_name_ != &::google::protobuf::internal::kEmptyString) {
    consortia_name_->clear();
  }
  clear_has_consortia_name();
}
inline const ::std::string& PlayerMsg::consortia_name() const {
  return *consortia_name_;
}
inline void PlayerMsg::set_consortia_name(const ::std::string& value) {
  set_has_consortia_name();
  if (consortia_name_ == &::google::protobuf::internal::kEmptyString) {
    consortia_name_ = new ::std::string;
  }
  consortia_name_->assign(value);
}
inline void PlayerMsg::set_consortia_name(const char* value) {
  set_has_consortia_name();
  if (consortia_name_ == &::google::protobuf::internal::kEmptyString) {
    consortia_name_ = new ::std::string;
  }
  consortia_name_->assign(value);
}
inline void PlayerMsg::set_consortia_name(const char* value, size_t size) {
  set_has_consortia_name();
  if (consortia_name_ == &::google::protobuf::internal::kEmptyString) {
    consortia_name_ = new ::std::string;
  }
  consortia_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_consortia_name() {
  set_has_consortia_name();
  if (consortia_name_ == &::google::protobuf::internal::kEmptyString) {
    consortia_name_ = new ::std::string;
  }
  return consortia_name_;
}
inline ::std::string* PlayerMsg::release_consortia_name() {
  clear_has_consortia_name();
  if (consortia_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = consortia_name_;
    consortia_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_consortia_name(::std::string* consortia_name) {
  if (consortia_name_ != &::google::protobuf::internal::kEmptyString) {
    delete consortia_name_;
  }
  if (consortia_name) {
    set_has_consortia_name();
    consortia_name_ = consortia_name;
  } else {
    clear_has_consortia_name();
    consortia_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 claim_id = 14;
inline bool PlayerMsg::has_claim_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerMsg::set_has_claim_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerMsg::clear_has_claim_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerMsg::clear_claim_id() {
  claim_id_ = 0;
  clear_has_claim_id();
}
inline ::google::protobuf::int32 PlayerMsg::claim_id() const {
  return claim_id_;
}
inline void PlayerMsg::set_claim_id(::google::protobuf::int32 value) {
  set_has_claim_id();
  claim_id_ = value;
}

// optional string claim_name = 15;
inline bool PlayerMsg::has_claim_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerMsg::set_has_claim_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerMsg::clear_has_claim_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerMsg::clear_claim_name() {
  if (claim_name_ != &::google::protobuf::internal::kEmptyString) {
    claim_name_->clear();
  }
  clear_has_claim_name();
}
inline const ::std::string& PlayerMsg::claim_name() const {
  return *claim_name_;
}
inline void PlayerMsg::set_claim_name(const ::std::string& value) {
  set_has_claim_name();
  if (claim_name_ == &::google::protobuf::internal::kEmptyString) {
    claim_name_ = new ::std::string;
  }
  claim_name_->assign(value);
}
inline void PlayerMsg::set_claim_name(const char* value) {
  set_has_claim_name();
  if (claim_name_ == &::google::protobuf::internal::kEmptyString) {
    claim_name_ = new ::std::string;
  }
  claim_name_->assign(value);
}
inline void PlayerMsg::set_claim_name(const char* value, size_t size) {
  set_has_claim_name();
  if (claim_name_ == &::google::protobuf::internal::kEmptyString) {
    claim_name_ = new ::std::string;
  }
  claim_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_claim_name() {
  set_has_claim_name();
  if (claim_name_ == &::google::protobuf::internal::kEmptyString) {
    claim_name_ = new ::std::string;
  }
  return claim_name_;
}
inline ::std::string* PlayerMsg::release_claim_name() {
  clear_has_claim_name();
  if (claim_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = claim_name_;
    claim_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_claim_name(::std::string* claim_name) {
  if (claim_name_ != &::google::protobuf::internal::kEmptyString) {
    delete claim_name_;
  }
  if (claim_name) {
    set_has_claim_name();
    claim_name_ = claim_name;
  } else {
    clear_has_claim_name();
    claim_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 grades = 16;
inline bool PlayerMsg::has_grades() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerMsg::set_has_grades() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerMsg::clear_has_grades() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerMsg::clear_grades() {
  grades_ = 0;
  clear_has_grades();
}
inline ::google::protobuf::int32 PlayerMsg::grades() const {
  return grades_;
}
inline void PlayerMsg::set_grades(::google::protobuf::int32 value) {
  set_has_grades();
  grades_ = value;
}

// optional int32 gp = 17;
inline bool PlayerMsg::has_gp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerMsg::set_has_gp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerMsg::clear_has_gp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerMsg::clear_gp() {
  gp_ = 0;
  clear_has_gp();
}
inline ::google::protobuf::int32 PlayerMsg::gp() const {
  return gp_;
}
inline void PlayerMsg::set_gp(::google::protobuf::int32 value) {
  set_has_gp();
  gp_ = value;
}

// optional int32 repute = 18;
inline bool PlayerMsg::has_repute() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerMsg::set_has_repute() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerMsg::clear_has_repute() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerMsg::clear_repute() {
  repute_ = 0;
  clear_has_repute();
}
inline ::google::protobuf::int32 PlayerMsg::repute() const {
  return repute_;
}
inline void PlayerMsg::set_repute(::google::protobuf::int32 value) {
  set_has_repute();
  repute_ = value;
}

// optional int32 consortia_offer = 19;
inline bool PlayerMsg::has_consortia_offer() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerMsg::set_has_consortia_offer() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerMsg::clear_has_consortia_offer() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerMsg::clear_consortia_offer() {
  consortia_offer_ = 0;
  clear_has_consortia_offer();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_offer() const {
  return consortia_offer_;
}
inline void PlayerMsg::set_consortia_offer(::google::protobuf::int32 value) {
  set_has_consortia_offer();
  consortia_offer_ = value;
}

// optional int32 strategy = 20;
inline bool PlayerMsg::has_strategy() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PlayerMsg::set_has_strategy() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PlayerMsg::clear_has_strategy() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PlayerMsg::clear_strategy() {
  strategy_ = 0;
  clear_has_strategy();
}
inline ::google::protobuf::int32 PlayerMsg::strategy() const {
  return strategy_;
}
inline void PlayerMsg::set_strategy(::google::protobuf::int32 value) {
  set_has_strategy();
  strategy_ = value;
}

// optional int32 weary = 21;
inline bool PlayerMsg::has_weary() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PlayerMsg::set_has_weary() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PlayerMsg::clear_has_weary() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PlayerMsg::clear_weary() {
  weary_ = 0;
  clear_has_weary();
}
inline ::google::protobuf::int32 PlayerMsg::weary() const {
  return weary_;
}
inline void PlayerMsg::set_weary(::google::protobuf::int32 value) {
  set_has_weary();
  weary_ = value;
}

// optional int32 attack_left_count = 22;
inline bool PlayerMsg::has_attack_left_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PlayerMsg::set_has_attack_left_count() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PlayerMsg::clear_has_attack_left_count() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PlayerMsg::clear_attack_left_count() {
  attack_left_count_ = 0;
  clear_has_attack_left_count();
}
inline ::google::protobuf::int32 PlayerMsg::attack_left_count() const {
  return attack_left_count_;
}
inline void PlayerMsg::set_attack_left_count(::google::protobuf::int32 value) {
  set_has_attack_left_count();
  attack_left_count_ = value;
}

// optional int32 novice_process = 23;
inline bool PlayerMsg::has_novice_process() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PlayerMsg::set_has_novice_process() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PlayerMsg::clear_has_novice_process() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PlayerMsg::clear_novice_process() {
  novice_process_ = 0;
  clear_has_novice_process();
}
inline ::google::protobuf::int32 PlayerMsg::novice_process() const {
  return novice_process_;
}
inline void PlayerMsg::set_novice_process(::google::protobuf::int32 value) {
  set_has_novice_process();
  novice_process_ = value;
}

// optional int32 consortia_attack = 24;
inline bool PlayerMsg::has_consortia_attack() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PlayerMsg::set_has_consortia_attack() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PlayerMsg::clear_has_consortia_attack() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PlayerMsg::clear_consortia_attack() {
  consortia_attack_ = 0;
  clear_has_consortia_attack();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_attack() const {
  return consortia_attack_;
}
inline void PlayerMsg::set_consortia_attack(::google::protobuf::int32 value) {
  set_has_consortia_attack();
  consortia_attack_ = value;
}

// optional int32 consortia_defence = 25;
inline bool PlayerMsg::has_consortia_defence() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PlayerMsg::set_has_consortia_defence() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PlayerMsg::clear_has_consortia_defence() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PlayerMsg::clear_consortia_defence() {
  consortia_defence_ = 0;
  clear_has_consortia_defence();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_defence() const {
  return consortia_defence_;
}
inline void PlayerMsg::set_consortia_defence(::google::protobuf::int32 value) {
  set_has_consortia_defence();
  consortia_defence_ = value;
}

// optional int32 consortia_agility = 26;
inline bool PlayerMsg::has_consortia_agility() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PlayerMsg::set_has_consortia_agility() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PlayerMsg::clear_has_consortia_agility() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PlayerMsg::clear_consortia_agility() {
  consortia_agility_ = 0;
  clear_has_consortia_agility();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_agility() const {
  return consortia_agility_;
}
inline void PlayerMsg::set_consortia_agility(::google::protobuf::int32 value) {
  set_has_consortia_agility();
  consortia_agility_ = value;
}

// optional int32 consortia_ability = 27;
inline bool PlayerMsg::has_consortia_ability() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PlayerMsg::set_has_consortia_ability() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PlayerMsg::clear_has_consortia_ability() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PlayerMsg::clear_consortia_ability() {
  consortia_ability_ = 0;
  clear_has_consortia_ability();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_ability() const {
  return consortia_ability_;
}
inline void PlayerMsg::set_consortia_ability(::google::protobuf::int32 value) {
  set_has_consortia_ability();
  consortia_ability_ = value;
}

// optional int32 consortia_captain = 28;
inline bool PlayerMsg::has_consortia_captain() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PlayerMsg::set_has_consortia_captain() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PlayerMsg::clear_has_consortia_captain() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PlayerMsg::clear_consortia_captain() {
  consortia_captain_ = 0;
  clear_has_consortia_captain();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_captain() const {
  return consortia_captain_;
}
inline void PlayerMsg::set_consortia_captain(::google::protobuf::int32 value) {
  set_has_consortia_captain();
  consortia_captain_ = value;
}

// optional int32 gp_order = 29;
inline bool PlayerMsg::has_gp_order() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PlayerMsg::set_has_gp_order() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PlayerMsg::clear_has_gp_order() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PlayerMsg::clear_gp_order() {
  gp_order_ = 0;
  clear_has_gp_order();
}
inline ::google::protobuf::int32 PlayerMsg::gp_order() const {
  return gp_order_;
}
inline void PlayerMsg::set_gp_order(::google::protobuf::int32 value) {
  set_has_gp_order();
  gp_order_ = value;
}

// optional int32 fighting_capacity = 30;
inline bool PlayerMsg::has_fighting_capacity() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PlayerMsg::set_has_fighting_capacity() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PlayerMsg::clear_has_fighting_capacity() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PlayerMsg::clear_fighting_capacity() {
  fighting_capacity_ = 0;
  clear_has_fighting_capacity();
}
inline ::google::protobuf::int32 PlayerMsg::fighting_capacity() const {
  return fighting_capacity_;
}
inline void PlayerMsg::set_fighting_capacity(::google::protobuf::int32 value) {
  set_has_fighting_capacity();
  fighting_capacity_ = value;
}

// optional string grade_process = 31;
inline bool PlayerMsg::has_grade_process() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PlayerMsg::set_has_grade_process() {
  _has_bits_[0] |= 0x40000000u;
}
inline void PlayerMsg::clear_has_grade_process() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void PlayerMsg::clear_grade_process() {
  if (grade_process_ != &::google::protobuf::internal::kEmptyString) {
    grade_process_->clear();
  }
  clear_has_grade_process();
}
inline const ::std::string& PlayerMsg::grade_process() const {
  return *grade_process_;
}
inline void PlayerMsg::set_grade_process(const ::std::string& value) {
  set_has_grade_process();
  if (grade_process_ == &::google::protobuf::internal::kEmptyString) {
    grade_process_ = new ::std::string;
  }
  grade_process_->assign(value);
}
inline void PlayerMsg::set_grade_process(const char* value) {
  set_has_grade_process();
  if (grade_process_ == &::google::protobuf::internal::kEmptyString) {
    grade_process_ = new ::std::string;
  }
  grade_process_->assign(value);
}
inline void PlayerMsg::set_grade_process(const char* value, size_t size) {
  set_has_grade_process();
  if (grade_process_ == &::google::protobuf::internal::kEmptyString) {
    grade_process_ = new ::std::string;
  }
  grade_process_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_grade_process() {
  set_has_grade_process();
  if (grade_process_ == &::google::protobuf::internal::kEmptyString) {
    grade_process_ = new ::std::string;
  }
  return grade_process_;
}
inline ::std::string* PlayerMsg::release_grade_process() {
  clear_has_grade_process();
  if (grade_process_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grade_process_;
    grade_process_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_grade_process(::std::string* grade_process) {
  if (grade_process_ != &::google::protobuf::internal::kEmptyString) {
    delete grade_process_;
  }
  if (grade_process) {
    set_has_grade_process();
    grade_process_ = grade_process;
  } else {
    clear_has_grade_process();
    grade_process_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 time_process = 32;
inline bool PlayerMsg::has_time_process() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PlayerMsg::set_has_time_process() {
  _has_bits_[0] |= 0x80000000u;
}
inline void PlayerMsg::clear_has_time_process() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void PlayerMsg::clear_time_process() {
  time_process_ = 0;
  clear_has_time_process();
}
inline ::google::protobuf::int32 PlayerMsg::time_process() const {
  return time_process_;
}
inline void PlayerMsg::set_time_process(::google::protobuf::int32 value) {
  set_has_time_process();
  time_process_ = value;
}

// optional bool time_get = 33;
inline bool PlayerMsg::has_time_get() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PlayerMsg::set_has_time_get() {
  _has_bits_[1] |= 0x00000001u;
}
inline void PlayerMsg::clear_has_time_get() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void PlayerMsg::clear_time_get() {
  time_get_ = false;
  clear_has_time_get();
}
inline bool PlayerMsg::time_get() const {
  return time_get_;
}
inline void PlayerMsg::set_time_get(bool value) {
  set_has_time_get();
  time_get_ = value;
}

// optional string campaign_site = 34;
inline bool PlayerMsg::has_campaign_site() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PlayerMsg::set_has_campaign_site() {
  _has_bits_[1] |= 0x00000002u;
}
inline void PlayerMsg::clear_has_campaign_site() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void PlayerMsg::clear_campaign_site() {
  if (campaign_site_ != &::google::protobuf::internal::kEmptyString) {
    campaign_site_->clear();
  }
  clear_has_campaign_site();
}
inline const ::std::string& PlayerMsg::campaign_site() const {
  return *campaign_site_;
}
inline void PlayerMsg::set_campaign_site(const ::std::string& value) {
  set_has_campaign_site();
  if (campaign_site_ == &::google::protobuf::internal::kEmptyString) {
    campaign_site_ = new ::std::string;
  }
  campaign_site_->assign(value);
}
inline void PlayerMsg::set_campaign_site(const char* value) {
  set_has_campaign_site();
  if (campaign_site_ == &::google::protobuf::internal::kEmptyString) {
    campaign_site_ = new ::std::string;
  }
  campaign_site_->assign(value);
}
inline void PlayerMsg::set_campaign_site(const char* value, size_t size) {
  set_has_campaign_site();
  if (campaign_site_ == &::google::protobuf::internal::kEmptyString) {
    campaign_site_ = new ::std::string;
  }
  campaign_site_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_campaign_site() {
  set_has_campaign_site();
  if (campaign_site_ == &::google::protobuf::internal::kEmptyString) {
    campaign_site_ = new ::std::string;
  }
  return campaign_site_;
}
inline ::std::string* PlayerMsg::release_campaign_site() {
  clear_has_campaign_site();
  if (campaign_site_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = campaign_site_;
    campaign_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_campaign_site(::std::string* campaign_site) {
  if (campaign_site_ != &::google::protobuf::internal::kEmptyString) {
    delete campaign_site_;
  }
  if (campaign_site) {
    set_has_campaign_site();
    campaign_site_ = campaign_site;
  } else {
    clear_has_campaign_site();
    campaign_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bag_count = 35;
inline bool PlayerMsg::has_bag_count() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PlayerMsg::set_has_bag_count() {
  _has_bits_[1] |= 0x00000004u;
}
inline void PlayerMsg::clear_has_bag_count() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void PlayerMsg::clear_bag_count() {
  bag_count_ = 0;
  clear_has_bag_count();
}
inline ::google::protobuf::int32 PlayerMsg::bag_count() const {
  return bag_count_;
}
inline void PlayerMsg::set_bag_count(::google::protobuf::int32 value) {
  set_has_bag_count();
  bag_count_ = value;
}

// optional int32 match_win = 36;
inline bool PlayerMsg::has_match_win() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void PlayerMsg::set_has_match_win() {
  _has_bits_[1] |= 0x00000008u;
}
inline void PlayerMsg::clear_has_match_win() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void PlayerMsg::clear_match_win() {
  match_win_ = 0;
  clear_has_match_win();
}
inline ::google::protobuf::int32 PlayerMsg::match_win() const {
  return match_win_;
}
inline void PlayerMsg::set_match_win(::google::protobuf::int32 value) {
  set_has_match_win();
  match_win_ = value;
}

// optional int32 match_failed = 37;
inline bool PlayerMsg::has_match_failed() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void PlayerMsg::set_has_match_failed() {
  _has_bits_[1] |= 0x00000010u;
}
inline void PlayerMsg::clear_has_match_failed() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void PlayerMsg::clear_match_failed() {
  match_failed_ = 0;
  clear_has_match_failed();
}
inline ::google::protobuf::int32 PlayerMsg::match_failed() const {
  return match_failed_;
}
inline void PlayerMsg::set_match_failed(::google::protobuf::int32 value) {
  set_has_match_failed();
  match_failed_ = value;
}

// optional int32 consortia_gold = 38;
inline bool PlayerMsg::has_consortia_gold() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void PlayerMsg::set_has_consortia_gold() {
  _has_bits_[1] |= 0x00000020u;
}
inline void PlayerMsg::clear_has_consortia_gold() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void PlayerMsg::clear_consortia_gold() {
  consortia_gold_ = 0;
  clear_has_consortia_gold();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_gold() const {
  return consortia_gold_;
}
inline void PlayerMsg::set_consortia_gold(::google::protobuf::int32 value) {
  set_has_consortia_gold();
  consortia_gold_ = value;
}

// optional int32 consortia_physique = 39;
inline bool PlayerMsg::has_consortia_physique() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void PlayerMsg::set_has_consortia_physique() {
  _has_bits_[1] |= 0x00000040u;
}
inline void PlayerMsg::clear_has_consortia_physique() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void PlayerMsg::clear_consortia_physique() {
  consortia_physique_ = 0;
  clear_has_consortia_physique();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_physique() const {
  return consortia_physique_;
}
inline void PlayerMsg::set_consortia_physique(::google::protobuf::int32 value) {
  set_has_consortia_physique();
  consortia_physique_ = value;
}

// optional int32 right = 40;
inline bool PlayerMsg::has_right() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void PlayerMsg::set_has_right() {
  _has_bits_[1] |= 0x00000080u;
}
inline void PlayerMsg::clear_has_right() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void PlayerMsg::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline ::google::protobuf::int32 PlayerMsg::right() const {
  return right_;
}
inline void PlayerMsg::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
}

// optional int32 job = 41;
inline bool PlayerMsg::has_job() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void PlayerMsg::set_has_job() {
  _has_bits_[1] |= 0x00000100u;
}
inline void PlayerMsg::clear_has_job() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void PlayerMsg::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 PlayerMsg::job() const {
  return job_;
}
inline void PlayerMsg::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
}

// optional int32 leed_process = 42;
inline bool PlayerMsg::has_leed_process() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void PlayerMsg::set_has_leed_process() {
  _has_bits_[1] |= 0x00000200u;
}
inline void PlayerMsg::clear_has_leed_process() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void PlayerMsg::clear_leed_process() {
  leed_process_ = 0;
  clear_has_leed_process();
}
inline ::google::protobuf::int32 PlayerMsg::leed_process() const {
  return leed_process_;
}
inline void PlayerMsg::set_leed_process(::google::protobuf::int32 value) {
  set_has_leed_process();
  leed_process_ = value;
}

// optional int32 star_count = 43;
inline bool PlayerMsg::has_star_count() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void PlayerMsg::set_has_star_count() {
  _has_bits_[1] |= 0x00000400u;
}
inline void PlayerMsg::clear_has_star_count() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void PlayerMsg::clear_star_count() {
  star_count_ = 0;
  clear_has_star_count();
}
inline ::google::protobuf::int32 PlayerMsg::star_count() const {
  return star_count_;
}
inline void PlayerMsg::set_star_count(::google::protobuf::int32 value) {
  set_has_star_count();
  star_count_ = value;
}

// optional string signDate = 44;
inline bool PlayerMsg::has_signdate() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void PlayerMsg::set_has_signdate() {
  _has_bits_[1] |= 0x00000800u;
}
inline void PlayerMsg::clear_has_signdate() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void PlayerMsg::clear_signdate() {
  if (signdate_ != &::google::protobuf::internal::kEmptyString) {
    signdate_->clear();
  }
  clear_has_signdate();
}
inline const ::std::string& PlayerMsg::signdate() const {
  return *signdate_;
}
inline void PlayerMsg::set_signdate(const ::std::string& value) {
  set_has_signdate();
  if (signdate_ == &::google::protobuf::internal::kEmptyString) {
    signdate_ = new ::std::string;
  }
  signdate_->assign(value);
}
inline void PlayerMsg::set_signdate(const char* value) {
  set_has_signdate();
  if (signdate_ == &::google::protobuf::internal::kEmptyString) {
    signdate_ = new ::std::string;
  }
  signdate_->assign(value);
}
inline void PlayerMsg::set_signdate(const char* value, size_t size) {
  set_has_signdate();
  if (signdate_ == &::google::protobuf::internal::kEmptyString) {
    signdate_ = new ::std::string;
  }
  signdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_signdate() {
  set_has_signdate();
  if (signdate_ == &::google::protobuf::internal::kEmptyString) {
    signdate_ = new ::std::string;
  }
  return signdate_;
}
inline ::std::string* PlayerMsg::release_signdate() {
  clear_has_signdate();
  if (signdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signdate_;
    signdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_signdate(::std::string* signdate) {
  if (signdate_ != &::google::protobuf::internal::kEmptyString) {
    delete signdate_;
  }
  if (signdate) {
    set_has_signdate();
    signdate_ = signdate;
  } else {
    clear_has_signdate();
    signdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 signTimes = 45;
inline bool PlayerMsg::has_signtimes() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void PlayerMsg::set_has_signtimes() {
  _has_bits_[1] |= 0x00001000u;
}
inline void PlayerMsg::clear_has_signtimes() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void PlayerMsg::clear_signtimes() {
  signtimes_ = 0;
  clear_has_signtimes();
}
inline ::google::protobuf::int32 PlayerMsg::signtimes() const {
  return signtimes_;
}
inline void PlayerMsg::set_signtimes(::google::protobuf::int32 value) {
  set_has_signtimes();
  signtimes_ = value;
}

// optional int32 signSite = 46;
inline bool PlayerMsg::has_signsite() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void PlayerMsg::set_has_signsite() {
  _has_bits_[1] |= 0x00002000u;
}
inline void PlayerMsg::clear_has_signsite() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void PlayerMsg::clear_signsite() {
  signsite_ = 0;
  clear_has_signsite();
}
inline ::google::protobuf::int32 PlayerMsg::signsite() const {
  return signsite_;
}
inline void PlayerMsg::set_signsite(::google::protobuf::int32 value) {
  set_has_signsite();
  signsite_ = value;
}

// optional .com.road.yishi.proto.player.PlayerOrderMsg order = 47;
inline bool PlayerMsg::has_order() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void PlayerMsg::set_has_order() {
  _has_bits_[1] |= 0x00004000u;
}
inline void PlayerMsg::clear_has_order() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void PlayerMsg::clear_order() {
  if (order_ != NULL) order_->::com::road::yishi::proto::player::PlayerOrderMsg::Clear();
  clear_has_order();
}
inline const ::com::road::yishi::proto::player::PlayerOrderMsg& PlayerMsg::order() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return order_ != NULL ? *order_ : *default_instance().order_;
#else
  return order_ != NULL ? *order_ : *default_instance_->order_;
#endif
}
inline ::com::road::yishi::proto::player::PlayerOrderMsg* PlayerMsg::mutable_order() {
  set_has_order();
  if (order_ == NULL) order_ = new ::com::road::yishi::proto::player::PlayerOrderMsg;
  return order_;
}
inline ::com::road::yishi::proto::player::PlayerOrderMsg* PlayerMsg::release_order() {
  clear_has_order();
  ::com::road::yishi::proto::player::PlayerOrderMsg* temp = order_;
  order_ = NULL;
  return temp;
}
inline void PlayerMsg::set_allocated_order(::com::road::yishi::proto::player::PlayerOrderMsg* order) {
  delete order_;
  order_ = order;
  if (order) {
    set_has_order();
  } else {
    clear_has_order();
  }
}

// optional int32 startFree = 48;
inline bool PlayerMsg::has_startfree() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void PlayerMsg::set_has_startfree() {
  _has_bits_[1] |= 0x00008000u;
}
inline void PlayerMsg::clear_has_startfree() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void PlayerMsg::clear_startfree() {
  startfree_ = 0;
  clear_has_startfree();
}
inline ::google::protobuf::int32 PlayerMsg::startfree() const {
  return startfree_;
}
inline void PlayerMsg::set_startfree(::google::protobuf::int32 value) {
  set_has_startfree();
  startfree_ = value;
}

// optional int64 totalGp = 49;
inline bool PlayerMsg::has_totalgp() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void PlayerMsg::set_has_totalgp() {
  _has_bits_[1] |= 0x00010000u;
}
inline void PlayerMsg::clear_has_totalgp() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void PlayerMsg::clear_totalgp() {
  totalgp_ = GOOGLE_LONGLONG(0);
  clear_has_totalgp();
}
inline ::google::protobuf::int64 PlayerMsg::totalgp() const {
  return totalgp_;
}
inline void PlayerMsg::set_totalgp(::google::protobuf::int64 value) {
  set_has_totalgp();
  totalgp_ = value;
}

// optional bool refuseFriend = 50;
inline bool PlayerMsg::has_refusefriend() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void PlayerMsg::set_has_refusefriend() {
  _has_bits_[1] |= 0x00020000u;
}
inline void PlayerMsg::clear_has_refusefriend() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void PlayerMsg::clear_refusefriend() {
  refusefriend_ = false;
  clear_has_refusefriend();
}
inline bool PlayerMsg::refusefriend() const {
  return refusefriend_;
}
inline void PlayerMsg::set_refusefriend(bool value) {
  set_has_refusefriend();
  refusefriend_ = value;
}

// optional bool refuseInvite = 51;
inline bool PlayerMsg::has_refuseinvite() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void PlayerMsg::set_has_refuseinvite() {
  _has_bits_[1] |= 0x00040000u;
}
inline void PlayerMsg::clear_has_refuseinvite() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void PlayerMsg::clear_refuseinvite() {
  refuseinvite_ = false;
  clear_has_refuseinvite();
}
inline bool PlayerMsg::refuseinvite() const {
  return refuseinvite_;
}
inline void PlayerMsg::set_refuseinvite(bool value) {
  set_has_refuseinvite();
  refuseinvite_ = value;
}

// optional int32 consortia_totaloffer = 52;
inline bool PlayerMsg::has_consortia_totaloffer() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void PlayerMsg::set_has_consortia_totaloffer() {
  _has_bits_[1] |= 0x00080000u;
}
inline void PlayerMsg::clear_has_consortia_totaloffer() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void PlayerMsg::clear_consortia_totaloffer() {
  consortia_totaloffer_ = 0;
  clear_has_consortia_totaloffer();
}
inline ::google::protobuf::int32 PlayerMsg::consortia_totaloffer() const {
  return consortia_totaloffer_;
}
inline void PlayerMsg::set_consortia_totaloffer(::google::protobuf::int32 value) {
  set_has_consortia_totaloffer();
  consortia_totaloffer_ = value;
}

// optional bool show_version = 53;
inline bool PlayerMsg::has_show_version() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void PlayerMsg::set_has_show_version() {
  _has_bits_[1] |= 0x00100000u;
}
inline void PlayerMsg::clear_has_show_version() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void PlayerMsg::clear_show_version() {
  show_version_ = false;
  clear_has_show_version();
}
inline bool PlayerMsg::show_version() const {
  return show_version_;
}
inline void PlayerMsg::set_show_version(bool value) {
  set_has_show_version();
  show_version_ = value;
}

// optional int32 campaign_count = 54;
inline bool PlayerMsg::has_campaign_count() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void PlayerMsg::set_has_campaign_count() {
  _has_bits_[1] |= 0x00200000u;
}
inline void PlayerMsg::clear_has_campaign_count() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void PlayerMsg::clear_campaign_count() {
  campaign_count_ = 0;
  clear_has_campaign_count();
}
inline ::google::protobuf::int32 PlayerMsg::campaign_count() const {
  return campaign_count_;
}
inline void PlayerMsg::set_campaign_count(::google::protobuf::int32 value) {
  set_has_campaign_count();
  campaign_count_ = value;
}

// optional int32 time_run = 55;
inline bool PlayerMsg::has_time_run() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void PlayerMsg::set_has_time_run() {
  _has_bits_[1] |= 0x00400000u;
}
inline void PlayerMsg::clear_has_time_run() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void PlayerMsg::clear_time_run() {
  time_run_ = 0;
  clear_has_time_run();
}
inline ::google::protobuf::int32 PlayerMsg::time_run() const {
  return time_run_;
}
inline void PlayerMsg::set_time_run(::google::protobuf::int32 value) {
  set_has_time_run();
  time_run_ = value;
}

// optional int32 qte_guide = 56;
inline bool PlayerMsg::has_qte_guide() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void PlayerMsg::set_has_qte_guide() {
  _has_bits_[1] |= 0x00800000u;
}
inline void PlayerMsg::clear_has_qte_guide() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void PlayerMsg::clear_qte_guide() {
  qte_guide_ = 0;
  clear_has_qte_guide();
}
inline ::google::protobuf::int32 PlayerMsg::qte_guide() const {
  return qte_guide_;
}
inline void PlayerMsg::set_qte_guide(::google::protobuf::int32 value) {
  set_has_qte_guide();
  qte_guide_ = value;
}

// optional int32 starpoint = 57;
inline bool PlayerMsg::has_starpoint() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void PlayerMsg::set_has_starpoint() {
  _has_bits_[1] |= 0x01000000u;
}
inline void PlayerMsg::clear_has_starpoint() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void PlayerMsg::clear_starpoint() {
  starpoint_ = 0;
  clear_has_starpoint();
}
inline ::google::protobuf::int32 PlayerMsg::starpoint() const {
  return starpoint_;
}
inline void PlayerMsg::set_starpoint(::google::protobuf::int32 value) {
  set_has_starpoint();
  starpoint_ = value;
}

// optional bool is_auto = 58;
inline bool PlayerMsg::has_is_auto() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void PlayerMsg::set_has_is_auto() {
  _has_bits_[1] |= 0x02000000u;
}
inline void PlayerMsg::clear_has_is_auto() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void PlayerMsg::clear_is_auto() {
  is_auto_ = false;
  clear_has_is_auto();
}
inline bool PlayerMsg::is_auto() const {
  return is_auto_;
}
inline void PlayerMsg::set_is_auto(bool value) {
  set_has_is_auto();
  is_auto_ = value;
}

// optional string lastOutConsortia = 59;
inline bool PlayerMsg::has_lastoutconsortia() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void PlayerMsg::set_has_lastoutconsortia() {
  _has_bits_[1] |= 0x04000000u;
}
inline void PlayerMsg::clear_has_lastoutconsortia() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void PlayerMsg::clear_lastoutconsortia() {
  if (lastoutconsortia_ != &::google::protobuf::internal::kEmptyString) {
    lastoutconsortia_->clear();
  }
  clear_has_lastoutconsortia();
}
inline const ::std::string& PlayerMsg::lastoutconsortia() const {
  return *lastoutconsortia_;
}
inline void PlayerMsg::set_lastoutconsortia(const ::std::string& value) {
  set_has_lastoutconsortia();
  if (lastoutconsortia_ == &::google::protobuf::internal::kEmptyString) {
    lastoutconsortia_ = new ::std::string;
  }
  lastoutconsortia_->assign(value);
}
inline void PlayerMsg::set_lastoutconsortia(const char* value) {
  set_has_lastoutconsortia();
  if (lastoutconsortia_ == &::google::protobuf::internal::kEmptyString) {
    lastoutconsortia_ = new ::std::string;
  }
  lastoutconsortia_->assign(value);
}
inline void PlayerMsg::set_lastoutconsortia(const char* value, size_t size) {
  set_has_lastoutconsortia();
  if (lastoutconsortia_ == &::google::protobuf::internal::kEmptyString) {
    lastoutconsortia_ = new ::std::string;
  }
  lastoutconsortia_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_lastoutconsortia() {
  set_has_lastoutconsortia();
  if (lastoutconsortia_ == &::google::protobuf::internal::kEmptyString) {
    lastoutconsortia_ = new ::std::string;
  }
  return lastoutconsortia_;
}
inline ::std::string* PlayerMsg::release_lastoutconsortia() {
  clear_has_lastoutconsortia();
  if (lastoutconsortia_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastoutconsortia_;
    lastoutconsortia_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_lastoutconsortia(::std::string* lastoutconsortia) {
  if (lastoutconsortia_ != &::google::protobuf::internal::kEmptyString) {
    delete lastoutconsortia_;
  }
  if (lastoutconsortia) {
    set_has_lastoutconsortia();
    lastoutconsortia_ = lastoutconsortia;
  } else {
    clear_has_lastoutconsortia();
    lastoutconsortia_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 geste = 60;
inline bool PlayerMsg::has_geste() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void PlayerMsg::set_has_geste() {
  _has_bits_[1] |= 0x08000000u;
}
inline void PlayerMsg::clear_has_geste() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void PlayerMsg::clear_geste() {
  geste_ = 0;
  clear_has_geste();
}
inline ::google::protobuf::int32 PlayerMsg::geste() const {
  return geste_;
}
inline void PlayerMsg::set_geste(::google::protobuf::int32 value) {
  set_has_geste();
  geste_ = value;
}

// optional int32 storeGrade = 61;
inline bool PlayerMsg::has_storegrade() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void PlayerMsg::set_has_storegrade() {
  _has_bits_[1] |= 0x10000000u;
}
inline void PlayerMsg::clear_has_storegrade() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void PlayerMsg::clear_storegrade() {
  storegrade_ = 0;
  clear_has_storegrade();
}
inline ::google::protobuf::int32 PlayerMsg::storegrade() const {
  return storegrade_;
}
inline void PlayerMsg::set_storegrade(::google::protobuf::int32 value) {
  set_has_storegrade();
  storegrade_ = value;
}

// optional int32 storeGp = 62;
inline bool PlayerMsg::has_storegp() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void PlayerMsg::set_has_storegp() {
  _has_bits_[1] |= 0x20000000u;
}
inline void PlayerMsg::clear_has_storegp() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void PlayerMsg::clear_storegp() {
  storegp_ = 0;
  clear_has_storegp();
}
inline ::google::protobuf::int32 PlayerMsg::storegp() const {
  return storegp_;
}
inline void PlayerMsg::set_storegp(::google::protobuf::int32 value) {
  set_has_storegp();
  storegp_ = value;
}

// optional int32 relogin_process = 63;
inline bool PlayerMsg::has_relogin_process() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void PlayerMsg::set_has_relogin_process() {
  _has_bits_[1] |= 0x40000000u;
}
inline void PlayerMsg::clear_has_relogin_process() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void PlayerMsg::clear_relogin_process() {
  relogin_process_ = 0;
  clear_has_relogin_process();
}
inline ::google::protobuf::int32 PlayerMsg::relogin_process() const {
  return relogin_process_;
}
inline void PlayerMsg::set_relogin_process(::google::protobuf::int32 value) {
  set_has_relogin_process();
  relogin_process_ = value;
}

// optional int32 relogin_count = 64;
inline bool PlayerMsg::has_relogin_count() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void PlayerMsg::set_has_relogin_count() {
  _has_bits_[1] |= 0x80000000u;
}
inline void PlayerMsg::clear_has_relogin_count() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void PlayerMsg::clear_relogin_count() {
  relogin_count_ = 0;
  clear_has_relogin_count();
}
inline ::google::protobuf::int32 PlayerMsg::relogin_count() const {
  return relogin_count_;
}
inline void PlayerMsg::set_relogin_count(::google::protobuf::int32 value) {
  set_has_relogin_count();
  relogin_count_ = value;
}

// optional int32 blessingCount = 65;
inline bool PlayerMsg::has_blessingcount() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void PlayerMsg::set_has_blessingcount() {
  _has_bits_[2] |= 0x00000001u;
}
inline void PlayerMsg::clear_has_blessingcount() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void PlayerMsg::clear_blessingcount() {
  blessingcount_ = 0;
  clear_has_blessingcount();
}
inline ::google::protobuf::int32 PlayerMsg::blessingcount() const {
  return blessingcount_;
}
inline void PlayerMsg::set_blessingcount(::google::protobuf::int32 value) {
  set_has_blessingcount();
  blessingcount_ = value;
}

// optional int32 blessingBuff = 66;
inline bool PlayerMsg::has_blessingbuff() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void PlayerMsg::set_has_blessingbuff() {
  _has_bits_[2] |= 0x00000002u;
}
inline void PlayerMsg::clear_has_blessingbuff() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void PlayerMsg::clear_blessingbuff() {
  blessingbuff_ = 0;
  clear_has_blessingbuff();
}
inline ::google::protobuf::int32 PlayerMsg::blessingbuff() const {
  return blessingbuff_;
}
inline void PlayerMsg::set_blessingbuff(::google::protobuf::int32 value) {
  set_has_blessingbuff();
  blessingbuff_ = value;
}

// optional int32 blessingMaxCount = 67;
inline bool PlayerMsg::has_blessingmaxcount() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void PlayerMsg::set_has_blessingmaxcount() {
  _has_bits_[2] |= 0x00000004u;
}
inline void PlayerMsg::clear_has_blessingmaxcount() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void PlayerMsg::clear_blessingmaxcount() {
  blessingmaxcount_ = 0;
  clear_has_blessingmaxcount();
}
inline ::google::protobuf::int32 PlayerMsg::blessingmaxcount() const {
  return blessingmaxcount_;
}
inline void PlayerMsg::set_blessingmaxcount(::google::protobuf::int32 value) {
  set_has_blessingmaxcount();
  blessingmaxcount_ = value;
}

// optional bool first_charge = 68;
inline bool PlayerMsg::has_first_charge() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void PlayerMsg::set_has_first_charge() {
  _has_bits_[2] |= 0x00000008u;
}
inline void PlayerMsg::clear_has_first_charge() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void PlayerMsg::clear_first_charge() {
  first_charge_ = false;
  clear_has_first_charge();
}
inline bool PlayerMsg::first_charge() const {
  return first_charge_;
}
inline void PlayerMsg::set_first_charge(bool value) {
  set_has_first_charge();
  first_charge_ = value;
}

// optional int32 charm = 69;
inline bool PlayerMsg::has_charm() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void PlayerMsg::set_has_charm() {
  _has_bits_[2] |= 0x00000010u;
}
inline void PlayerMsg::clear_has_charm() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void PlayerMsg::clear_charm() {
  charm_ = 0;
  clear_has_charm();
}
inline ::google::protobuf::int32 PlayerMsg::charm() const {
  return charm_;
}
inline void PlayerMsg::set_charm(::google::protobuf::int32 value) {
  set_has_charm();
  charm_ = value;
}

// optional int32 match_room_count = 70;
inline bool PlayerMsg::has_match_room_count() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void PlayerMsg::set_has_match_room_count() {
  _has_bits_[2] |= 0x00000020u;
}
inline void PlayerMsg::clear_has_match_room_count() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void PlayerMsg::clear_match_room_count() {
  match_room_count_ = 0;
  clear_has_match_room_count();
}
inline ::google::protobuf::int32 PlayerMsg::match_room_count() const {
  return match_room_count_;
}
inline void PlayerMsg::set_match_room_count(::google::protobuf::int32 value) {
  set_has_match_room_count();
  match_room_count_ = value;
}

// optional bool king_buff = 71;
inline bool PlayerMsg::has_king_buff() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void PlayerMsg::set_has_king_buff() {
  _has_bits_[2] |= 0x00000040u;
}
inline void PlayerMsg::clear_has_king_buff() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void PlayerMsg::clear_king_buff() {
  king_buff_ = false;
  clear_has_king_buff();
}
inline bool PlayerMsg::king_buff() const {
  return king_buff_;
}
inline void PlayerMsg::set_king_buff(bool value) {
  set_has_king_buff();
  king_buff_ = value;
}

// optional int32 leave_gp = 72;
inline bool PlayerMsg::has_leave_gp() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void PlayerMsg::set_has_leave_gp() {
  _has_bits_[2] |= 0x00000080u;
}
inline void PlayerMsg::clear_has_leave_gp() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void PlayerMsg::clear_leave_gp() {
  leave_gp_ = 0;
  clear_has_leave_gp();
}
inline ::google::protobuf::int32 PlayerMsg::leave_gp() const {
  return leave_gp_;
}
inline void PlayerMsg::set_leave_gp(::google::protobuf::int32 value) {
  set_has_leave_gp();
  leave_gp_ = value;
}

// optional int32 altar_consortiaId = 73;
inline bool PlayerMsg::has_altar_consortiaid() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void PlayerMsg::set_has_altar_consortiaid() {
  _has_bits_[2] |= 0x00000100u;
}
inline void PlayerMsg::clear_has_altar_consortiaid() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void PlayerMsg::clear_altar_consortiaid() {
  altar_consortiaid_ = 0;
  clear_has_altar_consortiaid();
}
inline ::google::protobuf::int32 PlayerMsg::altar_consortiaid() const {
  return altar_consortiaid_;
}
inline void PlayerMsg::set_altar_consortiaid(::google::protobuf::int32 value) {
  set_has_altar_consortiaid();
  altar_consortiaid_ = value;
}

// optional string server_name = 74;
inline bool PlayerMsg::has_server_name() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void PlayerMsg::set_has_server_name() {
  _has_bits_[2] |= 0x00000200u;
}
inline void PlayerMsg::clear_has_server_name() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void PlayerMsg::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& PlayerMsg::server_name() const {
  return *server_name_;
}
inline void PlayerMsg::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void PlayerMsg::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void PlayerMsg::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMsg::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* PlayerMsg::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMsg::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 reward_times = 75;
inline bool PlayerMsg::has_reward_times() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void PlayerMsg::set_has_reward_times() {
  _has_bits_[2] |= 0x00000400u;
}
inline void PlayerMsg::clear_has_reward_times() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void PlayerMsg::clear_reward_times() {
  reward_times_ = 0;
  clear_has_reward_times();
}
inline ::google::protobuf::int32 PlayerMsg::reward_times() const {
  return reward_times_;
}
inline void PlayerMsg::set_reward_times(::google::protobuf::int32 value) {
  set_has_reward_times();
  reward_times_ = value;
}

// optional int32 war_field_count = 76;
inline bool PlayerMsg::has_war_field_count() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void PlayerMsg::set_has_war_field_count() {
  _has_bits_[2] |= 0x00000800u;
}
inline void PlayerMsg::clear_has_war_field_count() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void PlayerMsg::clear_war_field_count() {
  war_field_count_ = 0;
  clear_has_war_field_count();
}
inline ::google::protobuf::int32 PlayerMsg::war_field_count() const {
  return war_field_count_;
}
inline void PlayerMsg::set_war_field_count(::google::protobuf::int32 value) {
  set_has_war_field_count();
  war_field_count_ = value;
}

// optional int32 trial_count = 77;
inline bool PlayerMsg::has_trial_count() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void PlayerMsg::set_has_trial_count() {
  _has_bits_[2] |= 0x00001000u;
}
inline void PlayerMsg::clear_has_trial_count() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void PlayerMsg::clear_trial_count() {
  trial_count_ = 0;
  clear_has_trial_count();
}
inline ::google::protobuf::int32 PlayerMsg::trial_count() const {
  return trial_count_;
}
inline void PlayerMsg::set_trial_count(::google::protobuf::int32 value) {
  set_has_trial_count();
  trial_count_ = value;
}

// optional int32 appell_id = 78;
inline bool PlayerMsg::has_appell_id() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void PlayerMsg::set_has_appell_id() {
  _has_bits_[2] |= 0x00002000u;
}
inline void PlayerMsg::clear_has_appell_id() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void PlayerMsg::clear_appell_id() {
  appell_id_ = 0;
  clear_has_appell_id();
}
inline ::google::protobuf::int32 PlayerMsg::appell_id() const {
  return appell_id_;
}
inline void PlayerMsg::set_appell_id(::google::protobuf::int32 value) {
  set_has_appell_id();
  appell_id_ = value;
}

// optional int32 cross_score = 79;
inline bool PlayerMsg::has_cross_score() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void PlayerMsg::set_has_cross_score() {
  _has_bits_[2] |= 0x00004000u;
}
inline void PlayerMsg::clear_has_cross_score() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void PlayerMsg::clear_cross_score() {
  cross_score_ = 0;
  clear_has_cross_score();
}
inline ::google::protobuf::int32 PlayerMsg::cross_score() const {
  return cross_score_;
}
inline void PlayerMsg::set_cross_score(::google::protobuf::int32 value) {
  set_has_cross_score();
  cross_score_ = value;
}

// optional int32 trial_max_count = 80;
inline bool PlayerMsg::has_trial_max_count() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void PlayerMsg::set_has_trial_max_count() {
  _has_bits_[2] |= 0x00008000u;
}
inline void PlayerMsg::clear_has_trial_max_count() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void PlayerMsg::clear_trial_max_count() {
  trial_max_count_ = 0;
  clear_has_trial_max_count();
}
inline ::google::protobuf::int32 PlayerMsg::trial_max_count() const {
  return trial_max_count_;
}
inline void PlayerMsg::set_trial_max_count(::google::protobuf::int32 value) {
  set_has_trial_max_count();
  trial_max_count_ = value;
}

// optional int32 weary_limit = 81;
inline bool PlayerMsg::has_weary_limit() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void PlayerMsg::set_has_weary_limit() {
  _has_bits_[2] |= 0x00010000u;
}
inline void PlayerMsg::clear_has_weary_limit() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void PlayerMsg::clear_weary_limit() {
  weary_limit_ = 0;
  clear_has_weary_limit();
}
inline ::google::protobuf::int32 PlayerMsg::weary_limit() const {
  return weary_limit_;
}
inline void PlayerMsg::set_weary_limit(::google::protobuf::int32 value) {
  set_has_weary_limit();
  weary_limit_ = value;
}

// optional int32 lords_score = 82;
inline bool PlayerMsg::has_lords_score() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void PlayerMsg::set_has_lords_score() {
  _has_bits_[2] |= 0x00020000u;
}
inline void PlayerMsg::clear_has_lords_score() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void PlayerMsg::clear_lords_score() {
  lords_score_ = 0;
  clear_has_lords_score();
}
inline ::google::protobuf::int32 PlayerMsg::lords_score() const {
  return lords_score_;
}
inline void PlayerMsg::set_lords_score(::google::protobuf::int32 value) {
  set_has_lords_score();
  lords_score_ = value;
}

// optional bool is_received = 83;
inline bool PlayerMsg::has_is_received() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void PlayerMsg::set_has_is_received() {
  _has_bits_[2] |= 0x00040000u;
}
inline void PlayerMsg::clear_has_is_received() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void PlayerMsg::clear_is_received() {
  is_received_ = false;
  clear_has_is_received();
}
inline bool PlayerMsg::is_received() const {
  return is_received_;
}
inline void PlayerMsg::set_is_received(bool value) {
  set_has_is_received();
  is_received_ = value;
}

// optional int32 mine_score = 84;
inline bool PlayerMsg::has_mine_score() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void PlayerMsg::set_has_mine_score() {
  _has_bits_[2] |= 0x00080000u;
}
inline void PlayerMsg::clear_has_mine_score() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void PlayerMsg::clear_mine_score() {
  mine_score_ = 0;
  clear_has_mine_score();
}
inline ::google::protobuf::int32 PlayerMsg::mine_score() const {
  return mine_score_;
}
inline void PlayerMsg::set_mine_score(::google::protobuf::int32 value) {
  set_has_mine_score();
  mine_score_ = value;
}

// optional bool is_back_player = 85;
inline bool PlayerMsg::has_is_back_player() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void PlayerMsg::set_has_is_back_player() {
  _has_bits_[2] |= 0x00100000u;
}
inline void PlayerMsg::clear_has_is_back_player() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void PlayerMsg::clear_is_back_player() {
  is_back_player_ = false;
  clear_has_is_back_player();
}
inline bool PlayerMsg::is_back_player() const {
  return is_back_player_;
}
inline void PlayerMsg::set_is_back_player(bool value) {
  set_has_is_back_player();
  is_back_player_ = value;
}

// optional bool refuseTeamInvite = 86;
inline bool PlayerMsg::has_refuseteaminvite() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void PlayerMsg::set_has_refuseteaminvite() {
  _has_bits_[2] |= 0x00200000u;
}
inline void PlayerMsg::clear_has_refuseteaminvite() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void PlayerMsg::clear_refuseteaminvite() {
  refuseteaminvite_ = false;
  clear_has_refuseteaminvite();
}
inline bool PlayerMsg::refuseteaminvite() const {
  return refuseteaminvite_;
}
inline void PlayerMsg::set_refuseteaminvite(bool value) {
  set_has_refuseteaminvite();
  refuseteaminvite_ = value;
}

// optional int32 campaign_maxcount = 87;
inline bool PlayerMsg::has_campaign_maxcount() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void PlayerMsg::set_has_campaign_maxcount() {
  _has_bits_[2] |= 0x00400000u;
}
inline void PlayerMsg::clear_has_campaign_maxcount() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void PlayerMsg::clear_campaign_maxcount() {
  campaign_maxcount_ = 0;
  clear_has_campaign_maxcount();
}
inline ::google::protobuf::int32 PlayerMsg::campaign_maxcount() const {
  return campaign_maxcount_;
}
inline void PlayerMsg::set_campaign_maxcount(::google::protobuf::int32 value) {
  set_has_campaign_maxcount();
  campaign_maxcount_ = value;
}

// optional int32 seniorStoreGrade = 88;
inline bool PlayerMsg::has_seniorstoregrade() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void PlayerMsg::set_has_seniorstoregrade() {
  _has_bits_[2] |= 0x00800000u;
}
inline void PlayerMsg::clear_has_seniorstoregrade() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void PlayerMsg::clear_seniorstoregrade() {
  seniorstoregrade_ = 0;
  clear_has_seniorstoregrade();
}
inline ::google::protobuf::int32 PlayerMsg::seniorstoregrade() const {
  return seniorstoregrade_;
}
inline void PlayerMsg::set_seniorstoregrade(::google::protobuf::int32 value) {
  set_has_seniorstoregrade();
  seniorstoregrade_ = value;
}

// optional int32 seniorStoreGp = 89;
inline bool PlayerMsg::has_seniorstoregp() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void PlayerMsg::set_has_seniorstoregp() {
  _has_bits_[2] |= 0x01000000u;
}
inline void PlayerMsg::clear_has_seniorstoregp() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void PlayerMsg::clear_seniorstoregp() {
  seniorstoregp_ = 0;
  clear_has_seniorstoregp();
}
inline ::google::protobuf::int32 PlayerMsg::seniorstoregp() const {
  return seniorstoregp_;
}
inline void PlayerMsg::set_seniorstoregp(::google::protobuf::int32 value) {
  set_has_seniorstoregp();
  seniorstoregp_ = value;
}

// optional int32 dragonCampaign_Count = 90;
inline bool PlayerMsg::has_dragoncampaign_count() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void PlayerMsg::set_has_dragoncampaign_count() {
  _has_bits_[2] |= 0x02000000u;
}
inline void PlayerMsg::clear_has_dragoncampaign_count() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void PlayerMsg::clear_dragoncampaign_count() {
  dragoncampaign_count_ = 0;
  clear_has_dragoncampaign_count();
}
inline ::google::protobuf::int32 PlayerMsg::dragoncampaign_count() const {
  return dragoncampaign_count_;
}
inline void PlayerMsg::set_dragoncampaign_count(::google::protobuf::int32 value) {
  set_has_dragoncampaign_count();
  dragoncampaign_count_ = value;
}

// optional int32 dragonCampaign_MaxCount = 91;
inline bool PlayerMsg::has_dragoncampaign_maxcount() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void PlayerMsg::set_has_dragoncampaign_maxcount() {
  _has_bits_[2] |= 0x04000000u;
}
inline void PlayerMsg::clear_has_dragoncampaign_maxcount() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void PlayerMsg::clear_dragoncampaign_maxcount() {
  dragoncampaign_maxcount_ = 0;
  clear_has_dragoncampaign_maxcount();
}
inline ::google::protobuf::int32 PlayerMsg::dragoncampaign_maxcount() const {
  return dragoncampaign_maxcount_;
}
inline void PlayerMsg::set_dragoncampaign_maxcount(::google::protobuf::int32 value) {
  set_has_dragoncampaign_maxcount();
  dragoncampaign_maxcount_ = value;
}

// optional int32 cross_guild_score = 92;
inline bool PlayerMsg::has_cross_guild_score() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void PlayerMsg::set_has_cross_guild_score() {
  _has_bits_[2] |= 0x08000000u;
}
inline void PlayerMsg::clear_has_cross_guild_score() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void PlayerMsg::clear_cross_guild_score() {
  cross_guild_score_ = 0;
  clear_has_cross_guild_score();
}
inline ::google::protobuf::int32 PlayerMsg::cross_guild_score() const {
  return cross_guild_score_;
}
inline void PlayerMsg::set_cross_guild_score(::google::protobuf::int32 value) {
  set_has_cross_guild_score();
  cross_guild_score_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Player_2eproto__INCLUDED
