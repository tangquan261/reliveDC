// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HangupInfo.proto

#ifndef PROTOBUF_HangupInfo_2eproto__INCLUDED
#define PROTOBUF_HangupInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace campaign {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HangupInfo_2eproto();
void protobuf_AssignDesc_HangupInfo_2eproto();
void protobuf_ShutdownFile_HangupInfo_2eproto();

class HangupInfoMsg;

// ===================================================================

class HangupInfoMsg : public ::google::protobuf::MessageLite {
 public:
  HangupInfoMsg();
  virtual ~HangupInfoMsg();

  HangupInfoMsg(const HangupInfoMsg& from);

  inline HangupInfoMsg& operator=(const HangupInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const HangupInfoMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const HangupInfoMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(HangupInfoMsg* other);

  // implements Message ----------------------------------------------

  HangupInfoMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const HangupInfoMsg& from);
  void MergeFrom(const HangupInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 left_weay = 1;
  inline bool has_left_weay() const;
  inline void clear_left_weay();
  static const int kLeftWeayFieldNumber = 1;
  inline ::google::protobuf::int32 left_weay() const;
  inline void set_left_weay(::google::protobuf::int32 value);

  // optional bool is_startHangup = 2;
  inline bool has_is_starthangup() const;
  inline void clear_is_starthangup();
  static const int kIsStartHangupFieldNumber = 2;
  inline bool is_starthangup() const;
  inline void set_is_starthangup(bool value);

  // optional int32 add_weay = 3;
  inline bool has_add_weay() const;
  inline void clear_add_weay();
  static const int kAddWeayFieldNumber = 3;
  inline ::google::protobuf::int32 add_weay() const;
  inline void set_add_weay(::google::protobuf::int32 value);

  // optional int32 hangupLeftTime = 4;
  inline bool has_hanguplefttime() const;
  inline void clear_hanguplefttime();
  static const int kHangupLeftTimeFieldNumber = 4;
  inline ::google::protobuf::int32 hanguplefttime() const;
  inline void set_hanguplefttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.campaign.HangupInfoMsg)
 private:
  inline void set_has_left_weay();
  inline void clear_has_left_weay();
  inline void set_has_is_starthangup();
  inline void clear_has_is_starthangup();
  inline void set_has_add_weay();
  inline void clear_has_add_weay();
  inline void set_has_hanguplefttime();
  inline void clear_has_hanguplefttime();

  ::google::protobuf::int32 left_weay_;
  bool is_starthangup_;
  ::google::protobuf::int32 add_weay_;
  ::google::protobuf::int32 hanguplefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_HangupInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_HangupInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_HangupInfo_2eproto();
  friend void protobuf_ShutdownFile_HangupInfo_2eproto();

  void InitAsDefaultInstance();
  static HangupInfoMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// HangupInfoMsg

// optional int32 left_weay = 1;
inline bool HangupInfoMsg::has_left_weay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HangupInfoMsg::set_has_left_weay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HangupInfoMsg::clear_has_left_weay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HangupInfoMsg::clear_left_weay() {
  left_weay_ = 0;
  clear_has_left_weay();
}
inline ::google::protobuf::int32 HangupInfoMsg::left_weay() const {
  return left_weay_;
}
inline void HangupInfoMsg::set_left_weay(::google::protobuf::int32 value) {
  set_has_left_weay();
  left_weay_ = value;
}

// optional bool is_startHangup = 2;
inline bool HangupInfoMsg::has_is_starthangup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HangupInfoMsg::set_has_is_starthangup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HangupInfoMsg::clear_has_is_starthangup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HangupInfoMsg::clear_is_starthangup() {
  is_starthangup_ = false;
  clear_has_is_starthangup();
}
inline bool HangupInfoMsg::is_starthangup() const {
  return is_starthangup_;
}
inline void HangupInfoMsg::set_is_starthangup(bool value) {
  set_has_is_starthangup();
  is_starthangup_ = value;
}

// optional int32 add_weay = 3;
inline bool HangupInfoMsg::has_add_weay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HangupInfoMsg::set_has_add_weay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HangupInfoMsg::clear_has_add_weay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HangupInfoMsg::clear_add_weay() {
  add_weay_ = 0;
  clear_has_add_weay();
}
inline ::google::protobuf::int32 HangupInfoMsg::add_weay() const {
  return add_weay_;
}
inline void HangupInfoMsg::set_add_weay(::google::protobuf::int32 value) {
  set_has_add_weay();
  add_weay_ = value;
}

// optional int32 hangupLeftTime = 4;
inline bool HangupInfoMsg::has_hanguplefttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HangupInfoMsg::set_has_hanguplefttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HangupInfoMsg::clear_has_hanguplefttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HangupInfoMsg::clear_hanguplefttime() {
  hanguplefttime_ = 0;
  clear_has_hanguplefttime();
}
inline ::google::protobuf::int32 HangupInfoMsg::hanguplefttime() const {
  return hanguplefttime_;
}
inline void HangupInfoMsg::set_hanguplefttime(::google::protobuf::int32 value) {
  set_has_hanguplefttime();
  hanguplefttime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace campaign
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HangupInfo_2eproto__INCLUDED
