// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerActiveRsp.proto

#ifndef PROTOBUF_PlayerActiveRsp_2eproto__INCLUDED
#define PROTOBUF_PlayerActiveRsp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerActiveRsp_2eproto();
void protobuf_AssignDesc_PlayerActiveRsp_2eproto();
void protobuf_ShutdownFile_PlayerActiveRsp_2eproto();

class PlayerActiveRspMsg;

// ===================================================================

class PlayerActiveRspMsg : public ::google::protobuf::MessageLite {
 public:
  PlayerActiveRspMsg();
  virtual ~PlayerActiveRspMsg();

  PlayerActiveRspMsg(const PlayerActiveRspMsg& from);

  inline PlayerActiveRspMsg& operator=(const PlayerActiveRspMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlayerActiveRspMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerActiveRspMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerActiveRspMsg* other);

  // implements Message ----------------------------------------------

  PlayerActiveRspMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerActiveRspMsg& from);
  void MergeFrom(const PlayerActiveRspMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string activeid = 2;
  inline bool has_activeid() const;
  inline void clear_activeid();
  static const int kActiveidFieldNumber = 2;
  inline const ::std::string& activeid() const;
  inline void set_activeid(const ::std::string& value);
  inline void set_activeid(const char* value);
  inline void set_activeid(const char* value, size_t size);
  inline ::std::string* mutable_activeid();
  inline ::std::string* release_activeid();
  inline void set_allocated_activeid(::std::string* activeid);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.PlayerActiveRspMsg)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_activeid();
  inline void clear_has_activeid();

  ::std::string* activeid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PlayerActiveRsp_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PlayerActiveRsp_2eproto();
  #endif
  friend void protobuf_AssignDesc_PlayerActiveRsp_2eproto();
  friend void protobuf_ShutdownFile_PlayerActiveRsp_2eproto();

  void InitAsDefaultInstance();
  static PlayerActiveRspMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerActiveRspMsg

// optional int32 result = 1;
inline bool PlayerActiveRspMsg::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerActiveRspMsg::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerActiveRspMsg::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerActiveRspMsg::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PlayerActiveRspMsg::result() const {
  return result_;
}
inline void PlayerActiveRspMsg::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string activeid = 2;
inline bool PlayerActiveRspMsg::has_activeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerActiveRspMsg::set_has_activeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerActiveRspMsg::clear_has_activeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerActiveRspMsg::clear_activeid() {
  if (activeid_ != &::google::protobuf::internal::kEmptyString) {
    activeid_->clear();
  }
  clear_has_activeid();
}
inline const ::std::string& PlayerActiveRspMsg::activeid() const {
  return *activeid_;
}
inline void PlayerActiveRspMsg::set_activeid(const ::std::string& value) {
  set_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    activeid_ = new ::std::string;
  }
  activeid_->assign(value);
}
inline void PlayerActiveRspMsg::set_activeid(const char* value) {
  set_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    activeid_ = new ::std::string;
  }
  activeid_->assign(value);
}
inline void PlayerActiveRspMsg::set_activeid(const char* value, size_t size) {
  set_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    activeid_ = new ::std::string;
  }
  activeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerActiveRspMsg::mutable_activeid() {
  set_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    activeid_ = new ::std::string;
  }
  return activeid_;
}
inline ::std::string* PlayerActiveRspMsg::release_activeid() {
  clear_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activeid_;
    activeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerActiveRspMsg::set_allocated_activeid(::std::string* activeid) {
  if (activeid_ != &::google::protobuf::internal::kEmptyString) {
    delete activeid_;
  }
  if (activeid) {
    set_has_activeid();
    activeid_ = activeid;
  } else {
    clear_has_activeid();
    activeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerActiveRsp_2eproto__INCLUDED
