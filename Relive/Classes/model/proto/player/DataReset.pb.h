// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataReset.proto

#ifndef PROTOBUF_DataReset_2eproto__INCLUDED
#define PROTOBUF_DataReset_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataReset_2eproto();
void protobuf_AssignDesc_DataReset_2eproto();
void protobuf_ShutdownFile_DataReset_2eproto();

class DataResetMsg;

// ===================================================================

class DataResetMsg : public ::google::protobuf::MessageLite {
 public:
  DataResetMsg();
  virtual ~DataResetMsg();

  DataResetMsg(const DataResetMsg& from);

  inline DataResetMsg& operator=(const DataResetMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const DataResetMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataResetMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataResetMsg* other);

  // implements Message ----------------------------------------------

  DataResetMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataResetMsg& from);
  void MergeFrom(const DataResetMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 weary = 1;
  inline bool has_weary() const;
  inline void clear_weary();
  static const int kWearyFieldNumber = 1;
  inline ::google::protobuf::int32 weary() const;
  inline void set_weary(::google::protobuf::int32 value);

  // optional int32 hangup_count = 2;
  inline bool has_hangup_count() const;
  inline void clear_hangup_count();
  static const int kHangupCountFieldNumber = 2;
  inline ::google::protobuf::int32 hangup_count() const;
  inline void set_hangup_count(::google::protobuf::int32 value);

  // optional int32 trans_energy = 3;
  inline bool has_trans_energy() const;
  inline void clear_trans_energy();
  static const int kTransEnergyFieldNumber = 3;
  inline ::google::protobuf::int32 trans_energy() const;
  inline void set_trans_energy(::google::protobuf::int32 value);

  // optional int32 attack_count = 4;
  inline bool has_attack_count() const;
  inline void clear_attack_count();
  static const int kAttackCountFieldNumber = 4;
  inline ::google::protobuf::int32 attack_count() const;
  inline void set_attack_count(::google::protobuf::int32 value);

  // optional int32 challenge_count = 5;
  inline bool has_challenge_count() const;
  inline void clear_challenge_count();
  static const int kChallengeCountFieldNumber = 5;
  inline ::google::protobuf::int32 challenge_count() const;
  inline void set_challenge_count(::google::protobuf::int32 value);

  // optional int32 left_hangupWeary = 6;
  inline bool has_left_hangupweary() const;
  inline void clear_left_hangupweary();
  static const int kLeftHangupWearyFieldNumber = 6;
  inline ::google::protobuf::int32 left_hangupweary() const;
  inline void set_left_hangupweary(::google::protobuf::int32 value);

  // optional int32 tower1_enterCount = 7;
  inline bool has_tower1_entercount() const;
  inline void clear_tower1_entercount();
  static const int kTower1EnterCountFieldNumber = 7;
  inline ::google::protobuf::int32 tower1_entercount() const;
  inline void set_tower1_entercount(::google::protobuf::int32 value);

  // optional int32 tower2_enterCount = 8;
  inline bool has_tower2_entercount() const;
  inline void clear_tower2_entercount();
  static const int kTower2EnterCountFieldNumber = 8;
  inline ::google::protobuf::int32 tower2_entercount() const;
  inline void set_tower2_entercount(::google::protobuf::int32 value);

  // optional int32 blessing_count = 9;
  inline bool has_blessing_count() const;
  inline void clear_blessing_count();
  static const int kBlessingCountFieldNumber = 9;
  inline ::google::protobuf::int32 blessing_count() const;
  inline void set_blessing_count(::google::protobuf::int32 value);

  // optional int32 blessing_buff = 10;
  inline bool has_blessing_buff() const;
  inline void clear_blessing_buff();
  static const int kBlessingBuffFieldNumber = 10;
  inline ::google::protobuf::int32 blessing_buff() const;
  inline void set_blessing_buff(::google::protobuf::int32 value);

  // optional int32 buy_count = 11;
  inline bool has_buy_count() const;
  inline void clear_buy_count();
  static const int kBuyCountFieldNumber = 11;
  inline ::google::protobuf::int32 buy_count() const;
  inline void set_buy_count(::google::protobuf::int32 value);

  // optional bool king_Buff = 12;
  inline bool has_king_buff() const;
  inline void clear_king_buff();
  static const int kKingBuffFieldNumber = 12;
  inline bool king_buff() const;
  inline void set_king_buff(bool value);

  // optional string server_name = 13;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 13;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.DataResetMsg)
 private:
  inline void set_has_weary();
  inline void clear_has_weary();
  inline void set_has_hangup_count();
  inline void clear_has_hangup_count();
  inline void set_has_trans_energy();
  inline void clear_has_trans_energy();
  inline void set_has_attack_count();
  inline void clear_has_attack_count();
  inline void set_has_challenge_count();
  inline void clear_has_challenge_count();
  inline void set_has_left_hangupweary();
  inline void clear_has_left_hangupweary();
  inline void set_has_tower1_entercount();
  inline void clear_has_tower1_entercount();
  inline void set_has_tower2_entercount();
  inline void clear_has_tower2_entercount();
  inline void set_has_blessing_count();
  inline void clear_has_blessing_count();
  inline void set_has_blessing_buff();
  inline void clear_has_blessing_buff();
  inline void set_has_buy_count();
  inline void clear_has_buy_count();
  inline void set_has_king_buff();
  inline void clear_has_king_buff();
  inline void set_has_server_name();
  inline void clear_has_server_name();

  ::google::protobuf::int32 weary_;
  ::google::protobuf::int32 hangup_count_;
  ::google::protobuf::int32 trans_energy_;
  ::google::protobuf::int32 attack_count_;
  ::google::protobuf::int32 challenge_count_;
  ::google::protobuf::int32 left_hangupweary_;
  ::google::protobuf::int32 tower1_entercount_;
  ::google::protobuf::int32 tower2_entercount_;
  ::google::protobuf::int32 blessing_count_;
  ::google::protobuf::int32 blessing_buff_;
  ::google::protobuf::int32 buy_count_;
  bool king_buff_;
  ::std::string* server_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DataReset_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DataReset_2eproto();
  #endif
  friend void protobuf_AssignDesc_DataReset_2eproto();
  friend void protobuf_ShutdownFile_DataReset_2eproto();

  void InitAsDefaultInstance();
  static DataResetMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// DataResetMsg

// optional int32 weary = 1;
inline bool DataResetMsg::has_weary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataResetMsg::set_has_weary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataResetMsg::clear_has_weary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataResetMsg::clear_weary() {
  weary_ = 0;
  clear_has_weary();
}
inline ::google::protobuf::int32 DataResetMsg::weary() const {
  return weary_;
}
inline void DataResetMsg::set_weary(::google::protobuf::int32 value) {
  set_has_weary();
  weary_ = value;
}

// optional int32 hangup_count = 2;
inline bool DataResetMsg::has_hangup_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataResetMsg::set_has_hangup_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataResetMsg::clear_has_hangup_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataResetMsg::clear_hangup_count() {
  hangup_count_ = 0;
  clear_has_hangup_count();
}
inline ::google::protobuf::int32 DataResetMsg::hangup_count() const {
  return hangup_count_;
}
inline void DataResetMsg::set_hangup_count(::google::protobuf::int32 value) {
  set_has_hangup_count();
  hangup_count_ = value;
}

// optional int32 trans_energy = 3;
inline bool DataResetMsg::has_trans_energy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataResetMsg::set_has_trans_energy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataResetMsg::clear_has_trans_energy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataResetMsg::clear_trans_energy() {
  trans_energy_ = 0;
  clear_has_trans_energy();
}
inline ::google::protobuf::int32 DataResetMsg::trans_energy() const {
  return trans_energy_;
}
inline void DataResetMsg::set_trans_energy(::google::protobuf::int32 value) {
  set_has_trans_energy();
  trans_energy_ = value;
}

// optional int32 attack_count = 4;
inline bool DataResetMsg::has_attack_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataResetMsg::set_has_attack_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataResetMsg::clear_has_attack_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataResetMsg::clear_attack_count() {
  attack_count_ = 0;
  clear_has_attack_count();
}
inline ::google::protobuf::int32 DataResetMsg::attack_count() const {
  return attack_count_;
}
inline void DataResetMsg::set_attack_count(::google::protobuf::int32 value) {
  set_has_attack_count();
  attack_count_ = value;
}

// optional int32 challenge_count = 5;
inline bool DataResetMsg::has_challenge_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataResetMsg::set_has_challenge_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataResetMsg::clear_has_challenge_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataResetMsg::clear_challenge_count() {
  challenge_count_ = 0;
  clear_has_challenge_count();
}
inline ::google::protobuf::int32 DataResetMsg::challenge_count() const {
  return challenge_count_;
}
inline void DataResetMsg::set_challenge_count(::google::protobuf::int32 value) {
  set_has_challenge_count();
  challenge_count_ = value;
}

// optional int32 left_hangupWeary = 6;
inline bool DataResetMsg::has_left_hangupweary() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataResetMsg::set_has_left_hangupweary() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataResetMsg::clear_has_left_hangupweary() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataResetMsg::clear_left_hangupweary() {
  left_hangupweary_ = 0;
  clear_has_left_hangupweary();
}
inline ::google::protobuf::int32 DataResetMsg::left_hangupweary() const {
  return left_hangupweary_;
}
inline void DataResetMsg::set_left_hangupweary(::google::protobuf::int32 value) {
  set_has_left_hangupweary();
  left_hangupweary_ = value;
}

// optional int32 tower1_enterCount = 7;
inline bool DataResetMsg::has_tower1_entercount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataResetMsg::set_has_tower1_entercount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataResetMsg::clear_has_tower1_entercount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataResetMsg::clear_tower1_entercount() {
  tower1_entercount_ = 0;
  clear_has_tower1_entercount();
}
inline ::google::protobuf::int32 DataResetMsg::tower1_entercount() const {
  return tower1_entercount_;
}
inline void DataResetMsg::set_tower1_entercount(::google::protobuf::int32 value) {
  set_has_tower1_entercount();
  tower1_entercount_ = value;
}

// optional int32 tower2_enterCount = 8;
inline bool DataResetMsg::has_tower2_entercount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataResetMsg::set_has_tower2_entercount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataResetMsg::clear_has_tower2_entercount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataResetMsg::clear_tower2_entercount() {
  tower2_entercount_ = 0;
  clear_has_tower2_entercount();
}
inline ::google::protobuf::int32 DataResetMsg::tower2_entercount() const {
  return tower2_entercount_;
}
inline void DataResetMsg::set_tower2_entercount(::google::protobuf::int32 value) {
  set_has_tower2_entercount();
  tower2_entercount_ = value;
}

// optional int32 blessing_count = 9;
inline bool DataResetMsg::has_blessing_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataResetMsg::set_has_blessing_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataResetMsg::clear_has_blessing_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataResetMsg::clear_blessing_count() {
  blessing_count_ = 0;
  clear_has_blessing_count();
}
inline ::google::protobuf::int32 DataResetMsg::blessing_count() const {
  return blessing_count_;
}
inline void DataResetMsg::set_blessing_count(::google::protobuf::int32 value) {
  set_has_blessing_count();
  blessing_count_ = value;
}

// optional int32 blessing_buff = 10;
inline bool DataResetMsg::has_blessing_buff() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataResetMsg::set_has_blessing_buff() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataResetMsg::clear_has_blessing_buff() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataResetMsg::clear_blessing_buff() {
  blessing_buff_ = 0;
  clear_has_blessing_buff();
}
inline ::google::protobuf::int32 DataResetMsg::blessing_buff() const {
  return blessing_buff_;
}
inline void DataResetMsg::set_blessing_buff(::google::protobuf::int32 value) {
  set_has_blessing_buff();
  blessing_buff_ = value;
}

// optional int32 buy_count = 11;
inline bool DataResetMsg::has_buy_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DataResetMsg::set_has_buy_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DataResetMsg::clear_has_buy_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DataResetMsg::clear_buy_count() {
  buy_count_ = 0;
  clear_has_buy_count();
}
inline ::google::protobuf::int32 DataResetMsg::buy_count() const {
  return buy_count_;
}
inline void DataResetMsg::set_buy_count(::google::protobuf::int32 value) {
  set_has_buy_count();
  buy_count_ = value;
}

// optional bool king_Buff = 12;
inline bool DataResetMsg::has_king_buff() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DataResetMsg::set_has_king_buff() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DataResetMsg::clear_has_king_buff() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DataResetMsg::clear_king_buff() {
  king_buff_ = false;
  clear_has_king_buff();
}
inline bool DataResetMsg::king_buff() const {
  return king_buff_;
}
inline void DataResetMsg::set_king_buff(bool value) {
  set_has_king_buff();
  king_buff_ = value;
}

// optional string server_name = 13;
inline bool DataResetMsg::has_server_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DataResetMsg::set_has_server_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DataResetMsg::clear_has_server_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DataResetMsg::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& DataResetMsg::server_name() const {
  return *server_name_;
}
inline void DataResetMsg::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void DataResetMsg::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void DataResetMsg::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataResetMsg::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* DataResetMsg::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataResetMsg::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataReset_2eproto__INCLUDED
