// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Challenge.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Challenge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

void protobuf_ShutdownFile_Challenge_2eproto() {
  delete ChallengeMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Challenge_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Challenge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ChallengeMsg::default_instance_ = new ChallengeMsg();
  ChallengeMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Challenge_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Challenge_2eproto_once_);
void protobuf_AddDesc_Challenge_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Challenge_2eproto_once_,
                 &protobuf_AddDesc_Challenge_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Challenge_2eproto {
  StaticDescriptorInitializer_Challenge_2eproto() {
    protobuf_AddDesc_Challenge_2eproto();
  }
} static_descriptor_initializer_Challenge_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ChallengeMsg::kTarUserIdFieldNumber;
const int ChallengeMsg::kTarArmyIdFieldNumber;
const int ChallengeMsg::kPayTypeFieldNumber;
const int ChallengeMsg::kTypeFieldNumber;
const int ChallengeMsg::kTarServerNameFieldNumber;
const int ChallengeMsg::kTarSiteFieldNumber;
#endif  // !_MSC_VER

ChallengeMsg::ChallengeMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChallengeMsg::InitAsDefaultInstance() {
}

ChallengeMsg::ChallengeMsg(const ChallengeMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChallengeMsg::SharedCtor() {
  _cached_size_ = 0;
  tar_userid_ = 0;
  tar_armyid_ = 0;
  pay_type_ = 0;
  type_ = 0;
  tar_servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tar_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeMsg::~ChallengeMsg() {
  SharedDtor();
}

void ChallengeMsg::SharedDtor() {
  if (tar_servername_ != &::google::protobuf::internal::kEmptyString) {
    delete tar_servername_;
  }
  if (tar_site_ != &::google::protobuf::internal::kEmptyString) {
    delete tar_site_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChallengeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChallengeMsg& ChallengeMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Challenge_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Challenge_2eproto();
#endif
  return *default_instance_;
}

ChallengeMsg* ChallengeMsg::default_instance_ = NULL;

ChallengeMsg* ChallengeMsg::New() const {
  return new ChallengeMsg;
}

void ChallengeMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tar_userid_ = 0;
    tar_armyid_ = 0;
    pay_type_ = 0;
    type_ = 0;
    if (has_tar_servername()) {
      if (tar_servername_ != &::google::protobuf::internal::kEmptyString) {
        tar_servername_->clear();
      }
    }
    if (has_tar_site()) {
      if (tar_site_ != &::google::protobuf::internal::kEmptyString) {
        tar_site_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ChallengeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tar_userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tar_userid_)));
          set_has_tar_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_armyId;
        break;
      }

      // optional int32 tar_armyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_armyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tar_armyid_)));
          set_has_tar_armyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pay_type;
        break;
      }

      // optional int32 pay_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_type_)));
          set_has_pay_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tar_serverName;
        break;
      }

      // optional string tar_serverName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tar_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tar_servername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tar_site;
        break;
      }

      // optional string tar_site = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tar_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tar_site()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChallengeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tar_userId = 1;
  if (has_tar_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tar_userid(), output);
  }

  // optional int32 tar_armyId = 2;
  if (has_tar_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tar_armyid(), output);
  }

  // optional int32 pay_type = 3;
  if (has_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pay_type(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional string tar_serverName = 5;
  if (has_tar_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tar_servername(), output);
  }

  // optional string tar_site = 6;
  if (has_tar_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tar_site(), output);
  }

}

int ChallengeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tar_userId = 1;
    if (has_tar_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tar_userid());
    }

    // optional int32 tar_armyId = 2;
    if (has_tar_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tar_armyid());
    }

    // optional int32 pay_type = 3;
    if (has_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_type());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string tar_serverName = 5;
    if (has_tar_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tar_servername());
    }

    // optional string tar_site = 6;
    if (has_tar_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tar_site());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChallengeMsg*>(&from));
}

void ChallengeMsg::MergeFrom(const ChallengeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tar_userid()) {
      set_tar_userid(from.tar_userid());
    }
    if (from.has_tar_armyid()) {
      set_tar_armyid(from.tar_armyid());
    }
    if (from.has_pay_type()) {
      set_pay_type(from.pay_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tar_servername()) {
      set_tar_servername(from.tar_servername());
    }
    if (from.has_tar_site()) {
      set_tar_site(from.tar_site());
    }
  }
}

void ChallengeMsg::CopyFrom(const ChallengeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeMsg::IsInitialized() const {

  return true;
}

void ChallengeMsg::Swap(ChallengeMsg* other) {
  if (other != this) {
    std::swap(tar_userid_, other->tar_userid_);
    std::swap(tar_armyid_, other->tar_armyid_);
    std::swap(pay_type_, other->pay_type_);
    std::swap(type_, other->type_);
    std::swap(tar_servername_, other->tar_servername_);
    std::swap(tar_site_, other->tar_site_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChallengeMsg::GetTypeName() const {
  return "com.road.yishi.proto.player.ChallengeMsg";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)
