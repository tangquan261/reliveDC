// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataReset.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataReset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

void protobuf_ShutdownFile_DataReset_2eproto() {
  delete DataResetMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DataReset_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DataReset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DataResetMsg::default_instance_ = new DataResetMsg();
  DataResetMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataReset_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DataReset_2eproto_once_);
void protobuf_AddDesc_DataReset_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DataReset_2eproto_once_,
                 &protobuf_AddDesc_DataReset_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataReset_2eproto {
  StaticDescriptorInitializer_DataReset_2eproto() {
    protobuf_AddDesc_DataReset_2eproto();
  }
} static_descriptor_initializer_DataReset_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DataResetMsg::kWearyFieldNumber;
const int DataResetMsg::kHangupCountFieldNumber;
const int DataResetMsg::kTransEnergyFieldNumber;
const int DataResetMsg::kAttackCountFieldNumber;
const int DataResetMsg::kChallengeCountFieldNumber;
const int DataResetMsg::kLeftHangupWearyFieldNumber;
const int DataResetMsg::kTower1EnterCountFieldNumber;
const int DataResetMsg::kTower2EnterCountFieldNumber;
const int DataResetMsg::kBlessingCountFieldNumber;
const int DataResetMsg::kBlessingBuffFieldNumber;
const int DataResetMsg::kBuyCountFieldNumber;
const int DataResetMsg::kKingBuffFieldNumber;
const int DataResetMsg::kServerNameFieldNumber;
#endif  // !_MSC_VER

DataResetMsg::DataResetMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataResetMsg::InitAsDefaultInstance() {
}

DataResetMsg::DataResetMsg(const DataResetMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataResetMsg::SharedCtor() {
  _cached_size_ = 0;
  weary_ = 0;
  hangup_count_ = 0;
  trans_energy_ = 0;
  attack_count_ = 0;
  challenge_count_ = 0;
  left_hangupweary_ = 0;
  tower1_entercount_ = 0;
  tower2_entercount_ = 0;
  blessing_count_ = 0;
  blessing_buff_ = 0;
  buy_count_ = 0;
  king_buff_ = false;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataResetMsg::~DataResetMsg() {
  SharedDtor();
}

void DataResetMsg::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataResetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataResetMsg& DataResetMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DataReset_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DataReset_2eproto();
#endif
  return *default_instance_;
}

DataResetMsg* DataResetMsg::default_instance_ = NULL;

DataResetMsg* DataResetMsg::New() const {
  return new DataResetMsg;
}

void DataResetMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weary_ = 0;
    hangup_count_ = 0;
    trans_energy_ = 0;
    attack_count_ = 0;
    challenge_count_ = 0;
    left_hangupweary_ = 0;
    tower1_entercount_ = 0;
    tower2_entercount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    blessing_count_ = 0;
    blessing_buff_ = 0;
    buy_count_ = 0;
    king_buff_ = false;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DataResetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weary_)));
          set_has_weary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hangup_count;
        break;
      }

      // optional int32 hangup_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hangup_count_)));
          set_has_hangup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trans_energy;
        break;
      }

      // optional int32 trans_energy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_energy_)));
          set_has_trans_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack_count;
        break;
      }

      // optional int32 attack_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_count_)));
          set_has_attack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_challenge_count;
        break;
      }

      // optional int32 challenge_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_count_)));
          set_has_challenge_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_left_hangupWeary;
        break;
      }

      // optional int32 left_hangupWeary = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_hangupWeary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_hangupweary_)));
          set_has_left_hangupweary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tower1_enterCount;
        break;
      }

      // optional int32 tower1_enterCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower1_enterCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower1_entercount_)));
          set_has_tower1_entercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tower2_enterCount;
        break;
      }

      // optional int32 tower2_enterCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower2_enterCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower2_entercount_)));
          set_has_tower2_entercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_blessing_count;
        break;
      }

      // optional int32 blessing_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessing_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessing_count_)));
          set_has_blessing_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_blessing_buff;
        break;
      }

      // optional int32 blessing_buff = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessing_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessing_buff_)));
          set_has_blessing_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_buy_count;
        break;
      }

      // optional int32 buy_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_king_Buff;
        break;
      }

      // optional bool king_Buff = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_Buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &king_buff_)));
          set_has_king_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_server_name;
        break;
      }

      // optional string server_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataResetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weary = 1;
  if (has_weary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weary(), output);
  }

  // optional int32 hangup_count = 2;
  if (has_hangup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hangup_count(), output);
  }

  // optional int32 trans_energy = 3;
  if (has_trans_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trans_energy(), output);
  }

  // optional int32 attack_count = 4;
  if (has_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack_count(), output);
  }

  // optional int32 challenge_count = 5;
  if (has_challenge_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->challenge_count(), output);
  }

  // optional int32 left_hangupWeary = 6;
  if (has_left_hangupweary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->left_hangupweary(), output);
  }

  // optional int32 tower1_enterCount = 7;
  if (has_tower1_entercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tower1_entercount(), output);
  }

  // optional int32 tower2_enterCount = 8;
  if (has_tower2_entercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tower2_entercount(), output);
  }

  // optional int32 blessing_count = 9;
  if (has_blessing_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->blessing_count(), output);
  }

  // optional int32 blessing_buff = 10;
  if (has_blessing_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->blessing_buff(), output);
  }

  // optional int32 buy_count = 11;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->buy_count(), output);
  }

  // optional bool king_Buff = 12;
  if (has_king_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->king_buff(), output);
  }

  // optional string server_name = 13;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->server_name(), output);
  }

}

int DataResetMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weary = 1;
    if (has_weary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weary());
    }

    // optional int32 hangup_count = 2;
    if (has_hangup_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangup_count());
    }

    // optional int32 trans_energy = 3;
    if (has_trans_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_energy());
    }

    // optional int32 attack_count = 4;
    if (has_attack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_count());
    }

    // optional int32 challenge_count = 5;
    if (has_challenge_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_count());
    }

    // optional int32 left_hangupWeary = 6;
    if (has_left_hangupweary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_hangupweary());
    }

    // optional int32 tower1_enterCount = 7;
    if (has_tower1_entercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower1_entercount());
    }

    // optional int32 tower2_enterCount = 8;
    if (has_tower2_entercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower2_entercount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 blessing_count = 9;
    if (has_blessing_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessing_count());
    }

    // optional int32 blessing_buff = 10;
    if (has_blessing_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessing_buff());
    }

    // optional int32 buy_count = 11;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_count());
    }

    // optional bool king_Buff = 12;
    if (has_king_buff()) {
      total_size += 1 + 1;
    }

    // optional string server_name = 13;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataResetMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataResetMsg*>(&from));
}

void DataResetMsg::MergeFrom(const DataResetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weary()) {
      set_weary(from.weary());
    }
    if (from.has_hangup_count()) {
      set_hangup_count(from.hangup_count());
    }
    if (from.has_trans_energy()) {
      set_trans_energy(from.trans_energy());
    }
    if (from.has_attack_count()) {
      set_attack_count(from.attack_count());
    }
    if (from.has_challenge_count()) {
      set_challenge_count(from.challenge_count());
    }
    if (from.has_left_hangupweary()) {
      set_left_hangupweary(from.left_hangupweary());
    }
    if (from.has_tower1_entercount()) {
      set_tower1_entercount(from.tower1_entercount());
    }
    if (from.has_tower2_entercount()) {
      set_tower2_entercount(from.tower2_entercount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blessing_count()) {
      set_blessing_count(from.blessing_count());
    }
    if (from.has_blessing_buff()) {
      set_blessing_buff(from.blessing_buff());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
    if (from.has_king_buff()) {
      set_king_buff(from.king_buff());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
  }
}

void DataResetMsg::CopyFrom(const DataResetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResetMsg::IsInitialized() const {

  return true;
}

void DataResetMsg::Swap(DataResetMsg* other) {
  if (other != this) {
    std::swap(weary_, other->weary_);
    std::swap(hangup_count_, other->hangup_count_);
    std::swap(trans_energy_, other->trans_energy_);
    std::swap(attack_count_, other->attack_count_);
    std::swap(challenge_count_, other->challenge_count_);
    std::swap(left_hangupweary_, other->left_hangupweary_);
    std::swap(tower1_entercount_, other->tower1_entercount_);
    std::swap(tower2_entercount_, other->tower2_entercount_);
    std::swap(blessing_count_, other->blessing_count_);
    std::swap(blessing_buff_, other->blessing_buff_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(king_buff_, other->king_buff_);
    std::swap(server_name_, other->server_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataResetMsg::GetTypeName() const {
  return "com.road.yishi.proto.player.DataResetMsg";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)
