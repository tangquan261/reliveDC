// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerAASRsp.proto

#ifndef PROTOBUF_PlayerAASRsp_2eproto__INCLUDED
#define PROTOBUF_PlayerAASRsp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerAASRsp_2eproto();
void protobuf_AssignDesc_PlayerAASRsp_2eproto();
void protobuf_ShutdownFile_PlayerAASRsp_2eproto();

class PlayerAASRspMsg;

// ===================================================================

class PlayerAASRspMsg : public ::google::protobuf::MessageLite {
 public:
  PlayerAASRspMsg();
  virtual ~PlayerAASRspMsg();

  PlayerAASRspMsg(const PlayerAASRspMsg& from);

  inline PlayerAASRspMsg& operator=(const PlayerAASRspMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlayerAASRspMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerAASRspMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerAASRspMsg* other);

  // implements Message ----------------------------------------------

  PlayerAASRspMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerAASRspMsg& from);
  void MergeFrom(const PlayerAASRspMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional int32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional string card_id = 3;
  inline bool has_card_id() const;
  inline void clear_card_id();
  static const int kCardIdFieldNumber = 3;
  inline const ::std::string& card_id() const;
  inline void set_card_id(const ::std::string& value);
  inline void set_card_id(const char* value);
  inline void set_card_id(const char* value, size_t size);
  inline ::std::string* mutable_card_id();
  inline ::std::string* release_card_id();
  inline void set_allocated_card_id(::std::string* card_id);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.PlayerAASRspMsg)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_card_id();
  inline void clear_has_card_id();

  bool result_;
  ::google::protobuf::int32 age_;
  ::std::string* card_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PlayerAASRsp_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PlayerAASRsp_2eproto();
  #endif
  friend void protobuf_AssignDesc_PlayerAASRsp_2eproto();
  friend void protobuf_ShutdownFile_PlayerAASRsp_2eproto();

  void InitAsDefaultInstance();
  static PlayerAASRspMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerAASRspMsg

// optional bool result = 1;
inline bool PlayerAASRspMsg::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerAASRspMsg::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerAASRspMsg::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerAASRspMsg::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool PlayerAASRspMsg::result() const {
  return result_;
}
inline void PlayerAASRspMsg::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional int32 age = 2;
inline bool PlayerAASRspMsg::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerAASRspMsg::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerAASRspMsg::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerAASRspMsg::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 PlayerAASRspMsg::age() const {
  return age_;
}
inline void PlayerAASRspMsg::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
}

// optional string card_id = 3;
inline bool PlayerAASRspMsg::has_card_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerAASRspMsg::set_has_card_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerAASRspMsg::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerAASRspMsg::clear_card_id() {
  if (card_id_ != &::google::protobuf::internal::kEmptyString) {
    card_id_->clear();
  }
  clear_has_card_id();
}
inline const ::std::string& PlayerAASRspMsg::card_id() const {
  return *card_id_;
}
inline void PlayerAASRspMsg::set_card_id(const ::std::string& value) {
  set_has_card_id();
  if (card_id_ == &::google::protobuf::internal::kEmptyString) {
    card_id_ = new ::std::string;
  }
  card_id_->assign(value);
}
inline void PlayerAASRspMsg::set_card_id(const char* value) {
  set_has_card_id();
  if (card_id_ == &::google::protobuf::internal::kEmptyString) {
    card_id_ = new ::std::string;
  }
  card_id_->assign(value);
}
inline void PlayerAASRspMsg::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  if (card_id_ == &::google::protobuf::internal::kEmptyString) {
    card_id_ = new ::std::string;
  }
  card_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerAASRspMsg::mutable_card_id() {
  set_has_card_id();
  if (card_id_ == &::google::protobuf::internal::kEmptyString) {
    card_id_ = new ::std::string;
  }
  return card_id_;
}
inline ::std::string* PlayerAASRspMsg::release_card_id() {
  clear_has_card_id();
  if (card_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_id_;
    card_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerAASRspMsg::set_allocated_card_id(::std::string* card_id) {
  if (card_id_ != &::google::protobuf::internal::kEmptyString) {
    delete card_id_;
  }
  if (card_id) {
    set_has_card_id();
    card_id_ = card_id;
  } else {
    clear_has_card_id();
    card_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerAASRsp_2eproto__INCLUDED
