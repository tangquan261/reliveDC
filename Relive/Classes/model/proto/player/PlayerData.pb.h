// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerData.proto

#ifndef PROTOBUF_PlayerData_2eproto__INCLUDED
#define PROTOBUF_PlayerData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerData_2eproto();
void protobuf_AssignDesc_PlayerData_2eproto();
void protobuf_ShutdownFile_PlayerData_2eproto();

class PlayerDataMsg;

// ===================================================================

class PlayerDataMsg : public ::google::protobuf::MessageLite {
 public:
  PlayerDataMsg();
  virtual ~PlayerDataMsg();

  PlayerDataMsg(const PlayerDataMsg& from);

  inline PlayerDataMsg& operator=(const PlayerDataMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlayerDataMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerDataMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerDataMsg* other);

  // implements Message ----------------------------------------------

  PlayerDataMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerDataMsg& from);
  void MergeFrom(const PlayerDataMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline bool user() const;
  inline void set_user(bool value);

  // optional bool castle = 2;
  inline bool has_castle() const;
  inline void clear_castle();
  static const int kCastleFieldNumber = 2;
  inline bool castle() const;
  inline void set_castle(bool value);

  // optional bool army = 3;
  inline bool has_army() const;
  inline void clear_army();
  static const int kArmyFieldNumber = 3;
  inline bool army() const;
  inline void set_army(bool value);

  // optional bool quest = 4;
  inline bool has_quest() const;
  inline void clear_quest();
  static const int kQuestFieldNumber = 4;
  inline bool quest() const;
  inline void set_quest(bool value);

  // optional bool build = 5;
  inline bool has_build() const;
  inline void clear_build();
  static const int kBuildFieldNumber = 5;
  inline bool build() const;
  inline void set_build(bool value);

  // optional bool tree = 6;
  inline bool has_tree() const;
  inline void clear_tree();
  static const int kTreeFieldNumber = 6;
  inline bool tree() const;
  inline void set_tree(bool value);

  // optional bool aas = 7;
  inline bool has_aas() const;
  inline void clear_aas();
  static const int kAasFieldNumber = 7;
  inline bool aas() const;
  inline void set_aas(bool value);

  // optional bool smith = 8;
  inline bool has_smith() const;
  inline void clear_smith();
  static const int kSmithFieldNumber = 8;
  inline bool smith() const;
  inline void set_smith(bool value);

  // optional bool bag = 9;
  inline bool has_bag() const;
  inline void clear_bag();
  static const int kBagFieldNumber = 9;
  inline bool bag() const;
  inline void set_bag(bool value);

  // optional bool leed = 10;
  inline bool has_leed() const;
  inline void clear_leed();
  static const int kLeedFieldNumber = 10;
  inline bool leed() const;
  inline void set_leed(bool value);

  // optional bool star = 11;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 11;
  inline bool star() const;
  inline void set_star(bool value);

  // optional bool friend = 12;
  inline bool has_friend_() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 12;
  inline bool friend_() const;
  inline void set_friend_(bool value);

  // optional bool effect = 13;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 13;
  inline bool effect() const;
  inline void set_effect(bool value);

  // optional bool sys = 14;
  inline bool has_sys() const;
  inline void clear_sys();
  static const int kSysFieldNumber = 14;
  inline bool sys() const;
  inline void set_sys(bool value);

  // optional bool offline = 15;
  inline bool has_offline() const;
  inline void clear_offline();
  static const int kOfflineFieldNumber = 15;
  inline bool offline() const;
  inline void set_offline(bool value);

  // optional bool reward = 16;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 16;
  inline bool reward() const;
  inline void set_reward(bool value);

  // optional bool tower = 17;
  inline bool has_tower() const;
  inline void clear_tower();
  static const int kTowerFieldNumber = 17;
  inline bool tower() const;
  inline void set_tower(bool value);

  // optional bool shop = 18;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 18;
  inline bool shop() const;
  inline void set_shop(bool value);

  // optional bool chall_reward = 19;
  inline bool has_chall_reward() const;
  inline void clear_chall_reward();
  static const int kChallRewardFieldNumber = 19;
  inline bool chall_reward() const;
  inline void set_chall_reward(bool value);

  // optional bool sns_req = 20;
  inline bool has_sns_req() const;
  inline void clear_sns_req();
  static const int kSnsReqFieldNumber = 20;
  inline bool sns_req() const;
  inline void set_sns_req(bool value);

  // optional bool active = 21;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 21;
  inline bool active() const;
  inline void set_active(bool value);

  // optional bool switches = 22;
  inline bool has_switches() const;
  inline void clear_switches();
  static const int kSwitchesFieldNumber = 22;
  inline bool switches() const;
  inline void set_switches(bool value);

  // optional bool sweep = 23;
  inline bool has_sweep() const;
  inline void clear_sweep();
  static const int kSweepFieldNumber = 23;
  inline bool sweep() const;
  inline void set_sweep(bool value);

  // optional bool questionnarie = 24;
  inline bool has_questionnarie() const;
  inline void clear_questionnarie();
  static const int kQuestionnarieFieldNumber = 24;
  inline bool questionnarie() const;
  inline void set_questionnarie(bool value);

  // optional bool king_contract = 25;
  inline bool has_king_contract() const;
  inline void clear_king_contract();
  static const int kKingContractFieldNumber = 25;
  inline bool king_contract() const;
  inline void set_king_contract(bool value);

  // optional bool rebate_charge = 26;
  inline bool has_rebate_charge() const;
  inline void clear_rebate_charge();
  static const int kRebateChargeFieldNumber = 26;
  inline bool rebate_charge() const;
  inline void set_rebate_charge(bool value);

  // optional bool rebate_consum = 27;
  inline bool has_rebate_consum() const;
  inline void clear_rebate_consum();
  static const int kRebateConsumFieldNumber = 27;
  inline bool rebate_consum() const;
  inline void set_rebate_consum(bool value);

  // optional bool sum_active = 28;
  inline bool has_sum_active() const;
  inline void clear_sum_active();
  static const int kSumActiveFieldNumber = 28;
  inline bool sum_active() const;
  inline void set_sum_active(bool value);

  // optional bool cross_score_reward = 29;
  inline bool has_cross_score_reward() const;
  inline void clear_cross_score_reward();
  static const int kCrossScoreRewardFieldNumber = 29;
  inline bool cross_score_reward() const;
  inline void set_cross_score_reward(bool value);

  // optional bool appell = 30;
  inline bool has_appell() const;
  inline void clear_appell();
  static const int kAppellFieldNumber = 30;
  inline bool appell() const;
  inline void set_appell(bool value);

  // optional bool bottle = 31;
  inline bool has_bottle() const;
  inline void clear_bottle();
  static const int kBottleFieldNumber = 31;
  inline bool bottle() const;
  inline void set_bottle(bool value);

  // optional bool pet_challenge_reward = 32;
  inline bool has_pet_challenge_reward() const;
  inline void clear_pet_challenge_reward();
  static const int kPetChallengeRewardFieldNumber = 32;
  inline bool pet_challenge_reward() const;
  inline void set_pet_challenge_reward(bool value);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.PlayerDataMsg)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_castle();
  inline void clear_has_castle();
  inline void set_has_army();
  inline void clear_has_army();
  inline void set_has_quest();
  inline void clear_has_quest();
  inline void set_has_build();
  inline void clear_has_build();
  inline void set_has_tree();
  inline void clear_has_tree();
  inline void set_has_aas();
  inline void clear_has_aas();
  inline void set_has_smith();
  inline void clear_has_smith();
  inline void set_has_bag();
  inline void clear_has_bag();
  inline void set_has_leed();
  inline void clear_has_leed();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_friend_();
  inline void clear_has_friend_();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_sys();
  inline void clear_has_sys();
  inline void set_has_offline();
  inline void clear_has_offline();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_tower();
  inline void clear_has_tower();
  inline void set_has_shop();
  inline void clear_has_shop();
  inline void set_has_chall_reward();
  inline void clear_has_chall_reward();
  inline void set_has_sns_req();
  inline void clear_has_sns_req();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_switches();
  inline void clear_has_switches();
  inline void set_has_sweep();
  inline void clear_has_sweep();
  inline void set_has_questionnarie();
  inline void clear_has_questionnarie();
  inline void set_has_king_contract();
  inline void clear_has_king_contract();
  inline void set_has_rebate_charge();
  inline void clear_has_rebate_charge();
  inline void set_has_rebate_consum();
  inline void clear_has_rebate_consum();
  inline void set_has_sum_active();
  inline void clear_has_sum_active();
  inline void set_has_cross_score_reward();
  inline void clear_has_cross_score_reward();
  inline void set_has_appell();
  inline void clear_has_appell();
  inline void set_has_bottle();
  inline void clear_has_bottle();
  inline void set_has_pet_challenge_reward();
  inline void clear_has_pet_challenge_reward();

  bool user_;
  bool castle_;
  bool army_;
  bool quest_;
  bool build_;
  bool tree_;
  bool aas_;
  bool smith_;
  bool bag_;
  bool leed_;
  bool star_;
  bool friend__;
  bool effect_;
  bool sys_;
  bool offline_;
  bool reward_;
  bool tower_;
  bool shop_;
  bool chall_reward_;
  bool sns_req_;
  bool active_;
  bool switches_;
  bool sweep_;
  bool questionnarie_;
  bool king_contract_;
  bool rebate_charge_;
  bool rebate_consum_;
  bool sum_active_;
  bool cross_score_reward_;
  bool appell_;
  bool bottle_;
  bool pet_challenge_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_PlayerData_2eproto();
  friend void protobuf_ShutdownFile_PlayerData_2eproto();

  void InitAsDefaultInstance();
  static PlayerDataMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerDataMsg

// optional bool user = 1;
inline bool PlayerDataMsg::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerDataMsg::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerDataMsg::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerDataMsg::clear_user() {
  user_ = false;
  clear_has_user();
}
inline bool PlayerDataMsg::user() const {
  return user_;
}
inline void PlayerDataMsg::set_user(bool value) {
  set_has_user();
  user_ = value;
}

// optional bool castle = 2;
inline bool PlayerDataMsg::has_castle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerDataMsg::set_has_castle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerDataMsg::clear_has_castle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerDataMsg::clear_castle() {
  castle_ = false;
  clear_has_castle();
}
inline bool PlayerDataMsg::castle() const {
  return castle_;
}
inline void PlayerDataMsg::set_castle(bool value) {
  set_has_castle();
  castle_ = value;
}

// optional bool army = 3;
inline bool PlayerDataMsg::has_army() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerDataMsg::set_has_army() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerDataMsg::clear_has_army() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerDataMsg::clear_army() {
  army_ = false;
  clear_has_army();
}
inline bool PlayerDataMsg::army() const {
  return army_;
}
inline void PlayerDataMsg::set_army(bool value) {
  set_has_army();
  army_ = value;
}

// optional bool quest = 4;
inline bool PlayerDataMsg::has_quest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerDataMsg::set_has_quest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerDataMsg::clear_has_quest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerDataMsg::clear_quest() {
  quest_ = false;
  clear_has_quest();
}
inline bool PlayerDataMsg::quest() const {
  return quest_;
}
inline void PlayerDataMsg::set_quest(bool value) {
  set_has_quest();
  quest_ = value;
}

// optional bool build = 5;
inline bool PlayerDataMsg::has_build() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerDataMsg::set_has_build() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerDataMsg::clear_has_build() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerDataMsg::clear_build() {
  build_ = false;
  clear_has_build();
}
inline bool PlayerDataMsg::build() const {
  return build_;
}
inline void PlayerDataMsg::set_build(bool value) {
  set_has_build();
  build_ = value;
}

// optional bool tree = 6;
inline bool PlayerDataMsg::has_tree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerDataMsg::set_has_tree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerDataMsg::clear_has_tree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerDataMsg::clear_tree() {
  tree_ = false;
  clear_has_tree();
}
inline bool PlayerDataMsg::tree() const {
  return tree_;
}
inline void PlayerDataMsg::set_tree(bool value) {
  set_has_tree();
  tree_ = value;
}

// optional bool aas = 7;
inline bool PlayerDataMsg::has_aas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerDataMsg::set_has_aas() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerDataMsg::clear_has_aas() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerDataMsg::clear_aas() {
  aas_ = false;
  clear_has_aas();
}
inline bool PlayerDataMsg::aas() const {
  return aas_;
}
inline void PlayerDataMsg::set_aas(bool value) {
  set_has_aas();
  aas_ = value;
}

// optional bool smith = 8;
inline bool PlayerDataMsg::has_smith() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerDataMsg::set_has_smith() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerDataMsg::clear_has_smith() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerDataMsg::clear_smith() {
  smith_ = false;
  clear_has_smith();
}
inline bool PlayerDataMsg::smith() const {
  return smith_;
}
inline void PlayerDataMsg::set_smith(bool value) {
  set_has_smith();
  smith_ = value;
}

// optional bool bag = 9;
inline bool PlayerDataMsg::has_bag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerDataMsg::set_has_bag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerDataMsg::clear_has_bag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerDataMsg::clear_bag() {
  bag_ = false;
  clear_has_bag();
}
inline bool PlayerDataMsg::bag() const {
  return bag_;
}
inline void PlayerDataMsg::set_bag(bool value) {
  set_has_bag();
  bag_ = value;
}

// optional bool leed = 10;
inline bool PlayerDataMsg::has_leed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerDataMsg::set_has_leed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerDataMsg::clear_has_leed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerDataMsg::clear_leed() {
  leed_ = false;
  clear_has_leed();
}
inline bool PlayerDataMsg::leed() const {
  return leed_;
}
inline void PlayerDataMsg::set_leed(bool value) {
  set_has_leed();
  leed_ = value;
}

// optional bool star = 11;
inline bool PlayerDataMsg::has_star() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerDataMsg::set_has_star() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerDataMsg::clear_has_star() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerDataMsg::clear_star() {
  star_ = false;
  clear_has_star();
}
inline bool PlayerDataMsg::star() const {
  return star_;
}
inline void PlayerDataMsg::set_star(bool value) {
  set_has_star();
  star_ = value;
}

// optional bool friend = 12;
inline bool PlayerDataMsg::has_friend_() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerDataMsg::set_has_friend_() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerDataMsg::clear_has_friend_() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerDataMsg::clear_friend_() {
  friend__ = false;
  clear_has_friend_();
}
inline bool PlayerDataMsg::friend_() const {
  return friend__;
}
inline void PlayerDataMsg::set_friend_(bool value) {
  set_has_friend_();
  friend__ = value;
}

// optional bool effect = 13;
inline bool PlayerDataMsg::has_effect() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerDataMsg::set_has_effect() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerDataMsg::clear_has_effect() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerDataMsg::clear_effect() {
  effect_ = false;
  clear_has_effect();
}
inline bool PlayerDataMsg::effect() const {
  return effect_;
}
inline void PlayerDataMsg::set_effect(bool value) {
  set_has_effect();
  effect_ = value;
}

// optional bool sys = 14;
inline bool PlayerDataMsg::has_sys() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerDataMsg::set_has_sys() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerDataMsg::clear_has_sys() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerDataMsg::clear_sys() {
  sys_ = false;
  clear_has_sys();
}
inline bool PlayerDataMsg::sys() const {
  return sys_;
}
inline void PlayerDataMsg::set_sys(bool value) {
  set_has_sys();
  sys_ = value;
}

// optional bool offline = 15;
inline bool PlayerDataMsg::has_offline() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerDataMsg::set_has_offline() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerDataMsg::clear_has_offline() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerDataMsg::clear_offline() {
  offline_ = false;
  clear_has_offline();
}
inline bool PlayerDataMsg::offline() const {
  return offline_;
}
inline void PlayerDataMsg::set_offline(bool value) {
  set_has_offline();
  offline_ = value;
}

// optional bool reward = 16;
inline bool PlayerDataMsg::has_reward() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerDataMsg::set_has_reward() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerDataMsg::clear_has_reward() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerDataMsg::clear_reward() {
  reward_ = false;
  clear_has_reward();
}
inline bool PlayerDataMsg::reward() const {
  return reward_;
}
inline void PlayerDataMsg::set_reward(bool value) {
  set_has_reward();
  reward_ = value;
}

// optional bool tower = 17;
inline bool PlayerDataMsg::has_tower() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerDataMsg::set_has_tower() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerDataMsg::clear_has_tower() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerDataMsg::clear_tower() {
  tower_ = false;
  clear_has_tower();
}
inline bool PlayerDataMsg::tower() const {
  return tower_;
}
inline void PlayerDataMsg::set_tower(bool value) {
  set_has_tower();
  tower_ = value;
}

// optional bool shop = 18;
inline bool PlayerDataMsg::has_shop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerDataMsg::set_has_shop() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerDataMsg::clear_has_shop() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerDataMsg::clear_shop() {
  shop_ = false;
  clear_has_shop();
}
inline bool PlayerDataMsg::shop() const {
  return shop_;
}
inline void PlayerDataMsg::set_shop(bool value) {
  set_has_shop();
  shop_ = value;
}

// optional bool chall_reward = 19;
inline bool PlayerDataMsg::has_chall_reward() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerDataMsg::set_has_chall_reward() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerDataMsg::clear_has_chall_reward() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerDataMsg::clear_chall_reward() {
  chall_reward_ = false;
  clear_has_chall_reward();
}
inline bool PlayerDataMsg::chall_reward() const {
  return chall_reward_;
}
inline void PlayerDataMsg::set_chall_reward(bool value) {
  set_has_chall_reward();
  chall_reward_ = value;
}

// optional bool sns_req = 20;
inline bool PlayerDataMsg::has_sns_req() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PlayerDataMsg::set_has_sns_req() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PlayerDataMsg::clear_has_sns_req() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PlayerDataMsg::clear_sns_req() {
  sns_req_ = false;
  clear_has_sns_req();
}
inline bool PlayerDataMsg::sns_req() const {
  return sns_req_;
}
inline void PlayerDataMsg::set_sns_req(bool value) {
  set_has_sns_req();
  sns_req_ = value;
}

// optional bool active = 21;
inline bool PlayerDataMsg::has_active() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PlayerDataMsg::set_has_active() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PlayerDataMsg::clear_has_active() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PlayerDataMsg::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool PlayerDataMsg::active() const {
  return active_;
}
inline void PlayerDataMsg::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// optional bool switches = 22;
inline bool PlayerDataMsg::has_switches() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PlayerDataMsg::set_has_switches() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PlayerDataMsg::clear_has_switches() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PlayerDataMsg::clear_switches() {
  switches_ = false;
  clear_has_switches();
}
inline bool PlayerDataMsg::switches() const {
  return switches_;
}
inline void PlayerDataMsg::set_switches(bool value) {
  set_has_switches();
  switches_ = value;
}

// optional bool sweep = 23;
inline bool PlayerDataMsg::has_sweep() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PlayerDataMsg::set_has_sweep() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PlayerDataMsg::clear_has_sweep() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PlayerDataMsg::clear_sweep() {
  sweep_ = false;
  clear_has_sweep();
}
inline bool PlayerDataMsg::sweep() const {
  return sweep_;
}
inline void PlayerDataMsg::set_sweep(bool value) {
  set_has_sweep();
  sweep_ = value;
}

// optional bool questionnarie = 24;
inline bool PlayerDataMsg::has_questionnarie() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PlayerDataMsg::set_has_questionnarie() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PlayerDataMsg::clear_has_questionnarie() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PlayerDataMsg::clear_questionnarie() {
  questionnarie_ = false;
  clear_has_questionnarie();
}
inline bool PlayerDataMsg::questionnarie() const {
  return questionnarie_;
}
inline void PlayerDataMsg::set_questionnarie(bool value) {
  set_has_questionnarie();
  questionnarie_ = value;
}

// optional bool king_contract = 25;
inline bool PlayerDataMsg::has_king_contract() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PlayerDataMsg::set_has_king_contract() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PlayerDataMsg::clear_has_king_contract() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PlayerDataMsg::clear_king_contract() {
  king_contract_ = false;
  clear_has_king_contract();
}
inline bool PlayerDataMsg::king_contract() const {
  return king_contract_;
}
inline void PlayerDataMsg::set_king_contract(bool value) {
  set_has_king_contract();
  king_contract_ = value;
}

// optional bool rebate_charge = 26;
inline bool PlayerDataMsg::has_rebate_charge() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PlayerDataMsg::set_has_rebate_charge() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PlayerDataMsg::clear_has_rebate_charge() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PlayerDataMsg::clear_rebate_charge() {
  rebate_charge_ = false;
  clear_has_rebate_charge();
}
inline bool PlayerDataMsg::rebate_charge() const {
  return rebate_charge_;
}
inline void PlayerDataMsg::set_rebate_charge(bool value) {
  set_has_rebate_charge();
  rebate_charge_ = value;
}

// optional bool rebate_consum = 27;
inline bool PlayerDataMsg::has_rebate_consum() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PlayerDataMsg::set_has_rebate_consum() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PlayerDataMsg::clear_has_rebate_consum() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PlayerDataMsg::clear_rebate_consum() {
  rebate_consum_ = false;
  clear_has_rebate_consum();
}
inline bool PlayerDataMsg::rebate_consum() const {
  return rebate_consum_;
}
inline void PlayerDataMsg::set_rebate_consum(bool value) {
  set_has_rebate_consum();
  rebate_consum_ = value;
}

// optional bool sum_active = 28;
inline bool PlayerDataMsg::has_sum_active() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PlayerDataMsg::set_has_sum_active() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PlayerDataMsg::clear_has_sum_active() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PlayerDataMsg::clear_sum_active() {
  sum_active_ = false;
  clear_has_sum_active();
}
inline bool PlayerDataMsg::sum_active() const {
  return sum_active_;
}
inline void PlayerDataMsg::set_sum_active(bool value) {
  set_has_sum_active();
  sum_active_ = value;
}

// optional bool cross_score_reward = 29;
inline bool PlayerDataMsg::has_cross_score_reward() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PlayerDataMsg::set_has_cross_score_reward() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PlayerDataMsg::clear_has_cross_score_reward() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PlayerDataMsg::clear_cross_score_reward() {
  cross_score_reward_ = false;
  clear_has_cross_score_reward();
}
inline bool PlayerDataMsg::cross_score_reward() const {
  return cross_score_reward_;
}
inline void PlayerDataMsg::set_cross_score_reward(bool value) {
  set_has_cross_score_reward();
  cross_score_reward_ = value;
}

// optional bool appell = 30;
inline bool PlayerDataMsg::has_appell() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PlayerDataMsg::set_has_appell() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PlayerDataMsg::clear_has_appell() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PlayerDataMsg::clear_appell() {
  appell_ = false;
  clear_has_appell();
}
inline bool PlayerDataMsg::appell() const {
  return appell_;
}
inline void PlayerDataMsg::set_appell(bool value) {
  set_has_appell();
  appell_ = value;
}

// optional bool bottle = 31;
inline bool PlayerDataMsg::has_bottle() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PlayerDataMsg::set_has_bottle() {
  _has_bits_[0] |= 0x40000000u;
}
inline void PlayerDataMsg::clear_has_bottle() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void PlayerDataMsg::clear_bottle() {
  bottle_ = false;
  clear_has_bottle();
}
inline bool PlayerDataMsg::bottle() const {
  return bottle_;
}
inline void PlayerDataMsg::set_bottle(bool value) {
  set_has_bottle();
  bottle_ = value;
}

// optional bool pet_challenge_reward = 32;
inline bool PlayerDataMsg::has_pet_challenge_reward() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PlayerDataMsg::set_has_pet_challenge_reward() {
  _has_bits_[0] |= 0x80000000u;
}
inline void PlayerDataMsg::clear_has_pet_challenge_reward() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void PlayerDataMsg::clear_pet_challenge_reward() {
  pet_challenge_reward_ = false;
  clear_has_pet_challenge_reward();
}
inline bool PlayerDataMsg::pet_challenge_reward() const {
  return pet_challenge_reward_;
}
inline void PlayerDataMsg::set_pet_challenge_reward(bool value) {
  set_has_pet_challenge_reward();
  pet_challenge_reward_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerData_2eproto__INCLUDED
