// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Challenge.proto

#ifndef PROTOBUF_Challenge_2eproto__INCLUDED
#define PROTOBUF_Challenge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Challenge_2eproto();
void protobuf_AssignDesc_Challenge_2eproto();
void protobuf_ShutdownFile_Challenge_2eproto();

class ChallengeMsg;

// ===================================================================

class ChallengeMsg : public ::google::protobuf::MessageLite {
 public:
  ChallengeMsg();
  virtual ~ChallengeMsg();

  ChallengeMsg(const ChallengeMsg& from);

  inline ChallengeMsg& operator=(const ChallengeMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChallengeMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChallengeMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChallengeMsg* other);

  // implements Message ----------------------------------------------

  ChallengeMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChallengeMsg& from);
  void MergeFrom(const ChallengeMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tar_userId = 1;
  inline bool has_tar_userid() const;
  inline void clear_tar_userid();
  static const int kTarUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 tar_userid() const;
  inline void set_tar_userid(::google::protobuf::int32 value);

  // optional int32 tar_armyId = 2;
  inline bool has_tar_armyid() const;
  inline void clear_tar_armyid();
  static const int kTarArmyIdFieldNumber = 2;
  inline ::google::protobuf::int32 tar_armyid() const;
  inline void set_tar_armyid(::google::protobuf::int32 value);

  // optional int32 pay_type = 3;
  inline bool has_pay_type() const;
  inline void clear_pay_type();
  static const int kPayTypeFieldNumber = 3;
  inline ::google::protobuf::int32 pay_type() const;
  inline void set_pay_type(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string tar_serverName = 5;
  inline bool has_tar_servername() const;
  inline void clear_tar_servername();
  static const int kTarServerNameFieldNumber = 5;
  inline const ::std::string& tar_servername() const;
  inline void set_tar_servername(const ::std::string& value);
  inline void set_tar_servername(const char* value);
  inline void set_tar_servername(const char* value, size_t size);
  inline ::std::string* mutable_tar_servername();
  inline ::std::string* release_tar_servername();
  inline void set_allocated_tar_servername(::std::string* tar_servername);

  // optional string tar_site = 6;
  inline bool has_tar_site() const;
  inline void clear_tar_site();
  static const int kTarSiteFieldNumber = 6;
  inline const ::std::string& tar_site() const;
  inline void set_tar_site(const ::std::string& value);
  inline void set_tar_site(const char* value);
  inline void set_tar_site(const char* value, size_t size);
  inline ::std::string* mutable_tar_site();
  inline ::std::string* release_tar_site();
  inline void set_allocated_tar_site(::std::string* tar_site);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.ChallengeMsg)
 private:
  inline void set_has_tar_userid();
  inline void clear_has_tar_userid();
  inline void set_has_tar_armyid();
  inline void clear_has_tar_armyid();
  inline void set_has_pay_type();
  inline void clear_has_pay_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tar_servername();
  inline void clear_has_tar_servername();
  inline void set_has_tar_site();
  inline void clear_has_tar_site();

  ::google::protobuf::int32 tar_userid_;
  ::google::protobuf::int32 tar_armyid_;
  ::google::protobuf::int32 pay_type_;
  ::google::protobuf::int32 type_;
  ::std::string* tar_servername_;
  ::std::string* tar_site_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Challenge_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Challenge_2eproto();
  #endif
  friend void protobuf_AssignDesc_Challenge_2eproto();
  friend void protobuf_ShutdownFile_Challenge_2eproto();

  void InitAsDefaultInstance();
  static ChallengeMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// ChallengeMsg

// optional int32 tar_userId = 1;
inline bool ChallengeMsg::has_tar_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeMsg::set_has_tar_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChallengeMsg::clear_has_tar_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChallengeMsg::clear_tar_userid() {
  tar_userid_ = 0;
  clear_has_tar_userid();
}
inline ::google::protobuf::int32 ChallengeMsg::tar_userid() const {
  return tar_userid_;
}
inline void ChallengeMsg::set_tar_userid(::google::protobuf::int32 value) {
  set_has_tar_userid();
  tar_userid_ = value;
}

// optional int32 tar_armyId = 2;
inline bool ChallengeMsg::has_tar_armyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChallengeMsg::set_has_tar_armyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChallengeMsg::clear_has_tar_armyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChallengeMsg::clear_tar_armyid() {
  tar_armyid_ = 0;
  clear_has_tar_armyid();
}
inline ::google::protobuf::int32 ChallengeMsg::tar_armyid() const {
  return tar_armyid_;
}
inline void ChallengeMsg::set_tar_armyid(::google::protobuf::int32 value) {
  set_has_tar_armyid();
  tar_armyid_ = value;
}

// optional int32 pay_type = 3;
inline bool ChallengeMsg::has_pay_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChallengeMsg::set_has_pay_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChallengeMsg::clear_has_pay_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChallengeMsg::clear_pay_type() {
  pay_type_ = 0;
  clear_has_pay_type();
}
inline ::google::protobuf::int32 ChallengeMsg::pay_type() const {
  return pay_type_;
}
inline void ChallengeMsg::set_pay_type(::google::protobuf::int32 value) {
  set_has_pay_type();
  pay_type_ = value;
}

// optional int32 type = 4;
inline bool ChallengeMsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChallengeMsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChallengeMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChallengeMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ChallengeMsg::type() const {
  return type_;
}
inline void ChallengeMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string tar_serverName = 5;
inline bool ChallengeMsg::has_tar_servername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChallengeMsg::set_has_tar_servername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChallengeMsg::clear_has_tar_servername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChallengeMsg::clear_tar_servername() {
  if (tar_servername_ != &::google::protobuf::internal::kEmptyString) {
    tar_servername_->clear();
  }
  clear_has_tar_servername();
}
inline const ::std::string& ChallengeMsg::tar_servername() const {
  return *tar_servername_;
}
inline void ChallengeMsg::set_tar_servername(const ::std::string& value) {
  set_has_tar_servername();
  if (tar_servername_ == &::google::protobuf::internal::kEmptyString) {
    tar_servername_ = new ::std::string;
  }
  tar_servername_->assign(value);
}
inline void ChallengeMsg::set_tar_servername(const char* value) {
  set_has_tar_servername();
  if (tar_servername_ == &::google::protobuf::internal::kEmptyString) {
    tar_servername_ = new ::std::string;
  }
  tar_servername_->assign(value);
}
inline void ChallengeMsg::set_tar_servername(const char* value, size_t size) {
  set_has_tar_servername();
  if (tar_servername_ == &::google::protobuf::internal::kEmptyString) {
    tar_servername_ = new ::std::string;
  }
  tar_servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChallengeMsg::mutable_tar_servername() {
  set_has_tar_servername();
  if (tar_servername_ == &::google::protobuf::internal::kEmptyString) {
    tar_servername_ = new ::std::string;
  }
  return tar_servername_;
}
inline ::std::string* ChallengeMsg::release_tar_servername() {
  clear_has_tar_servername();
  if (tar_servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tar_servername_;
    tar_servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChallengeMsg::set_allocated_tar_servername(::std::string* tar_servername) {
  if (tar_servername_ != &::google::protobuf::internal::kEmptyString) {
    delete tar_servername_;
  }
  if (tar_servername) {
    set_has_tar_servername();
    tar_servername_ = tar_servername;
  } else {
    clear_has_tar_servername();
    tar_servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tar_site = 6;
inline bool ChallengeMsg::has_tar_site() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChallengeMsg::set_has_tar_site() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChallengeMsg::clear_has_tar_site() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChallengeMsg::clear_tar_site() {
  if (tar_site_ != &::google::protobuf::internal::kEmptyString) {
    tar_site_->clear();
  }
  clear_has_tar_site();
}
inline const ::std::string& ChallengeMsg::tar_site() const {
  return *tar_site_;
}
inline void ChallengeMsg::set_tar_site(const ::std::string& value) {
  set_has_tar_site();
  if (tar_site_ == &::google::protobuf::internal::kEmptyString) {
    tar_site_ = new ::std::string;
  }
  tar_site_->assign(value);
}
inline void ChallengeMsg::set_tar_site(const char* value) {
  set_has_tar_site();
  if (tar_site_ == &::google::protobuf::internal::kEmptyString) {
    tar_site_ = new ::std::string;
  }
  tar_site_->assign(value);
}
inline void ChallengeMsg::set_tar_site(const char* value, size_t size) {
  set_has_tar_site();
  if (tar_site_ == &::google::protobuf::internal::kEmptyString) {
    tar_site_ = new ::std::string;
  }
  tar_site_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChallengeMsg::mutable_tar_site() {
  set_has_tar_site();
  if (tar_site_ == &::google::protobuf::internal::kEmptyString) {
    tar_site_ = new ::std::string;
  }
  return tar_site_;
}
inline ::std::string* ChallengeMsg::release_tar_site() {
  clear_has_tar_site();
  if (tar_site_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tar_site_;
    tar_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChallengeMsg::set_allocated_tar_site(::std::string* tar_site) {
  if (tar_site_ != &::google::protobuf::internal::kEmptyString) {
    delete tar_site_;
  }
  if (tar_site) {
    set_has_tar_site();
    tar_site_ = tar_site;
  } else {
    clear_has_tar_site();
    tar_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Challenge_2eproto__INCLUDED
