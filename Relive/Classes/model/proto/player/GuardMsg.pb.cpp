// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuardMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuardMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace watch {

void protobuf_ShutdownFile_GuardMsg_2eproto() {
  delete GuardMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_GuardMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_GuardMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GuardMsg::default_instance_ = new GuardMsg();
  GuardMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuardMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GuardMsg_2eproto_once_);
void protobuf_AddDesc_GuardMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GuardMsg_2eproto_once_,
                 &protobuf_AddDesc_GuardMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuardMsg_2eproto {
  StaticDescriptorInitializer_GuardMsg_2eproto() {
    protobuf_AddDesc_GuardMsg_2eproto();
  }
} static_descriptor_initializer_GuardMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GuardMsg::kFireResiFieldNumber;
const int GuardMsg::kWaterResiFieldNumber;
const int GuardMsg::kElectResiFieldNumber;
const int GuardMsg::kWindResiFieldNumber;
const int GuardMsg::kDarkResiFieldNumber;
const int GuardMsg::kLightResiFieldNumber;
const int GuardMsg::kReduceResiFieldNumber;
const int GuardMsg::kPetFireResiFieldNumber;
const int GuardMsg::kPetWaterResiFieldNumber;
const int GuardMsg::kPetElectResiFieldNumber;
const int GuardMsg::kPetWindResiFieldNumber;
const int GuardMsg::kPetDarkResiFieldNumber;
const int GuardMsg::kPetLightResiFieldNumber;
#endif  // !_MSC_VER

GuardMsg::GuardMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuardMsg::InitAsDefaultInstance() {
}

GuardMsg::GuardMsg(const GuardMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuardMsg::SharedCtor() {
  _cached_size_ = 0;
  fireresi_ = 0;
  waterresi_ = 0;
  electresi_ = 0;
  windresi_ = 0;
  darkresi_ = 0;
  lightresi_ = 0;
  reduce_resi_ = 0;
  pet_fireresi_ = 0;
  pet_waterresi_ = 0;
  pet_electresi_ = 0;
  pet_windresi_ = 0;
  pet_darkresi_ = 0;
  pet_lightresi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuardMsg::~GuardMsg() {
  SharedDtor();
}

void GuardMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuardMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuardMsg& GuardMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GuardMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GuardMsg_2eproto();
#endif
  return *default_instance_;
}

GuardMsg* GuardMsg::default_instance_ = NULL;

GuardMsg* GuardMsg::New() const {
  return new GuardMsg;
}

void GuardMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fireresi_ = 0;
    waterresi_ = 0;
    electresi_ = 0;
    windresi_ = 0;
    darkresi_ = 0;
    lightresi_ = 0;
    reduce_resi_ = 0;
    pet_fireresi_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pet_waterresi_ = 0;
    pet_electresi_ = 0;
    pet_windresi_ = 0;
    pet_darkresi_ = 0;
    pet_lightresi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuardMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fireResi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fireresi_)));
          set_has_fireresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_waterResi;
        break;
      }

      // optional int32 waterResi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waterResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waterresi_)));
          set_has_waterresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_electResi;
        break;
      }

      // optional int32 electResi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_electResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &electresi_)));
          set_has_electresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_windResi;
        break;
      }

      // optional int32 windResi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_windResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windresi_)));
          set_has_windresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_darkResi;
        break;
      }

      // optional int32 darkResi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_darkResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &darkresi_)));
          set_has_darkresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lightResi;
        break;
      }

      // optional int32 lightResi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lightResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lightresi_)));
          set_has_lightresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reduce_resi;
        break;
      }

      // optional int32 reduce_resi = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reduce_resi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_resi_)));
          set_has_reduce_resi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pet_fireResi;
        break;
      }

      // optional int32 pet_fireResi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_fireResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_fireresi_)));
          set_has_pet_fireresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pet_waterResi;
        break;
      }

      // optional int32 pet_waterResi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_waterResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_waterresi_)));
          set_has_pet_waterresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pet_electResi;
        break;
      }

      // optional int32 pet_electResi = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_electResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_electresi_)));
          set_has_pet_electresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pet_windResi;
        break;
      }

      // optional int32 pet_windResi = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_windResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_windresi_)));
          set_has_pet_windresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_pet_darkResi;
        break;
      }

      // optional int32 pet_darkResi = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_darkResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_darkresi_)));
          set_has_pet_darkresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pet_lightResi;
        break;
      }

      // optional int32 pet_lightResi = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_lightResi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_lightresi_)));
          set_has_pet_lightresi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuardMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fireResi = 1;
  if (has_fireresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fireresi(), output);
  }

  // optional int32 waterResi = 2;
  if (has_waterresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->waterresi(), output);
  }

  // optional int32 electResi = 3;
  if (has_electresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->electresi(), output);
  }

  // optional int32 windResi = 4;
  if (has_windresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->windresi(), output);
  }

  // optional int32 darkResi = 5;
  if (has_darkresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->darkresi(), output);
  }

  // optional int32 lightResi = 6;
  if (has_lightresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lightresi(), output);
  }

  // optional int32 reduce_resi = 7;
  if (has_reduce_resi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reduce_resi(), output);
  }

  // optional int32 pet_fireResi = 8;
  if (has_pet_fireresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pet_fireresi(), output);
  }

  // optional int32 pet_waterResi = 9;
  if (has_pet_waterresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pet_waterresi(), output);
  }

  // optional int32 pet_electResi = 10;
  if (has_pet_electresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pet_electresi(), output);
  }

  // optional int32 pet_windResi = 11;
  if (has_pet_windresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pet_windresi(), output);
  }

  // optional int32 pet_darkResi = 12;
  if (has_pet_darkresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->pet_darkresi(), output);
  }

  // optional int32 pet_lightResi = 13;
  if (has_pet_lightresi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pet_lightresi(), output);
  }

}

int GuardMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fireResi = 1;
    if (has_fireresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fireresi());
    }

    // optional int32 waterResi = 2;
    if (has_waterresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waterresi());
    }

    // optional int32 electResi = 3;
    if (has_electresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->electresi());
    }

    // optional int32 windResi = 4;
    if (has_windresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windresi());
    }

    // optional int32 darkResi = 5;
    if (has_darkresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->darkresi());
    }

    // optional int32 lightResi = 6;
    if (has_lightresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lightresi());
    }

    // optional int32 reduce_resi = 7;
    if (has_reduce_resi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reduce_resi());
    }

    // optional int32 pet_fireResi = 8;
    if (has_pet_fireresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_fireresi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pet_waterResi = 9;
    if (has_pet_waterresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_waterresi());
    }

    // optional int32 pet_electResi = 10;
    if (has_pet_electresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_electresi());
    }

    // optional int32 pet_windResi = 11;
    if (has_pet_windresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_windresi());
    }

    // optional int32 pet_darkResi = 12;
    if (has_pet_darkresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_darkresi());
    }

    // optional int32 pet_lightResi = 13;
    if (has_pet_lightresi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_lightresi());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuardMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuardMsg*>(&from));
}

void GuardMsg::MergeFrom(const GuardMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fireresi()) {
      set_fireresi(from.fireresi());
    }
    if (from.has_waterresi()) {
      set_waterresi(from.waterresi());
    }
    if (from.has_electresi()) {
      set_electresi(from.electresi());
    }
    if (from.has_windresi()) {
      set_windresi(from.windresi());
    }
    if (from.has_darkresi()) {
      set_darkresi(from.darkresi());
    }
    if (from.has_lightresi()) {
      set_lightresi(from.lightresi());
    }
    if (from.has_reduce_resi()) {
      set_reduce_resi(from.reduce_resi());
    }
    if (from.has_pet_fireresi()) {
      set_pet_fireresi(from.pet_fireresi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pet_waterresi()) {
      set_pet_waterresi(from.pet_waterresi());
    }
    if (from.has_pet_electresi()) {
      set_pet_electresi(from.pet_electresi());
    }
    if (from.has_pet_windresi()) {
      set_pet_windresi(from.pet_windresi());
    }
    if (from.has_pet_darkresi()) {
      set_pet_darkresi(from.pet_darkresi());
    }
    if (from.has_pet_lightresi()) {
      set_pet_lightresi(from.pet_lightresi());
    }
  }
}

void GuardMsg::CopyFrom(const GuardMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardMsg::IsInitialized() const {

  return true;
}

void GuardMsg::Swap(GuardMsg* other) {
  if (other != this) {
    std::swap(fireresi_, other->fireresi_);
    std::swap(waterresi_, other->waterresi_);
    std::swap(electresi_, other->electresi_);
    std::swap(windresi_, other->windresi_);
    std::swap(darkresi_, other->darkresi_);
    std::swap(lightresi_, other->lightresi_);
    std::swap(reduce_resi_, other->reduce_resi_);
    std::swap(pet_fireresi_, other->pet_fireresi_);
    std::swap(pet_waterresi_, other->pet_waterresi_);
    std::swap(pet_electresi_, other->pet_electresi_);
    std::swap(pet_windresi_, other->pet_windresi_);
    std::swap(pet_darkresi_, other->pet_darkresi_);
    std::swap(pet_lightresi_, other->pet_lightresi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuardMsg::GetTypeName() const {
  return "com.road.yishi.proto.watch.GuardMsg";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace watch
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)
