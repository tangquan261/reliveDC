// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerPlugInfo.proto

#ifndef PROTOBUF_PlayerPlugInfo_2eproto__INCLUDED
#define PROTOBUF_PlayerPlugInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerPlugInfo_2eproto();
void protobuf_AssignDesc_PlayerPlugInfo_2eproto();
void protobuf_ShutdownFile_PlayerPlugInfo_2eproto();

class PlayerPlugInfoMsg;

// ===================================================================

class PlayerPlugInfoMsg : public ::google::protobuf::MessageLite {
 public:
  PlayerPlugInfoMsg();
  virtual ~PlayerPlugInfoMsg();

  PlayerPlugInfoMsg(const PlayerPlugInfoMsg& from);

  inline PlayerPlugInfoMsg& operator=(const PlayerPlugInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlayerPlugInfoMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerPlugInfoMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerPlugInfoMsg* other);

  // implements Message ----------------------------------------------

  PlayerPlugInfoMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerPlugInfoMsg& from);
  void MergeFrom(const PlayerPlugInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string send_time = 4;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 4;
  inline const ::std::string& send_time() const;
  inline void set_send_time(const ::std::string& value);
  inline void set_send_time(const char* value);
  inline void set_send_time(const char* value, size_t size);
  inline ::std::string* mutable_send_time();
  inline ::std::string* release_send_time();
  inline void set_allocated_send_time(::std::string* send_time);

  // optional string ext = 5;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 5;
  inline const ::std::string& ext() const;
  inline void set_ext(const ::std::string& value);
  inline void set_ext(const char* value);
  inline void set_ext(const char* value, size_t size);
  inline ::std::string* mutable_ext();
  inline ::std::string* release_ext();
  inline void set_allocated_ext(::std::string* ext);

  // optional string sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.PlayerPlugInfoMsg)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_ext();
  inline void clear_has_ext();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::std::string* ip_;
  ::std::string* user_name_;
  ::std::string* send_time_;
  ::std::string* ext_;
  ::std::string* sign_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PlayerPlugInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PlayerPlugInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_PlayerPlugInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerPlugInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerPlugInfoMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerPlugInfoMsg

// optional string ip = 1;
inline bool PlayerPlugInfoMsg::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPlugInfoMsg::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPlugInfoMsg::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPlugInfoMsg::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PlayerPlugInfoMsg::ip() const {
  return *ip_;
}
inline void PlayerPlugInfoMsg::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PlayerPlugInfoMsg::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PlayerPlugInfoMsg::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerPlugInfoMsg::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PlayerPlugInfoMsg::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerPlugInfoMsg::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 user_id = 2;
inline bool PlayerPlugInfoMsg::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPlugInfoMsg::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPlugInfoMsg::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPlugInfoMsg::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PlayerPlugInfoMsg::user_id() const {
  return user_id_;
}
inline void PlayerPlugInfoMsg::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 3;
inline bool PlayerPlugInfoMsg::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerPlugInfoMsg::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerPlugInfoMsg::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerPlugInfoMsg::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlayerPlugInfoMsg::user_name() const {
  return *user_name_;
}
inline void PlayerPlugInfoMsg::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlayerPlugInfoMsg::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlayerPlugInfoMsg::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerPlugInfoMsg::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlayerPlugInfoMsg::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerPlugInfoMsg::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string send_time = 4;
inline bool PlayerPlugInfoMsg::has_send_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerPlugInfoMsg::set_has_send_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerPlugInfoMsg::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerPlugInfoMsg::clear_send_time() {
  if (send_time_ != &::google::protobuf::internal::kEmptyString) {
    send_time_->clear();
  }
  clear_has_send_time();
}
inline const ::std::string& PlayerPlugInfoMsg::send_time() const {
  return *send_time_;
}
inline void PlayerPlugInfoMsg::set_send_time(const ::std::string& value) {
  set_has_send_time();
  if (send_time_ == &::google::protobuf::internal::kEmptyString) {
    send_time_ = new ::std::string;
  }
  send_time_->assign(value);
}
inline void PlayerPlugInfoMsg::set_send_time(const char* value) {
  set_has_send_time();
  if (send_time_ == &::google::protobuf::internal::kEmptyString) {
    send_time_ = new ::std::string;
  }
  send_time_->assign(value);
}
inline void PlayerPlugInfoMsg::set_send_time(const char* value, size_t size) {
  set_has_send_time();
  if (send_time_ == &::google::protobuf::internal::kEmptyString) {
    send_time_ = new ::std::string;
  }
  send_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerPlugInfoMsg::mutable_send_time() {
  set_has_send_time();
  if (send_time_ == &::google::protobuf::internal::kEmptyString) {
    send_time_ = new ::std::string;
  }
  return send_time_;
}
inline ::std::string* PlayerPlugInfoMsg::release_send_time() {
  clear_has_send_time();
  if (send_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = send_time_;
    send_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerPlugInfoMsg::set_allocated_send_time(::std::string* send_time) {
  if (send_time_ != &::google::protobuf::internal::kEmptyString) {
    delete send_time_;
  }
  if (send_time) {
    set_has_send_time();
    send_time_ = send_time;
  } else {
    clear_has_send_time();
    send_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ext = 5;
inline bool PlayerPlugInfoMsg::has_ext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerPlugInfoMsg::set_has_ext() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerPlugInfoMsg::clear_has_ext() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerPlugInfoMsg::clear_ext() {
  if (ext_ != &::google::protobuf::internal::kEmptyString) {
    ext_->clear();
  }
  clear_has_ext();
}
inline const ::std::string& PlayerPlugInfoMsg::ext() const {
  return *ext_;
}
inline void PlayerPlugInfoMsg::set_ext(const ::std::string& value) {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::kEmptyString) {
    ext_ = new ::std::string;
  }
  ext_->assign(value);
}
inline void PlayerPlugInfoMsg::set_ext(const char* value) {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::kEmptyString) {
    ext_ = new ::std::string;
  }
  ext_->assign(value);
}
inline void PlayerPlugInfoMsg::set_ext(const char* value, size_t size) {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::kEmptyString) {
    ext_ = new ::std::string;
  }
  ext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerPlugInfoMsg::mutable_ext() {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::kEmptyString) {
    ext_ = new ::std::string;
  }
  return ext_;
}
inline ::std::string* PlayerPlugInfoMsg::release_ext() {
  clear_has_ext();
  if (ext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_;
    ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerPlugInfoMsg::set_allocated_ext(::std::string* ext) {
  if (ext_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_;
  }
  if (ext) {
    set_has_ext();
    ext_ = ext;
  } else {
    clear_has_ext();
    ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 6;
inline bool PlayerPlugInfoMsg::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerPlugInfoMsg::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerPlugInfoMsg::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerPlugInfoMsg::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& PlayerPlugInfoMsg::sign() const {
  return *sign_;
}
inline void PlayerPlugInfoMsg::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void PlayerPlugInfoMsg::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void PlayerPlugInfoMsg::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerPlugInfoMsg::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* PlayerPlugInfoMsg::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerPlugInfoMsg::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerPlugInfo_2eproto__INCLUDED
