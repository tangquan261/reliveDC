// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlessingMsg.proto

#ifndef PROTOBUF_BlessingMsg_2eproto__INCLUDED
#define PROTOBUF_BlessingMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BlessingMsg_2eproto();
void protobuf_AssignDesc_BlessingMsg_2eproto();
void protobuf_ShutdownFile_BlessingMsg_2eproto();

class BlessingMsg;

// ===================================================================

class BlessingMsg : public ::google::protobuf::MessageLite {
 public:
  BlessingMsg();
  virtual ~BlessingMsg();

  BlessingMsg(const BlessingMsg& from);

  inline BlessingMsg& operator=(const BlessingMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const BlessingMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BlessingMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BlessingMsg* other);

  // implements Message ----------------------------------------------

  BlessingMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BlessingMsg& from);
  void MergeFrom(const BlessingMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 increase = 1;
  inline bool has_increase() const;
  inline void clear_increase();
  static const int kIncreaseFieldNumber = 1;
  inline ::google::protobuf::int32 increase() const;
  inline void set_increase(::google::protobuf::int32 value);

  // optional int32 used_count = 2;
  inline bool has_used_count() const;
  inline void clear_used_count();
  static const int kUsedCountFieldNumber = 2;
  inline ::google::protobuf::int32 used_count() const;
  inline void set_used_count(::google::protobuf::int32 value);

  // optional int32 max_count = 3;
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 3;
  inline ::google::protobuf::int32 max_count() const;
  inline void set_max_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.BlessingMsg)
 private:
  inline void set_has_increase();
  inline void clear_has_increase();
  inline void set_has_used_count();
  inline void clear_has_used_count();
  inline void set_has_max_count();
  inline void clear_has_max_count();

  ::google::protobuf::int32 increase_;
  ::google::protobuf::int32 used_count_;
  ::google::protobuf::int32 max_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_BlessingMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_BlessingMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_BlessingMsg_2eproto();
  friend void protobuf_ShutdownFile_BlessingMsg_2eproto();

  void InitAsDefaultInstance();
  static BlessingMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// BlessingMsg

// optional int32 increase = 1;
inline bool BlessingMsg::has_increase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlessingMsg::set_has_increase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlessingMsg::clear_has_increase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlessingMsg::clear_increase() {
  increase_ = 0;
  clear_has_increase();
}
inline ::google::protobuf::int32 BlessingMsg::increase() const {
  return increase_;
}
inline void BlessingMsg::set_increase(::google::protobuf::int32 value) {
  set_has_increase();
  increase_ = value;
}

// optional int32 used_count = 2;
inline bool BlessingMsg::has_used_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlessingMsg::set_has_used_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlessingMsg::clear_has_used_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlessingMsg::clear_used_count() {
  used_count_ = 0;
  clear_has_used_count();
}
inline ::google::protobuf::int32 BlessingMsg::used_count() const {
  return used_count_;
}
inline void BlessingMsg::set_used_count(::google::protobuf::int32 value) {
  set_has_used_count();
  used_count_ = value;
}

// optional int32 max_count = 3;
inline bool BlessingMsg::has_max_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlessingMsg::set_has_max_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlessingMsg::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlessingMsg::clear_max_count() {
  max_count_ = 0;
  clear_has_max_count();
}
inline ::google::protobuf::int32 BlessingMsg::max_count() const {
  return max_count_;
}
inline void BlessingMsg::set_max_count(::google::protobuf::int32 value) {
  set_has_max_count();
  max_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BlessingMsg_2eproto__INCLUDED
