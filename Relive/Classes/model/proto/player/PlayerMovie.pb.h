// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerMovie.proto

#ifndef PROTOBUF_PlayerMovie_2eproto__INCLUDED
#define PROTOBUF_PlayerMovie_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerMovie_2eproto();
void protobuf_AssignDesc_PlayerMovie_2eproto();
void protobuf_ShutdownFile_PlayerMovie_2eproto();

class PlayerMovieMsg;

// ===================================================================

class PlayerMovieMsg : public ::google::protobuf::MessageLite {
 public:
  PlayerMovieMsg();
  virtual ~PlayerMovieMsg();

  PlayerMovieMsg(const PlayerMovieMsg& from);

  inline PlayerMovieMsg& operator=(const PlayerMovieMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlayerMovieMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerMovieMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerMovieMsg* other);

  // implements Message ----------------------------------------------

  PlayerMovieMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerMovieMsg& from);
  void MergeFrom(const PlayerMovieMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 movie_target_type = 1;
  inline bool has_movie_target_type() const;
  inline void clear_movie_target_type();
  static const int kMovieTargetTypeFieldNumber = 1;
  inline ::google::protobuf::int32 movie_target_type() const;
  inline void set_movie_target_type(::google::protobuf::int32 value);

  // optional int32 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::int32 target_id() const;
  inline void set_target_id(::google::protobuf::int32 value);

  // optional string movie_type = 3;
  inline bool has_movie_type() const;
  inline void clear_movie_type();
  static const int kMovieTypeFieldNumber = 3;
  inline const ::std::string& movie_type() const;
  inline void set_movie_type(const ::std::string& value);
  inline void set_movie_type(const char* value);
  inline void set_movie_type(const char* value, size_t size);
  inline ::std::string* mutable_movie_type();
  inline ::std::string* release_movie_type();
  inline void set_allocated_movie_type(::std::string* movie_type);

  // optional int32 delay = 4;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 4;
  inline ::google::protobuf::int32 delay() const;
  inline void set_delay(::google::protobuf::int32 value);

  // optional int32 map_id = 5;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 5;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.PlayerMovieMsg)
 private:
  inline void set_has_movie_target_type();
  inline void clear_has_movie_target_type();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_movie_type();
  inline void clear_has_movie_type();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_map_id();
  inline void clear_has_map_id();

  ::google::protobuf::int32 movie_target_type_;
  ::google::protobuf::int32 target_id_;
  ::std::string* movie_type_;
  ::google::protobuf::int32 delay_;
  ::google::protobuf::int32 map_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PlayerMovie_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PlayerMovie_2eproto();
  #endif
  friend void protobuf_AssignDesc_PlayerMovie_2eproto();
  friend void protobuf_ShutdownFile_PlayerMovie_2eproto();

  void InitAsDefaultInstance();
  static PlayerMovieMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerMovieMsg

// optional int32 movie_target_type = 1;
inline bool PlayerMovieMsg::has_movie_target_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMovieMsg::set_has_movie_target_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMovieMsg::clear_has_movie_target_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMovieMsg::clear_movie_target_type() {
  movie_target_type_ = 0;
  clear_has_movie_target_type();
}
inline ::google::protobuf::int32 PlayerMovieMsg::movie_target_type() const {
  return movie_target_type_;
}
inline void PlayerMovieMsg::set_movie_target_type(::google::protobuf::int32 value) {
  set_has_movie_target_type();
  movie_target_type_ = value;
}

// optional int32 target_id = 2;
inline bool PlayerMovieMsg::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMovieMsg::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMovieMsg::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMovieMsg::clear_target_id() {
  target_id_ = 0;
  clear_has_target_id();
}
inline ::google::protobuf::int32 PlayerMovieMsg::target_id() const {
  return target_id_;
}
inline void PlayerMovieMsg::set_target_id(::google::protobuf::int32 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional string movie_type = 3;
inline bool PlayerMovieMsg::has_movie_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMovieMsg::set_has_movie_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMovieMsg::clear_has_movie_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMovieMsg::clear_movie_type() {
  if (movie_type_ != &::google::protobuf::internal::kEmptyString) {
    movie_type_->clear();
  }
  clear_has_movie_type();
}
inline const ::std::string& PlayerMovieMsg::movie_type() const {
  return *movie_type_;
}
inline void PlayerMovieMsg::set_movie_type(const ::std::string& value) {
  set_has_movie_type();
  if (movie_type_ == &::google::protobuf::internal::kEmptyString) {
    movie_type_ = new ::std::string;
  }
  movie_type_->assign(value);
}
inline void PlayerMovieMsg::set_movie_type(const char* value) {
  set_has_movie_type();
  if (movie_type_ == &::google::protobuf::internal::kEmptyString) {
    movie_type_ = new ::std::string;
  }
  movie_type_->assign(value);
}
inline void PlayerMovieMsg::set_movie_type(const char* value, size_t size) {
  set_has_movie_type();
  if (movie_type_ == &::google::protobuf::internal::kEmptyString) {
    movie_type_ = new ::std::string;
  }
  movie_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMovieMsg::mutable_movie_type() {
  set_has_movie_type();
  if (movie_type_ == &::google::protobuf::internal::kEmptyString) {
    movie_type_ = new ::std::string;
  }
  return movie_type_;
}
inline ::std::string* PlayerMovieMsg::release_movie_type() {
  clear_has_movie_type();
  if (movie_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = movie_type_;
    movie_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMovieMsg::set_allocated_movie_type(::std::string* movie_type) {
  if (movie_type_ != &::google::protobuf::internal::kEmptyString) {
    delete movie_type_;
  }
  if (movie_type) {
    set_has_movie_type();
    movie_type_ = movie_type;
  } else {
    clear_has_movie_type();
    movie_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 delay = 4;
inline bool PlayerMovieMsg::has_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerMovieMsg::set_has_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerMovieMsg::clear_has_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerMovieMsg::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::google::protobuf::int32 PlayerMovieMsg::delay() const {
  return delay_;
}
inline void PlayerMovieMsg::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
}

// optional int32 map_id = 5;
inline bool PlayerMovieMsg::has_map_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerMovieMsg::set_has_map_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerMovieMsg::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerMovieMsg::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 PlayerMovieMsg::map_id() const {
  return map_id_;
}
inline void PlayerMovieMsg::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerMovie_2eproto__INCLUDED
