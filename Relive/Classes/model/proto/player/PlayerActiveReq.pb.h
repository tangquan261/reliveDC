// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerActiveReq.proto

#ifndef PROTOBUF_PlayerActiveReq_2eproto__INCLUDED
#define PROTOBUF_PlayerActiveReq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerActiveReq_2eproto();
void protobuf_AssignDesc_PlayerActiveReq_2eproto();
void protobuf_ShutdownFile_PlayerActiveReq_2eproto();

class PlayerActiveReqMsg;

// ===================================================================

class PlayerActiveReqMsg : public ::google::protobuf::MessageLite {
 public:
  PlayerActiveReqMsg();
  virtual ~PlayerActiveReqMsg();

  PlayerActiveReqMsg(const PlayerActiveReqMsg& from);

  inline PlayerActiveReqMsg& operator=(const PlayerActiveReqMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlayerActiveReqMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerActiveReqMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerActiveReqMsg* other);

  // implements Message ----------------------------------------------

  PlayerActiveReqMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerActiveReqMsg& from);
  void MergeFrom(const PlayerActiveReqMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string activeId = 2;
  inline bool has_activeid() const;
  inline void clear_activeid();
  static const int kActiveIdFieldNumber = 2;
  inline const ::std::string& activeid() const;
  inline void set_activeid(const ::std::string& value);
  inline void set_activeid(const char* value);
  inline void set_activeid(const char* value, size_t size);
  inline ::std::string* mutable_activeid();
  inline ::std::string* release_activeid();
  inline void set_allocated_activeid(::std::string* activeid);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.PlayerActiveReqMsg)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_activeid();
  inline void clear_has_activeid();

  ::std::string* key_;
  ::std::string* activeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PlayerActiveReq_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PlayerActiveReq_2eproto();
  #endif
  friend void protobuf_AssignDesc_PlayerActiveReq_2eproto();
  friend void protobuf_ShutdownFile_PlayerActiveReq_2eproto();

  void InitAsDefaultInstance();
  static PlayerActiveReqMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerActiveReqMsg

// optional string key = 1;
inline bool PlayerActiveReqMsg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerActiveReqMsg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerActiveReqMsg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerActiveReqMsg::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PlayerActiveReqMsg::key() const {
  return *key_;
}
inline void PlayerActiveReqMsg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PlayerActiveReqMsg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PlayerActiveReqMsg::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerActiveReqMsg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PlayerActiveReqMsg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerActiveReqMsg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string activeId = 2;
inline bool PlayerActiveReqMsg::has_activeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerActiveReqMsg::set_has_activeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerActiveReqMsg::clear_has_activeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerActiveReqMsg::clear_activeid() {
  if (activeid_ != &::google::protobuf::internal::kEmptyString) {
    activeid_->clear();
  }
  clear_has_activeid();
}
inline const ::std::string& PlayerActiveReqMsg::activeid() const {
  return *activeid_;
}
inline void PlayerActiveReqMsg::set_activeid(const ::std::string& value) {
  set_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    activeid_ = new ::std::string;
  }
  activeid_->assign(value);
}
inline void PlayerActiveReqMsg::set_activeid(const char* value) {
  set_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    activeid_ = new ::std::string;
  }
  activeid_->assign(value);
}
inline void PlayerActiveReqMsg::set_activeid(const char* value, size_t size) {
  set_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    activeid_ = new ::std::string;
  }
  activeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerActiveReqMsg::mutable_activeid() {
  set_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    activeid_ = new ::std::string;
  }
  return activeid_;
}
inline ::std::string* PlayerActiveReqMsg::release_activeid() {
  clear_has_activeid();
  if (activeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activeid_;
    activeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerActiveReqMsg::set_allocated_activeid(::std::string* activeid) {
  if (activeid_ != &::google::protobuf::internal::kEmptyString) {
    delete activeid_;
  }
  if (activeid) {
    set_has_activeid();
    activeid_ = activeid;
  } else {
    clear_has_activeid();
    activeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerActiveReq_2eproto__INCLUDED
