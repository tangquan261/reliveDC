// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KingContractBuyMsg.proto

#ifndef PROTOBUF_KingContractBuyMsg_2eproto__INCLUDED
#define PROTOBUF_KingContractBuyMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_KingContractBuyMsg_2eproto();
void protobuf_AssignDesc_KingContractBuyMsg_2eproto();
void protobuf_ShutdownFile_KingContractBuyMsg_2eproto();

class KingContractBuyMsg;

// ===================================================================

class KingContractBuyMsg : public ::google::protobuf::MessageLite {
 public:
  KingContractBuyMsg();
  virtual ~KingContractBuyMsg();

  KingContractBuyMsg(const KingContractBuyMsg& from);

  inline KingContractBuyMsg& operator=(const KingContractBuyMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const KingContractBuyMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const KingContractBuyMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(KingContractBuyMsg* other);

  // implements Message ----------------------------------------------

  KingContractBuyMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const KingContractBuyMsg& from);
  void MergeFrom(const KingContractBuyMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ids = 1;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 1;
  inline ::google::protobuf::int32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::int32 value);
  inline void add_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ids();

  // optional bool use = 2;
  inline bool has_use() const;
  inline void clear_use();
  static const int kUseFieldNumber = 2;
  inline bool use() const;
  inline void set_use(bool value);

  // optional int32 friendId = 3;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 3;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // optional string friendname = 4;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendnameFieldNumber = 4;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.KingContractBuyMsg)
 private:
  inline void set_has_use();
  inline void clear_has_use();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_friendname();
  inline void clear_has_friendname();

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ids_;
  bool use_;
  ::google::protobuf::int32 friendid_;
  ::std::string* friendname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_KingContractBuyMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_KingContractBuyMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_KingContractBuyMsg_2eproto();
  friend void protobuf_ShutdownFile_KingContractBuyMsg_2eproto();

  void InitAsDefaultInstance();
  static KingContractBuyMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// KingContractBuyMsg

// repeated int32 ids = 1;
inline int KingContractBuyMsg::ids_size() const {
  return ids_.size();
}
inline void KingContractBuyMsg::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int32 KingContractBuyMsg::ids(int index) const {
  return ids_.Get(index);
}
inline void KingContractBuyMsg::set_ids(int index, ::google::protobuf::int32 value) {
  ids_.Set(index, value);
}
inline void KingContractBuyMsg::add_ids(::google::protobuf::int32 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KingContractBuyMsg::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KingContractBuyMsg::mutable_ids() {
  return &ids_;
}

// optional bool use = 2;
inline bool KingContractBuyMsg::has_use() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KingContractBuyMsg::set_has_use() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KingContractBuyMsg::clear_has_use() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KingContractBuyMsg::clear_use() {
  use_ = false;
  clear_has_use();
}
inline bool KingContractBuyMsg::use() const {
  return use_;
}
inline void KingContractBuyMsg::set_use(bool value) {
  set_has_use();
  use_ = value;
}

// optional int32 friendId = 3;
inline bool KingContractBuyMsg::has_friendid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KingContractBuyMsg::set_has_friendid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KingContractBuyMsg::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KingContractBuyMsg::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 KingContractBuyMsg::friendid() const {
  return friendid_;
}
inline void KingContractBuyMsg::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
}

// optional string friendname = 4;
inline bool KingContractBuyMsg::has_friendname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KingContractBuyMsg::set_has_friendname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KingContractBuyMsg::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KingContractBuyMsg::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& KingContractBuyMsg::friendname() const {
  return *friendname_;
}
inline void KingContractBuyMsg::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void KingContractBuyMsg::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void KingContractBuyMsg::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KingContractBuyMsg::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* KingContractBuyMsg::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KingContractBuyMsg::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KingContractBuyMsg_2eproto__INCLUDED
