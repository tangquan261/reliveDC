// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SynchronizedTimeMsgProto.proto

#ifndef PROTOBUF_SynchronizedTimeMsgProto_2eproto__INCLUDED
#define PROTOBUF_SynchronizedTimeMsgProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SynchronizedTimeMsgProto_2eproto();
void protobuf_AssignDesc_SynchronizedTimeMsgProto_2eproto();
void protobuf_ShutdownFile_SynchronizedTimeMsgProto_2eproto();

class SynchronizedTimeMsg;

// ===================================================================

class SynchronizedTimeMsg : public ::google::protobuf::MessageLite {
 public:
  SynchronizedTimeMsg();
  virtual ~SynchronizedTimeMsg();

  SynchronizedTimeMsg(const SynchronizedTimeMsg& from);

  inline SynchronizedTimeMsg& operator=(const SynchronizedTimeMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const SynchronizedTimeMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SynchronizedTimeMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SynchronizedTimeMsg* other);

  // implements Message ----------------------------------------------

  SynchronizedTimeMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SynchronizedTimeMsg& from);
  void MergeFrom(const SynchronizedTimeMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sys_curtime = 1;
  inline bool has_sys_curtime() const;
  inline void clear_sys_curtime();
  static const int kSysCurtimeFieldNumber = 1;
  inline const ::std::string& sys_curtime() const;
  inline void set_sys_curtime(const ::std::string& value);
  inline void set_sys_curtime(const char* value);
  inline void set_sys_curtime(const char* value, size_t size);
  inline ::std::string* mutable_sys_curtime();
  inline ::std::string* release_sys_curtime();
  inline void set_allocated_sys_curtime(::std::string* sys_curtime);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.SynchronizedTimeMsg)
 private:
  inline void set_has_sys_curtime();
  inline void clear_has_sys_curtime();

  ::std::string* sys_curtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SynchronizedTimeMsgProto_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SynchronizedTimeMsgProto_2eproto();
  #endif
  friend void protobuf_AssignDesc_SynchronizedTimeMsgProto_2eproto();
  friend void protobuf_ShutdownFile_SynchronizedTimeMsgProto_2eproto();

  void InitAsDefaultInstance();
  static SynchronizedTimeMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// SynchronizedTimeMsg

// optional string sys_curtime = 1;
inline bool SynchronizedTimeMsg::has_sys_curtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchronizedTimeMsg::set_has_sys_curtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchronizedTimeMsg::clear_has_sys_curtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchronizedTimeMsg::clear_sys_curtime() {
  if (sys_curtime_ != &::google::protobuf::internal::kEmptyString) {
    sys_curtime_->clear();
  }
  clear_has_sys_curtime();
}
inline const ::std::string& SynchronizedTimeMsg::sys_curtime() const {
  return *sys_curtime_;
}
inline void SynchronizedTimeMsg::set_sys_curtime(const ::std::string& value) {
  set_has_sys_curtime();
  if (sys_curtime_ == &::google::protobuf::internal::kEmptyString) {
    sys_curtime_ = new ::std::string;
  }
  sys_curtime_->assign(value);
}
inline void SynchronizedTimeMsg::set_sys_curtime(const char* value) {
  set_has_sys_curtime();
  if (sys_curtime_ == &::google::protobuf::internal::kEmptyString) {
    sys_curtime_ = new ::std::string;
  }
  sys_curtime_->assign(value);
}
inline void SynchronizedTimeMsg::set_sys_curtime(const char* value, size_t size) {
  set_has_sys_curtime();
  if (sys_curtime_ == &::google::protobuf::internal::kEmptyString) {
    sys_curtime_ = new ::std::string;
  }
  sys_curtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SynchronizedTimeMsg::mutable_sys_curtime() {
  set_has_sys_curtime();
  if (sys_curtime_ == &::google::protobuf::internal::kEmptyString) {
    sys_curtime_ = new ::std::string;
  }
  return sys_curtime_;
}
inline ::std::string* SynchronizedTimeMsg::release_sys_curtime() {
  clear_has_sys_curtime();
  if (sys_curtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sys_curtime_;
    sys_curtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SynchronizedTimeMsg::set_allocated_sys_curtime(::std::string* sys_curtime) {
  if (sys_curtime_ != &::google::protobuf::internal::kEmptyString) {
    delete sys_curtime_;
  }
  if (sys_curtime) {
    set_has_sys_curtime();
    sys_curtime_ = sys_curtime;
  } else {
    clear_has_sys_curtime();
    sys_curtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SynchronizedTimeMsgProto_2eproto__INCLUDED
