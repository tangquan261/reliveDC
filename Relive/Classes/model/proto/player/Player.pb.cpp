// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

void protobuf_ShutdownFile_Player_2eproto() {
  delete PlayerMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Player_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Player_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::com::road::yishi::proto::player::protobuf_AddDesc_PlayerOrder_2eproto();
  PlayerMsg::default_instance_ = new PlayerMsg();
  PlayerMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Player_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Player_2eproto_once_);
void protobuf_AddDesc_Player_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Player_2eproto_once_,
                 &protobuf_AddDesc_Player_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Player_2eproto {
  StaticDescriptorInitializer_Player_2eproto() {
    protobuf_AddDesc_Player_2eproto();
  }
} static_descriptor_initializer_Player_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PlayerMsg::kPlayerIdFieldNumber;
const int PlayerMsg::kNickNameFieldNumber;
const int PlayerMsg::kSexFieldNumber;
const int PlayerMsg::kPicFieldNumber;
const int PlayerMsg::kCampFieldNumber;
const int PlayerMsg::kPointFieldNumber;
const int PlayerMsg::kGiftTokenFieldNumber;
const int PlayerMsg::kStateFieldNumber;
const int PlayerMsg::kLastAwardFieldNumber;
const int PlayerMsg::kQuestSiteLenFieldNumber;
const int PlayerMsg::kQuestSiteFieldNumber;
const int PlayerMsg::kConsortiaIdFieldNumber;
const int PlayerMsg::kConsortiaNameFieldNumber;
const int PlayerMsg::kClaimIdFieldNumber;
const int PlayerMsg::kClaimNameFieldNumber;
const int PlayerMsg::kGradesFieldNumber;
const int PlayerMsg::kGpFieldNumber;
const int PlayerMsg::kReputeFieldNumber;
const int PlayerMsg::kConsortiaOfferFieldNumber;
const int PlayerMsg::kStrategyFieldNumber;
const int PlayerMsg::kWearyFieldNumber;
const int PlayerMsg::kAttackLeftCountFieldNumber;
const int PlayerMsg::kNoviceProcessFieldNumber;
const int PlayerMsg::kConsortiaAttackFieldNumber;
const int PlayerMsg::kConsortiaDefenceFieldNumber;
const int PlayerMsg::kConsortiaAgilityFieldNumber;
const int PlayerMsg::kConsortiaAbilityFieldNumber;
const int PlayerMsg::kConsortiaCaptainFieldNumber;
const int PlayerMsg::kGpOrderFieldNumber;
const int PlayerMsg::kFightingCapacityFieldNumber;
const int PlayerMsg::kGradeProcessFieldNumber;
const int PlayerMsg::kTimeProcessFieldNumber;
const int PlayerMsg::kTimeGetFieldNumber;
const int PlayerMsg::kCampaignSiteFieldNumber;
const int PlayerMsg::kBagCountFieldNumber;
const int PlayerMsg::kMatchWinFieldNumber;
const int PlayerMsg::kMatchFailedFieldNumber;
const int PlayerMsg::kConsortiaGoldFieldNumber;
const int PlayerMsg::kConsortiaPhysiqueFieldNumber;
const int PlayerMsg::kRightFieldNumber;
const int PlayerMsg::kJobFieldNumber;
const int PlayerMsg::kLeedProcessFieldNumber;
const int PlayerMsg::kStarCountFieldNumber;
const int PlayerMsg::kSignDateFieldNumber;
const int PlayerMsg::kSignTimesFieldNumber;
const int PlayerMsg::kSignSiteFieldNumber;
const int PlayerMsg::kOrderFieldNumber;
const int PlayerMsg::kStartFreeFieldNumber;
const int PlayerMsg::kTotalGpFieldNumber;
const int PlayerMsg::kRefuseFriendFieldNumber;
const int PlayerMsg::kRefuseInviteFieldNumber;
const int PlayerMsg::kConsortiaTotalofferFieldNumber;
const int PlayerMsg::kShowVersionFieldNumber;
const int PlayerMsg::kCampaignCountFieldNumber;
const int PlayerMsg::kTimeRunFieldNumber;
const int PlayerMsg::kQteGuideFieldNumber;
const int PlayerMsg::kStarpointFieldNumber;
const int PlayerMsg::kIsAutoFieldNumber;
const int PlayerMsg::kLastOutConsortiaFieldNumber;
const int PlayerMsg::kGesteFieldNumber;
const int PlayerMsg::kStoreGradeFieldNumber;
const int PlayerMsg::kStoreGpFieldNumber;
const int PlayerMsg::kReloginProcessFieldNumber;
const int PlayerMsg::kReloginCountFieldNumber;
const int PlayerMsg::kBlessingCountFieldNumber;
const int PlayerMsg::kBlessingBuffFieldNumber;
const int PlayerMsg::kBlessingMaxCountFieldNumber;
const int PlayerMsg::kFirstChargeFieldNumber;
const int PlayerMsg::kCharmFieldNumber;
const int PlayerMsg::kMatchRoomCountFieldNumber;
const int PlayerMsg::kKingBuffFieldNumber;
const int PlayerMsg::kLeaveGpFieldNumber;
const int PlayerMsg::kAltarConsortiaIdFieldNumber;
const int PlayerMsg::kServerNameFieldNumber;
const int PlayerMsg::kRewardTimesFieldNumber;
const int PlayerMsg::kWarFieldCountFieldNumber;
const int PlayerMsg::kTrialCountFieldNumber;
const int PlayerMsg::kAppellIdFieldNumber;
const int PlayerMsg::kCrossScoreFieldNumber;
const int PlayerMsg::kTrialMaxCountFieldNumber;
const int PlayerMsg::kWearyLimitFieldNumber;
const int PlayerMsg::kLordsScoreFieldNumber;
const int PlayerMsg::kIsReceivedFieldNumber;
const int PlayerMsg::kMineScoreFieldNumber;
const int PlayerMsg::kIsBackPlayerFieldNumber;
const int PlayerMsg::kRefuseTeamInviteFieldNumber;
const int PlayerMsg::kCampaignMaxcountFieldNumber;
const int PlayerMsg::kSeniorStoreGradeFieldNumber;
const int PlayerMsg::kSeniorStoreGpFieldNumber;
const int PlayerMsg::kDragonCampaignCountFieldNumber;
const int PlayerMsg::kDragonCampaignMaxCountFieldNumber;
const int PlayerMsg::kCrossGuildScoreFieldNumber;
#endif  // !_MSC_VER

PlayerMsg::PlayerMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlayerMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  order_ = const_cast< ::com::road::yishi::proto::player::PlayerOrderMsg*>(
      ::com::road::yishi::proto::player::PlayerOrderMsg::internal_default_instance());
#else
  order_ = const_cast< ::com::road::yishi::proto::player::PlayerOrderMsg*>(&::com::road::yishi::proto::player::PlayerOrderMsg::default_instance());
#endif
}

PlayerMsg::PlayerMsg(const PlayerMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMsg::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  pic_ = 0;
  camp_ = 0;
  point_ = 0;
  gift_token_ = 0;
  state_ = 0;
  last_award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quest_site_len_ = 0;
  quest_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  consortia_id_ = 0;
  consortia_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  claim_id_ = 0;
  claim_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grades_ = 0;
  gp_ = 0;
  repute_ = 0;
  consortia_offer_ = 0;
  strategy_ = 0;
  weary_ = 0;
  attack_left_count_ = 0;
  novice_process_ = 0;
  consortia_attack_ = 0;
  consortia_defence_ = 0;
  consortia_agility_ = 0;
  consortia_ability_ = 0;
  consortia_captain_ = 0;
  gp_order_ = 0;
  fighting_capacity_ = 0;
  grade_process_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_process_ = 0;
  time_get_ = false;
  campaign_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bag_count_ = 0;
  match_win_ = 0;
  match_failed_ = 0;
  consortia_gold_ = 0;
  consortia_physique_ = 0;
  right_ = 0;
  job_ = 0;
  leed_process_ = 0;
  star_count_ = 0;
  signdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signtimes_ = 0;
  signsite_ = 0;
  order_ = NULL;
  startfree_ = 0;
  totalgp_ = GOOGLE_LONGLONG(0);
  refusefriend_ = false;
  refuseinvite_ = false;
  consortia_totaloffer_ = 0;
  show_version_ = false;
  campaign_count_ = 0;
  time_run_ = 0;
  qte_guide_ = 0;
  starpoint_ = 0;
  is_auto_ = false;
  lastoutconsortia_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geste_ = 0;
  storegrade_ = 0;
  storegp_ = 0;
  relogin_process_ = 0;
  relogin_count_ = 0;
  blessingcount_ = 0;
  blessingbuff_ = 0;
  blessingmaxcount_ = 0;
  first_charge_ = false;
  charm_ = 0;
  match_room_count_ = 0;
  king_buff_ = false;
  leave_gp_ = 0;
  altar_consortiaid_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reward_times_ = 0;
  war_field_count_ = 0;
  trial_count_ = 0;
  appell_id_ = 0;
  cross_score_ = 0;
  trial_max_count_ = 0;
  weary_limit_ = 0;
  lords_score_ = 0;
  is_received_ = false;
  mine_score_ = 0;
  is_back_player_ = false;
  refuseteaminvite_ = false;
  campaign_maxcount_ = 0;
  seniorstoregrade_ = 0;
  seniorstoregp_ = 0;
  dragoncampaign_count_ = 0;
  dragoncampaign_maxcount_ = 0;
  cross_guild_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMsg::~PlayerMsg() {
  SharedDtor();
}

void PlayerMsg::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (last_award_ != &::google::protobuf::internal::kEmptyString) {
    delete last_award_;
  }
  if (quest_site_ != &::google::protobuf::internal::kEmptyString) {
    delete quest_site_;
  }
  if (consortia_name_ != &::google::protobuf::internal::kEmptyString) {
    delete consortia_name_;
  }
  if (claim_name_ != &::google::protobuf::internal::kEmptyString) {
    delete claim_name_;
  }
  if (grade_process_ != &::google::protobuf::internal::kEmptyString) {
    delete grade_process_;
  }
  if (campaign_site_ != &::google::protobuf::internal::kEmptyString) {
    delete campaign_site_;
  }
  if (signdate_ != &::google::protobuf::internal::kEmptyString) {
    delete signdate_;
  }
  if (lastoutconsortia_ != &::google::protobuf::internal::kEmptyString) {
    delete lastoutconsortia_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete order_;
  }
}

void PlayerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerMsg& PlayerMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Player_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
#endif
  return *default_instance_;
}

PlayerMsg* PlayerMsg::default_instance_ = NULL;

PlayerMsg* PlayerMsg::New() const {
  return new PlayerMsg;
}

void PlayerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    sex_ = 0;
    pic_ = 0;
    camp_ = 0;
    point_ = 0;
    gift_token_ = 0;
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_last_award()) {
      if (last_award_ != &::google::protobuf::internal::kEmptyString) {
        last_award_->clear();
      }
    }
    quest_site_len_ = 0;
    if (has_quest_site()) {
      if (quest_site_ != &::google::protobuf::internal::kEmptyString) {
        quest_site_->clear();
      }
    }
    consortia_id_ = 0;
    if (has_consortia_name()) {
      if (consortia_name_ != &::google::protobuf::internal::kEmptyString) {
        consortia_name_->clear();
      }
    }
    claim_id_ = 0;
    if (has_claim_name()) {
      if (claim_name_ != &::google::protobuf::internal::kEmptyString) {
        claim_name_->clear();
      }
    }
    grades_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    gp_ = 0;
    repute_ = 0;
    consortia_offer_ = 0;
    strategy_ = 0;
    weary_ = 0;
    attack_left_count_ = 0;
    novice_process_ = 0;
    consortia_attack_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    consortia_defence_ = 0;
    consortia_agility_ = 0;
    consortia_ability_ = 0;
    consortia_captain_ = 0;
    gp_order_ = 0;
    fighting_capacity_ = 0;
    if (has_grade_process()) {
      if (grade_process_ != &::google::protobuf::internal::kEmptyString) {
        grade_process_->clear();
      }
    }
    time_process_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    time_get_ = false;
    if (has_campaign_site()) {
      if (campaign_site_ != &::google::protobuf::internal::kEmptyString) {
        campaign_site_->clear();
      }
    }
    bag_count_ = 0;
    match_win_ = 0;
    match_failed_ = 0;
    consortia_gold_ = 0;
    consortia_physique_ = 0;
    right_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    job_ = 0;
    leed_process_ = 0;
    star_count_ = 0;
    if (has_signdate()) {
      if (signdate_ != &::google::protobuf::internal::kEmptyString) {
        signdate_->clear();
      }
    }
    signtimes_ = 0;
    signsite_ = 0;
    if (has_order()) {
      if (order_ != NULL) order_->::com::road::yishi::proto::player::PlayerOrderMsg::Clear();
    }
    startfree_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    totalgp_ = GOOGLE_LONGLONG(0);
    refusefriend_ = false;
    refuseinvite_ = false;
    consortia_totaloffer_ = 0;
    show_version_ = false;
    campaign_count_ = 0;
    time_run_ = 0;
    qte_guide_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    starpoint_ = 0;
    is_auto_ = false;
    if (has_lastoutconsortia()) {
      if (lastoutconsortia_ != &::google::protobuf::internal::kEmptyString) {
        lastoutconsortia_->clear();
      }
    }
    geste_ = 0;
    storegrade_ = 0;
    storegp_ = 0;
    relogin_process_ = 0;
    relogin_count_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    blessingcount_ = 0;
    blessingbuff_ = 0;
    blessingmaxcount_ = 0;
    first_charge_ = false;
    charm_ = 0;
    match_room_count_ = 0;
    king_buff_ = false;
    leave_gp_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    altar_consortiaid_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    reward_times_ = 0;
    war_field_count_ = 0;
    trial_count_ = 0;
    appell_id_ = 0;
    cross_score_ = 0;
    trial_max_count_ = 0;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    weary_limit_ = 0;
    lords_score_ = 0;
    is_received_ = false;
    mine_score_ = 0;
    is_back_player_ = false;
    refuseteaminvite_ = false;
    campaign_maxcount_ = 0;
    seniorstoregrade_ = 0;
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    seniorstoregp_ = 0;
    dragoncampaign_count_ = 0;
    dragoncampaign_maxcount_ = 0;
    cross_guild_score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlayerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pic;
        break;
      }

      // optional int32 pic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_camp;
        break;
      }

      // optional int32 camp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_point;
        break;
      }

      // optional int32 point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gift_token;
        break;
      }

      // optional int32 gift_token = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_token_)));
          set_has_gift_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional int32 state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_last_award;
        break;
      }

      // optional string last_award = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_quest_site_len;
        break;
      }

      // optional int32 quest_site_len = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_site_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_site_len_)));
          set_has_quest_site_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_quest_site;
        break;
      }

      // optional bytes quest_site = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quest_site()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_consortia_id;
        break;
      }

      // optional int32 consortia_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_id_)));
          set_has_consortia_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_consortia_name;
        break;
      }

      // optional string consortia_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consortia_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consortia_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_claim_id;
        break;
      }

      // optional int32 claim_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_claim_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &claim_id_)));
          set_has_claim_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_claim_name;
        break;
      }

      // optional string claim_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_claim_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_claim_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_grades;
        break;
      }

      // optional int32 grades = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grades_)));
          set_has_grades();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_gp;
        break;
      }

      // optional int32 gp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gp_)));
          set_has_gp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_repute;
        break;
      }

      // optional int32 repute = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repute_)));
          set_has_repute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_consortia_offer;
        break;
      }

      // optional int32 consortia_offer = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_offer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_offer_)));
          set_has_consortia_offer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_strategy;
        break;
      }

      // optional int32 strategy = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strategy_)));
          set_has_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_weary;
        break;
      }

      // optional int32 weary = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weary_)));
          set_has_weary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_attack_left_count;
        break;
      }

      // optional int32 attack_left_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_left_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_left_count_)));
          set_has_attack_left_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_novice_process;
        break;
      }

      // optional int32 novice_process = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_novice_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &novice_process_)));
          set_has_novice_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_consortia_attack;
        break;
      }

      // optional int32 consortia_attack = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_attack_)));
          set_has_consortia_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_consortia_defence;
        break;
      }

      // optional int32 consortia_defence = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_defence_)));
          set_has_consortia_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_consortia_agility;
        break;
      }

      // optional int32 consortia_agility = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_agility_)));
          set_has_consortia_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_consortia_ability;
        break;
      }

      // optional int32 consortia_ability = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_ability_)));
          set_has_consortia_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_consortia_captain;
        break;
      }

      // optional int32 consortia_captain = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_captain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_captain_)));
          set_has_consortia_captain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_gp_order;
        break;
      }

      // optional int32 gp_order = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gp_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gp_order_)));
          set_has_gp_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fighting_capacity;
        break;
      }

      // optional int32 fighting_capacity = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_capacity_)));
          set_has_fighting_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_grade_process;
        break;
      }

      // optional string grade_process = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grade_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grade_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_time_process;
        break;
      }

      // optional int32 time_process = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_process_)));
          set_has_time_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_time_get;
        break;
      }

      // optional bool time_get = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &time_get_)));
          set_has_time_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_campaign_site;
        break;
      }

      // optional string campaign_site = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campaign_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_campaign_site()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_bag_count;
        break;
      }

      // optional int32 bag_count = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_count_)));
          set_has_bag_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_match_win;
        break;
      }

      // optional int32 match_win = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_win_)));
          set_has_match_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_match_failed;
        break;
      }

      // optional int32 match_failed = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_failed_)));
          set_has_match_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_consortia_gold;
        break;
      }

      // optional int32 consortia_gold = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_gold_)));
          set_has_consortia_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_consortia_physique;
        break;
      }

      // optional int32 consortia_physique = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_physique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_physique_)));
          set_has_consortia_physique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_right;
        break;
      }

      // optional int32 right = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_job;
        break;
      }

      // optional int32 job = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_leed_process;
        break;
      }

      // optional int32 leed_process = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leed_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leed_process_)));
          set_has_leed_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_star_count;
        break;
      }

      // optional int32 star_count = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_count_)));
          set_has_star_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_signDate;
        break;
      }

      // optional string signDate = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_signTimes;
        break;
      }

      // optional int32 signTimes = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signtimes_)));
          set_has_signtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_signSite;
        break;
      }

      // optional int32 signSite = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signSite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signsite_)));
          set_has_signsite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_order;
        break;
      }

      // optional .com.road.yishi.proto.player.PlayerOrderMsg order = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_startFree;
        break;
      }

      // optional int32 startFree = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startFree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startfree_)));
          set_has_startfree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_totalGp;
        break;
      }

      // optional int64 totalGp = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalGp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalgp_)));
          set_has_totalgp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_refuseFriend;
        break;
      }

      // optional bool refuseFriend = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refuseFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refusefriend_)));
          set_has_refusefriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_refuseInvite;
        break;
      }

      // optional bool refuseInvite = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refuseInvite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refuseinvite_)));
          set_has_refuseinvite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_consortia_totaloffer;
        break;
      }

      // optional int32 consortia_totaloffer = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consortia_totaloffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consortia_totaloffer_)));
          set_has_consortia_totaloffer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_show_version;
        break;
      }

      // optional bool show_version = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_version_)));
          set_has_show_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_campaign_count;
        break;
      }

      // optional int32 campaign_count = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campaign_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campaign_count_)));
          set_has_campaign_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_time_run;
        break;
      }

      // optional int32 time_run = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_run_)));
          set_has_time_run();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_qte_guide;
        break;
      }

      // optional int32 qte_guide = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qte_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qte_guide_)));
          set_has_qte_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_starpoint;
        break;
      }

      // optional int32 starpoint = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starpoint_)));
          set_has_starpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_is_auto;
        break;
      }

      // optional bool is_auto = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_)));
          set_has_is_auto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_lastOutConsortia;
        break;
      }

      // optional string lastOutConsortia = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastOutConsortia:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastoutconsortia()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_geste;
        break;
      }

      // optional int32 geste = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_geste:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geste_)));
          set_has_geste();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_storeGrade;
        break;
      }

      // optional int32 storeGrade = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storeGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storegrade_)));
          set_has_storegrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_storeGp;
        break;
      }

      // optional int32 storeGp = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storeGp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storegp_)));
          set_has_storegp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_relogin_process;
        break;
      }

      // optional int32 relogin_process = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relogin_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relogin_process_)));
          set_has_relogin_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_relogin_count;
        break;
      }

      // optional int32 relogin_count = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relogin_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relogin_count_)));
          set_has_relogin_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_blessingCount;
        break;
      }

      // optional int32 blessingCount = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessingCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessingcount_)));
          set_has_blessingcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_blessingBuff;
        break;
      }

      // optional int32 blessingBuff = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessingBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessingbuff_)));
          set_has_blessingbuff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_blessingMaxCount;
        break;
      }

      // optional int32 blessingMaxCount = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessingMaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessingmaxcount_)));
          set_has_blessingmaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_first_charge;
        break;
      }

      // optional bool first_charge = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_charge_)));
          set_has_first_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_charm;
        break;
      }

      // optional int32 charm = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_match_room_count;
        break;
      }

      // optional int32 match_room_count = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_room_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_room_count_)));
          set_has_match_room_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_king_buff;
        break;
      }

      // optional bool king_buff = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &king_buff_)));
          set_has_king_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_leave_gp;
        break;
      }

      // optional int32 leave_gp = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_gp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_gp_)));
          set_has_leave_gp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_altar_consortiaId;
        break;
      }

      // optional int32 altar_consortiaId = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_altar_consortiaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &altar_consortiaid_)));
          set_has_altar_consortiaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_server_name;
        break;
      }

      // optional string server_name = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_reward_times;
        break;
      }

      // optional int32 reward_times = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_times_)));
          set_has_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_war_field_count;
        break;
      }

      // optional int32 war_field_count = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_war_field_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &war_field_count_)));
          set_has_war_field_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_trial_count;
        break;
      }

      // optional int32 trial_count = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trial_count_)));
          set_has_trial_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_appell_id;
        break;
      }

      // optional int32 appell_id = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appell_id_)));
          set_has_appell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_cross_score;
        break;
      }

      // optional int32 cross_score = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cross_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_score_)));
          set_has_cross_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_trial_max_count;
        break;
      }

      // optional int32 trial_max_count = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trial_max_count_)));
          set_has_trial_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_weary_limit;
        break;
      }

      // optional int32 weary_limit = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weary_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weary_limit_)));
          set_has_weary_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_lords_score;
        break;
      }

      // optional int32 lords_score = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lords_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lords_score_)));
          set_has_lords_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_is_received;
        break;
      }

      // optional bool is_received = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_received_)));
          set_has_is_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_mine_score;
        break;
      }

      // optional int32 mine_score = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mine_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mine_score_)));
          set_has_mine_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_is_back_player;
        break;
      }

      // optional bool is_back_player = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_back_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_back_player_)));
          set_has_is_back_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_refuseTeamInvite;
        break;
      }

      // optional bool refuseTeamInvite = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refuseTeamInvite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refuseteaminvite_)));
          set_has_refuseteaminvite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(696)) goto parse_campaign_maxcount;
        break;
      }

      // optional int32 campaign_maxcount = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campaign_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campaign_maxcount_)));
          set_has_campaign_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_seniorStoreGrade;
        break;
      }

      // optional int32 seniorStoreGrade = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seniorStoreGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seniorstoregrade_)));
          set_has_seniorstoregrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(712)) goto parse_seniorStoreGp;
        break;
      }

      // optional int32 seniorStoreGp = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seniorStoreGp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seniorstoregp_)));
          set_has_seniorstoregp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_dragonCampaign_Count;
        break;
      }

      // optional int32 dragonCampaign_Count = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dragonCampaign_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dragoncampaign_count_)));
          set_has_dragoncampaign_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(728)) goto parse_dragonCampaign_MaxCount;
        break;
      }

      // optional int32 dragonCampaign_MaxCount = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dragonCampaign_MaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dragoncampaign_maxcount_)));
          set_has_dragoncampaign_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_cross_guild_score;
        break;
      }

      // optional int32 cross_guild_score = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cross_guild_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_guild_score_)));
          set_has_cross_guild_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // optional int32 pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pic(), output);
  }

  // optional int32 camp = 5;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->camp(), output);
  }

  // optional int32 point = 6;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->point(), output);
  }

  // optional int32 gift_token = 7;
  if (has_gift_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gift_token(), output);
  }

  // optional int32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->state(), output);
  }

  // optional string last_award = 9;
  if (has_last_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->last_award(), output);
  }

  // optional int32 quest_site_len = 10;
  if (has_quest_site_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quest_site_len(), output);
  }

  // optional bytes quest_site = 11;
  if (has_quest_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->quest_site(), output);
  }

  // optional int32 consortia_id = 12;
  if (has_consortia_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->consortia_id(), output);
  }

  // optional string consortia_name = 13;
  if (has_consortia_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->consortia_name(), output);
  }

  // optional int32 claim_id = 14;
  if (has_claim_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->claim_id(), output);
  }

  // optional string claim_name = 15;
  if (has_claim_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->claim_name(), output);
  }

  // optional int32 grades = 16;
  if (has_grades()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->grades(), output);
  }

  // optional int32 gp = 17;
  if (has_gp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->gp(), output);
  }

  // optional int32 repute = 18;
  if (has_repute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->repute(), output);
  }

  // optional int32 consortia_offer = 19;
  if (has_consortia_offer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->consortia_offer(), output);
  }

  // optional int32 strategy = 20;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->strategy(), output);
  }

  // optional int32 weary = 21;
  if (has_weary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->weary(), output);
  }

  // optional int32 attack_left_count = 22;
  if (has_attack_left_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->attack_left_count(), output);
  }

  // optional int32 novice_process = 23;
  if (has_novice_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->novice_process(), output);
  }

  // optional int32 consortia_attack = 24;
  if (has_consortia_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->consortia_attack(), output);
  }

  // optional int32 consortia_defence = 25;
  if (has_consortia_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->consortia_defence(), output);
  }

  // optional int32 consortia_agility = 26;
  if (has_consortia_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->consortia_agility(), output);
  }

  // optional int32 consortia_ability = 27;
  if (has_consortia_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->consortia_ability(), output);
  }

  // optional int32 consortia_captain = 28;
  if (has_consortia_captain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->consortia_captain(), output);
  }

  // optional int32 gp_order = 29;
  if (has_gp_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->gp_order(), output);
  }

  // optional int32 fighting_capacity = 30;
  if (has_fighting_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->fighting_capacity(), output);
  }

  // optional string grade_process = 31;
  if (has_grade_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->grade_process(), output);
  }

  // optional int32 time_process = 32;
  if (has_time_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->time_process(), output);
  }

  // optional bool time_get = 33;
  if (has_time_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->time_get(), output);
  }

  // optional string campaign_site = 34;
  if (has_campaign_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->campaign_site(), output);
  }

  // optional int32 bag_count = 35;
  if (has_bag_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->bag_count(), output);
  }

  // optional int32 match_win = 36;
  if (has_match_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->match_win(), output);
  }

  // optional int32 match_failed = 37;
  if (has_match_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->match_failed(), output);
  }

  // optional int32 consortia_gold = 38;
  if (has_consortia_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->consortia_gold(), output);
  }

  // optional int32 consortia_physique = 39;
  if (has_consortia_physique()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->consortia_physique(), output);
  }

  // optional int32 right = 40;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->right(), output);
  }

  // optional int32 job = 41;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->job(), output);
  }

  // optional int32 leed_process = 42;
  if (has_leed_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->leed_process(), output);
  }

  // optional int32 star_count = 43;
  if (has_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->star_count(), output);
  }

  // optional string signDate = 44;
  if (has_signdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->signdate(), output);
  }

  // optional int32 signTimes = 45;
  if (has_signtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->signtimes(), output);
  }

  // optional int32 signSite = 46;
  if (has_signsite()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->signsite(), output);
  }

  // optional .com.road.yishi.proto.player.PlayerOrderMsg order = 47;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->order(), output);
  }

  // optional int32 startFree = 48;
  if (has_startfree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->startfree(), output);
  }

  // optional int64 totalGp = 49;
  if (has_totalgp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->totalgp(), output);
  }

  // optional bool refuseFriend = 50;
  if (has_refusefriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->refusefriend(), output);
  }

  // optional bool refuseInvite = 51;
  if (has_refuseinvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->refuseinvite(), output);
  }

  // optional int32 consortia_totaloffer = 52;
  if (has_consortia_totaloffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->consortia_totaloffer(), output);
  }

  // optional bool show_version = 53;
  if (has_show_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->show_version(), output);
  }

  // optional int32 campaign_count = 54;
  if (has_campaign_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->campaign_count(), output);
  }

  // optional int32 time_run = 55;
  if (has_time_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->time_run(), output);
  }

  // optional int32 qte_guide = 56;
  if (has_qte_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->qte_guide(), output);
  }

  // optional int32 starpoint = 57;
  if (has_starpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->starpoint(), output);
  }

  // optional bool is_auto = 58;
  if (has_is_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->is_auto(), output);
  }

  // optional string lastOutConsortia = 59;
  if (has_lastoutconsortia()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      59, this->lastoutconsortia(), output);
  }

  // optional int32 geste = 60;
  if (has_geste()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->geste(), output);
  }

  // optional int32 storeGrade = 61;
  if (has_storegrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->storegrade(), output);
  }

  // optional int32 storeGp = 62;
  if (has_storegp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->storegp(), output);
  }

  // optional int32 relogin_process = 63;
  if (has_relogin_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->relogin_process(), output);
  }

  // optional int32 relogin_count = 64;
  if (has_relogin_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->relogin_count(), output);
  }

  // optional int32 blessingCount = 65;
  if (has_blessingcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->blessingcount(), output);
  }

  // optional int32 blessingBuff = 66;
  if (has_blessingbuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->blessingbuff(), output);
  }

  // optional int32 blessingMaxCount = 67;
  if (has_blessingmaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->blessingmaxcount(), output);
  }

  // optional bool first_charge = 68;
  if (has_first_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->first_charge(), output);
  }

  // optional int32 charm = 69;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->charm(), output);
  }

  // optional int32 match_room_count = 70;
  if (has_match_room_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->match_room_count(), output);
  }

  // optional bool king_buff = 71;
  if (has_king_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->king_buff(), output);
  }

  // optional int32 leave_gp = 72;
  if (has_leave_gp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->leave_gp(), output);
  }

  // optional int32 altar_consortiaId = 73;
  if (has_altar_consortiaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->altar_consortiaid(), output);
  }

  // optional string server_name = 74;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      74, this->server_name(), output);
  }

  // optional int32 reward_times = 75;
  if (has_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->reward_times(), output);
  }

  // optional int32 war_field_count = 76;
  if (has_war_field_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->war_field_count(), output);
  }

  // optional int32 trial_count = 77;
  if (has_trial_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->trial_count(), output);
  }

  // optional int32 appell_id = 78;
  if (has_appell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->appell_id(), output);
  }

  // optional int32 cross_score = 79;
  if (has_cross_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->cross_score(), output);
  }

  // optional int32 trial_max_count = 80;
  if (has_trial_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->trial_max_count(), output);
  }

  // optional int32 weary_limit = 81;
  if (has_weary_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(81, this->weary_limit(), output);
  }

  // optional int32 lords_score = 82;
  if (has_lords_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->lords_score(), output);
  }

  // optional bool is_received = 83;
  if (has_is_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->is_received(), output);
  }

  // optional int32 mine_score = 84;
  if (has_mine_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(84, this->mine_score(), output);
  }

  // optional bool is_back_player = 85;
  if (has_is_back_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->is_back_player(), output);
  }

  // optional bool refuseTeamInvite = 86;
  if (has_refuseteaminvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->refuseteaminvite(), output);
  }

  // optional int32 campaign_maxcount = 87;
  if (has_campaign_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(87, this->campaign_maxcount(), output);
  }

  // optional int32 seniorStoreGrade = 88;
  if (has_seniorstoregrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(88, this->seniorstoregrade(), output);
  }

  // optional int32 seniorStoreGp = 89;
  if (has_seniorstoregp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(89, this->seniorstoregp(), output);
  }

  // optional int32 dragonCampaign_Count = 90;
  if (has_dragoncampaign_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->dragoncampaign_count(), output);
  }

  // optional int32 dragonCampaign_MaxCount = 91;
  if (has_dragoncampaign_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(91, this->dragoncampaign_maxcount(), output);
  }

  // optional int32 cross_guild_score = 92;
  if (has_cross_guild_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(92, this->cross_guild_score(), output);
  }

}

int PlayerMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 pic = 4;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }

    // optional int32 camp = 5;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 point = 6;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional int32 gift_token = 7;
    if (has_gift_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_token());
    }

    // optional int32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string last_award = 9;
    if (has_last_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_award());
    }

    // optional int32 quest_site_len = 10;
    if (has_quest_site_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_site_len());
    }

    // optional bytes quest_site = 11;
    if (has_quest_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quest_site());
    }

    // optional int32 consortia_id = 12;
    if (has_consortia_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_id());
    }

    // optional string consortia_name = 13;
    if (has_consortia_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->consortia_name());
    }

    // optional int32 claim_id = 14;
    if (has_claim_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->claim_id());
    }

    // optional string claim_name = 15;
    if (has_claim_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->claim_name());
    }

    // optional int32 grades = 16;
    if (has_grades()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grades());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 gp = 17;
    if (has_gp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gp());
    }

    // optional int32 repute = 18;
    if (has_repute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repute());
    }

    // optional int32 consortia_offer = 19;
    if (has_consortia_offer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_offer());
    }

    // optional int32 strategy = 20;
    if (has_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strategy());
    }

    // optional int32 weary = 21;
    if (has_weary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weary());
    }

    // optional int32 attack_left_count = 22;
    if (has_attack_left_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_left_count());
    }

    // optional int32 novice_process = 23;
    if (has_novice_process()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->novice_process());
    }

    // optional int32 consortia_attack = 24;
    if (has_consortia_attack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_attack());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 consortia_defence = 25;
    if (has_consortia_defence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_defence());
    }

    // optional int32 consortia_agility = 26;
    if (has_consortia_agility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_agility());
    }

    // optional int32 consortia_ability = 27;
    if (has_consortia_ability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_ability());
    }

    // optional int32 consortia_captain = 28;
    if (has_consortia_captain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_captain());
    }

    // optional int32 gp_order = 29;
    if (has_gp_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gp_order());
    }

    // optional int32 fighting_capacity = 30;
    if (has_fighting_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting_capacity());
    }

    // optional string grade_process = 31;
    if (has_grade_process()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grade_process());
    }

    // optional int32 time_process = 32;
    if (has_time_process()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_process());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool time_get = 33;
    if (has_time_get()) {
      total_size += 2 + 1;
    }

    // optional string campaign_site = 34;
    if (has_campaign_site()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->campaign_site());
    }

    // optional int32 bag_count = 35;
    if (has_bag_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_count());
    }

    // optional int32 match_win = 36;
    if (has_match_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_win());
    }

    // optional int32 match_failed = 37;
    if (has_match_failed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_failed());
    }

    // optional int32 consortia_gold = 38;
    if (has_consortia_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_gold());
    }

    // optional int32 consortia_physique = 39;
    if (has_consortia_physique()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_physique());
    }

    // optional int32 right = 40;
    if (has_right()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 job = 41;
    if (has_job()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional int32 leed_process = 42;
    if (has_leed_process()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leed_process());
    }

    // optional int32 star_count = 43;
    if (has_star_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_count());
    }

    // optional string signDate = 44;
    if (has_signdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signdate());
    }

    // optional int32 signTimes = 45;
    if (has_signtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signtimes());
    }

    // optional int32 signSite = 46;
    if (has_signsite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signsite());
    }

    // optional .com.road.yishi.proto.player.PlayerOrderMsg order = 47;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }

    // optional int32 startFree = 48;
    if (has_startfree()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startfree());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int64 totalGp = 49;
    if (has_totalgp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalgp());
    }

    // optional bool refuseFriend = 50;
    if (has_refusefriend()) {
      total_size += 2 + 1;
    }

    // optional bool refuseInvite = 51;
    if (has_refuseinvite()) {
      total_size += 2 + 1;
    }

    // optional int32 consortia_totaloffer = 52;
    if (has_consortia_totaloffer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consortia_totaloffer());
    }

    // optional bool show_version = 53;
    if (has_show_version()) {
      total_size += 2 + 1;
    }

    // optional int32 campaign_count = 54;
    if (has_campaign_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campaign_count());
    }

    // optional int32 time_run = 55;
    if (has_time_run()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_run());
    }

    // optional int32 qte_guide = 56;
    if (has_qte_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qte_guide());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 starpoint = 57;
    if (has_starpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starpoint());
    }

    // optional bool is_auto = 58;
    if (has_is_auto()) {
      total_size += 2 + 1;
    }

    // optional string lastOutConsortia = 59;
    if (has_lastoutconsortia()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastoutconsortia());
    }

    // optional int32 geste = 60;
    if (has_geste()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->geste());
    }

    // optional int32 storeGrade = 61;
    if (has_storegrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storegrade());
    }

    // optional int32 storeGp = 62;
    if (has_storegp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storegp());
    }

    // optional int32 relogin_process = 63;
    if (has_relogin_process()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relogin_process());
    }

    // optional int32 relogin_count = 64;
    if (has_relogin_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relogin_count());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 blessingCount = 65;
    if (has_blessingcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessingcount());
    }

    // optional int32 blessingBuff = 66;
    if (has_blessingbuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessingbuff());
    }

    // optional int32 blessingMaxCount = 67;
    if (has_blessingmaxcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessingmaxcount());
    }

    // optional bool first_charge = 68;
    if (has_first_charge()) {
      total_size += 2 + 1;
    }

    // optional int32 charm = 69;
    if (has_charm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charm());
    }

    // optional int32 match_room_count = 70;
    if (has_match_room_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_room_count());
    }

    // optional bool king_buff = 71;
    if (has_king_buff()) {
      total_size += 2 + 1;
    }

    // optional int32 leave_gp = 72;
    if (has_leave_gp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_gp());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 altar_consortiaId = 73;
    if (has_altar_consortiaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->altar_consortiaid());
    }

    // optional string server_name = 74;
    if (has_server_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional int32 reward_times = 75;
    if (has_reward_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_times());
    }

    // optional int32 war_field_count = 76;
    if (has_war_field_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->war_field_count());
    }

    // optional int32 trial_count = 77;
    if (has_trial_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trial_count());
    }

    // optional int32 appell_id = 78;
    if (has_appell_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appell_id());
    }

    // optional int32 cross_score = 79;
    if (has_cross_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cross_score());
    }

    // optional int32 trial_max_count = 80;
    if (has_trial_max_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trial_max_count());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional int32 weary_limit = 81;
    if (has_weary_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weary_limit());
    }

    // optional int32 lords_score = 82;
    if (has_lords_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lords_score());
    }

    // optional bool is_received = 83;
    if (has_is_received()) {
      total_size += 2 + 1;
    }

    // optional int32 mine_score = 84;
    if (has_mine_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mine_score());
    }

    // optional bool is_back_player = 85;
    if (has_is_back_player()) {
      total_size += 2 + 1;
    }

    // optional bool refuseTeamInvite = 86;
    if (has_refuseteaminvite()) {
      total_size += 2 + 1;
    }

    // optional int32 campaign_maxcount = 87;
    if (has_campaign_maxcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campaign_maxcount());
    }

    // optional int32 seniorStoreGrade = 88;
    if (has_seniorstoregrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seniorstoregrade());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional int32 seniorStoreGp = 89;
    if (has_seniorstoregp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seniorstoregp());
    }

    // optional int32 dragonCampaign_Count = 90;
    if (has_dragoncampaign_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dragoncampaign_count());
    }

    // optional int32 dragonCampaign_MaxCount = 91;
    if (has_dragoncampaign_maxcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dragoncampaign_maxcount());
    }

    // optional int32 cross_guild_score = 92;
    if (has_cross_guild_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cross_guild_score());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerMsg*>(&from));
}

void PlayerMsg::MergeFrom(const PlayerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_gift_token()) {
      set_gift_token(from.gift_token());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_award()) {
      set_last_award(from.last_award());
    }
    if (from.has_quest_site_len()) {
      set_quest_site_len(from.quest_site_len());
    }
    if (from.has_quest_site()) {
      set_quest_site(from.quest_site());
    }
    if (from.has_consortia_id()) {
      set_consortia_id(from.consortia_id());
    }
    if (from.has_consortia_name()) {
      set_consortia_name(from.consortia_name());
    }
    if (from.has_claim_id()) {
      set_claim_id(from.claim_id());
    }
    if (from.has_claim_name()) {
      set_claim_name(from.claim_name());
    }
    if (from.has_grades()) {
      set_grades(from.grades());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gp()) {
      set_gp(from.gp());
    }
    if (from.has_repute()) {
      set_repute(from.repute());
    }
    if (from.has_consortia_offer()) {
      set_consortia_offer(from.consortia_offer());
    }
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
    if (from.has_weary()) {
      set_weary(from.weary());
    }
    if (from.has_attack_left_count()) {
      set_attack_left_count(from.attack_left_count());
    }
    if (from.has_novice_process()) {
      set_novice_process(from.novice_process());
    }
    if (from.has_consortia_attack()) {
      set_consortia_attack(from.consortia_attack());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_consortia_defence()) {
      set_consortia_defence(from.consortia_defence());
    }
    if (from.has_consortia_agility()) {
      set_consortia_agility(from.consortia_agility());
    }
    if (from.has_consortia_ability()) {
      set_consortia_ability(from.consortia_ability());
    }
    if (from.has_consortia_captain()) {
      set_consortia_captain(from.consortia_captain());
    }
    if (from.has_gp_order()) {
      set_gp_order(from.gp_order());
    }
    if (from.has_fighting_capacity()) {
      set_fighting_capacity(from.fighting_capacity());
    }
    if (from.has_grade_process()) {
      set_grade_process(from.grade_process());
    }
    if (from.has_time_process()) {
      set_time_process(from.time_process());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_time_get()) {
      set_time_get(from.time_get());
    }
    if (from.has_campaign_site()) {
      set_campaign_site(from.campaign_site());
    }
    if (from.has_bag_count()) {
      set_bag_count(from.bag_count());
    }
    if (from.has_match_win()) {
      set_match_win(from.match_win());
    }
    if (from.has_match_failed()) {
      set_match_failed(from.match_failed());
    }
    if (from.has_consortia_gold()) {
      set_consortia_gold(from.consortia_gold());
    }
    if (from.has_consortia_physique()) {
      set_consortia_physique(from.consortia_physique());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_leed_process()) {
      set_leed_process(from.leed_process());
    }
    if (from.has_star_count()) {
      set_star_count(from.star_count());
    }
    if (from.has_signdate()) {
      set_signdate(from.signdate());
    }
    if (from.has_signtimes()) {
      set_signtimes(from.signtimes());
    }
    if (from.has_signsite()) {
      set_signsite(from.signsite());
    }
    if (from.has_order()) {
      mutable_order()->::com::road::yishi::proto::player::PlayerOrderMsg::MergeFrom(from.order());
    }
    if (from.has_startfree()) {
      set_startfree(from.startfree());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_totalgp()) {
      set_totalgp(from.totalgp());
    }
    if (from.has_refusefriend()) {
      set_refusefriend(from.refusefriend());
    }
    if (from.has_refuseinvite()) {
      set_refuseinvite(from.refuseinvite());
    }
    if (from.has_consortia_totaloffer()) {
      set_consortia_totaloffer(from.consortia_totaloffer());
    }
    if (from.has_show_version()) {
      set_show_version(from.show_version());
    }
    if (from.has_campaign_count()) {
      set_campaign_count(from.campaign_count());
    }
    if (from.has_time_run()) {
      set_time_run(from.time_run());
    }
    if (from.has_qte_guide()) {
      set_qte_guide(from.qte_guide());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_starpoint()) {
      set_starpoint(from.starpoint());
    }
    if (from.has_is_auto()) {
      set_is_auto(from.is_auto());
    }
    if (from.has_lastoutconsortia()) {
      set_lastoutconsortia(from.lastoutconsortia());
    }
    if (from.has_geste()) {
      set_geste(from.geste());
    }
    if (from.has_storegrade()) {
      set_storegrade(from.storegrade());
    }
    if (from.has_storegp()) {
      set_storegp(from.storegp());
    }
    if (from.has_relogin_process()) {
      set_relogin_process(from.relogin_process());
    }
    if (from.has_relogin_count()) {
      set_relogin_count(from.relogin_count());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_blessingcount()) {
      set_blessingcount(from.blessingcount());
    }
    if (from.has_blessingbuff()) {
      set_blessingbuff(from.blessingbuff());
    }
    if (from.has_blessingmaxcount()) {
      set_blessingmaxcount(from.blessingmaxcount());
    }
    if (from.has_first_charge()) {
      set_first_charge(from.first_charge());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
    if (from.has_match_room_count()) {
      set_match_room_count(from.match_room_count());
    }
    if (from.has_king_buff()) {
      set_king_buff(from.king_buff());
    }
    if (from.has_leave_gp()) {
      set_leave_gp(from.leave_gp());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_altar_consortiaid()) {
      set_altar_consortiaid(from.altar_consortiaid());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_reward_times()) {
      set_reward_times(from.reward_times());
    }
    if (from.has_war_field_count()) {
      set_war_field_count(from.war_field_count());
    }
    if (from.has_trial_count()) {
      set_trial_count(from.trial_count());
    }
    if (from.has_appell_id()) {
      set_appell_id(from.appell_id());
    }
    if (from.has_cross_score()) {
      set_cross_score(from.cross_score());
    }
    if (from.has_trial_max_count()) {
      set_trial_max_count(from.trial_max_count());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_weary_limit()) {
      set_weary_limit(from.weary_limit());
    }
    if (from.has_lords_score()) {
      set_lords_score(from.lords_score());
    }
    if (from.has_is_received()) {
      set_is_received(from.is_received());
    }
    if (from.has_mine_score()) {
      set_mine_score(from.mine_score());
    }
    if (from.has_is_back_player()) {
      set_is_back_player(from.is_back_player());
    }
    if (from.has_refuseteaminvite()) {
      set_refuseteaminvite(from.refuseteaminvite());
    }
    if (from.has_campaign_maxcount()) {
      set_campaign_maxcount(from.campaign_maxcount());
    }
    if (from.has_seniorstoregrade()) {
      set_seniorstoregrade(from.seniorstoregrade());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_seniorstoregp()) {
      set_seniorstoregp(from.seniorstoregp());
    }
    if (from.has_dragoncampaign_count()) {
      set_dragoncampaign_count(from.dragoncampaign_count());
    }
    if (from.has_dragoncampaign_maxcount()) {
      set_dragoncampaign_maxcount(from.dragoncampaign_maxcount());
    }
    if (from.has_cross_guild_score()) {
      set_cross_guild_score(from.cross_guild_score());
    }
  }
}

void PlayerMsg::CopyFrom(const PlayerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMsg::IsInitialized() const {

  return true;
}

void PlayerMsg::Swap(PlayerMsg* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(sex_, other->sex_);
    std::swap(pic_, other->pic_);
    std::swap(camp_, other->camp_);
    std::swap(point_, other->point_);
    std::swap(gift_token_, other->gift_token_);
    std::swap(state_, other->state_);
    std::swap(last_award_, other->last_award_);
    std::swap(quest_site_len_, other->quest_site_len_);
    std::swap(quest_site_, other->quest_site_);
    std::swap(consortia_id_, other->consortia_id_);
    std::swap(consortia_name_, other->consortia_name_);
    std::swap(claim_id_, other->claim_id_);
    std::swap(claim_name_, other->claim_name_);
    std::swap(grades_, other->grades_);
    std::swap(gp_, other->gp_);
    std::swap(repute_, other->repute_);
    std::swap(consortia_offer_, other->consortia_offer_);
    std::swap(strategy_, other->strategy_);
    std::swap(weary_, other->weary_);
    std::swap(attack_left_count_, other->attack_left_count_);
    std::swap(novice_process_, other->novice_process_);
    std::swap(consortia_attack_, other->consortia_attack_);
    std::swap(consortia_defence_, other->consortia_defence_);
    std::swap(consortia_agility_, other->consortia_agility_);
    std::swap(consortia_ability_, other->consortia_ability_);
    std::swap(consortia_captain_, other->consortia_captain_);
    std::swap(gp_order_, other->gp_order_);
    std::swap(fighting_capacity_, other->fighting_capacity_);
    std::swap(grade_process_, other->grade_process_);
    std::swap(time_process_, other->time_process_);
    std::swap(time_get_, other->time_get_);
    std::swap(campaign_site_, other->campaign_site_);
    std::swap(bag_count_, other->bag_count_);
    std::swap(match_win_, other->match_win_);
    std::swap(match_failed_, other->match_failed_);
    std::swap(consortia_gold_, other->consortia_gold_);
    std::swap(consortia_physique_, other->consortia_physique_);
    std::swap(right_, other->right_);
    std::swap(job_, other->job_);
    std::swap(leed_process_, other->leed_process_);
    std::swap(star_count_, other->star_count_);
    std::swap(signdate_, other->signdate_);
    std::swap(signtimes_, other->signtimes_);
    std::swap(signsite_, other->signsite_);
    std::swap(order_, other->order_);
    std::swap(startfree_, other->startfree_);
    std::swap(totalgp_, other->totalgp_);
    std::swap(refusefriend_, other->refusefriend_);
    std::swap(refuseinvite_, other->refuseinvite_);
    std::swap(consortia_totaloffer_, other->consortia_totaloffer_);
    std::swap(show_version_, other->show_version_);
    std::swap(campaign_count_, other->campaign_count_);
    std::swap(time_run_, other->time_run_);
    std::swap(qte_guide_, other->qte_guide_);
    std::swap(starpoint_, other->starpoint_);
    std::swap(is_auto_, other->is_auto_);
    std::swap(lastoutconsortia_, other->lastoutconsortia_);
    std::swap(geste_, other->geste_);
    std::swap(storegrade_, other->storegrade_);
    std::swap(storegp_, other->storegp_);
    std::swap(relogin_process_, other->relogin_process_);
    std::swap(relogin_count_, other->relogin_count_);
    std::swap(blessingcount_, other->blessingcount_);
    std::swap(blessingbuff_, other->blessingbuff_);
    std::swap(blessingmaxcount_, other->blessingmaxcount_);
    std::swap(first_charge_, other->first_charge_);
    std::swap(charm_, other->charm_);
    std::swap(match_room_count_, other->match_room_count_);
    std::swap(king_buff_, other->king_buff_);
    std::swap(leave_gp_, other->leave_gp_);
    std::swap(altar_consortiaid_, other->altar_consortiaid_);
    std::swap(server_name_, other->server_name_);
    std::swap(reward_times_, other->reward_times_);
    std::swap(war_field_count_, other->war_field_count_);
    std::swap(trial_count_, other->trial_count_);
    std::swap(appell_id_, other->appell_id_);
    std::swap(cross_score_, other->cross_score_);
    std::swap(trial_max_count_, other->trial_max_count_);
    std::swap(weary_limit_, other->weary_limit_);
    std::swap(lords_score_, other->lords_score_);
    std::swap(is_received_, other->is_received_);
    std::swap(mine_score_, other->mine_score_);
    std::swap(is_back_player_, other->is_back_player_);
    std::swap(refuseteaminvite_, other->refuseteaminvite_);
    std::swap(campaign_maxcount_, other->campaign_maxcount_);
    std::swap(seniorstoregrade_, other->seniorstoregrade_);
    std::swap(seniorstoregp_, other->seniorstoregp_);
    std::swap(dragoncampaign_count_, other->dragoncampaign_count_);
    std::swap(dragoncampaign_maxcount_, other->dragoncampaign_maxcount_);
    std::swap(cross_guild_score_, other->cross_guild_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerMsg::GetTypeName() const {
  return "com.road.yishi.proto.player.PlayerMsg";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)
