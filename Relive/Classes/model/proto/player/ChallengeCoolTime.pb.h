// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChallengeCoolTime.proto

#ifndef PROTOBUF_ChallengeCoolTime_2eproto__INCLUDED
#define PROTOBUF_ChallengeCoolTime_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace road {
namespace yishi {
namespace proto {
namespace player {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChallengeCoolTime_2eproto();
void protobuf_AssignDesc_ChallengeCoolTime_2eproto();
void protobuf_ShutdownFile_ChallengeCoolTime_2eproto();

class ChallengeCoolTimeMsg;

// ===================================================================

class ChallengeCoolTimeMsg : public ::google::protobuf::MessageLite {
 public:
  ChallengeCoolTimeMsg();
  virtual ~ChallengeCoolTimeMsg();

  ChallengeCoolTimeMsg(const ChallengeCoolTimeMsg& from);

  inline ChallengeCoolTimeMsg& operator=(const ChallengeCoolTimeMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChallengeCoolTimeMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChallengeCoolTimeMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChallengeCoolTimeMsg* other);

  // implements Message ----------------------------------------------

  ChallengeCoolTimeMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChallengeCoolTimeMsg& from);
  void MergeFrom(const ChallengeCoolTimeMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 left_time = 1;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 1;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // optional int32 challenge_count = 2;
  inline bool has_challenge_count() const;
  inline void clear_challenge_count();
  static const int kChallengeCountFieldNumber = 2;
  inline ::google::protobuf::int32 challenge_count() const;
  inline void set_challenge_count(::google::protobuf::int32 value);

  // optional int32 total_count = 3;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 3;
  inline ::google::protobuf::int32 total_count() const;
  inline void set_total_count(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 total_buyCount = 5;
  inline bool has_total_buycount() const;
  inline void clear_total_buycount();
  static const int kTotalBuyCountFieldNumber = 5;
  inline ::google::protobuf::int32 total_buycount() const;
  inline void set_total_buycount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.road.yishi.proto.player.ChallengeCoolTimeMsg)
 private:
  inline void set_has_left_time();
  inline void clear_has_left_time();
  inline void set_has_challenge_count();
  inline void clear_has_challenge_count();
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_total_buycount();
  inline void clear_has_total_buycount();

  ::google::protobuf::int32 left_time_;
  ::google::protobuf::int32 challenge_count_;
  ::google::protobuf::int32 total_count_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 total_buycount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ChallengeCoolTime_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ChallengeCoolTime_2eproto();
  #endif
  friend void protobuf_AssignDesc_ChallengeCoolTime_2eproto();
  friend void protobuf_ShutdownFile_ChallengeCoolTime_2eproto();

  void InitAsDefaultInstance();
  static ChallengeCoolTimeMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// ChallengeCoolTimeMsg

// optional int32 left_time = 1;
inline bool ChallengeCoolTimeMsg::has_left_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeCoolTimeMsg::set_has_left_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChallengeCoolTimeMsg::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChallengeCoolTimeMsg::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 ChallengeCoolTimeMsg::left_time() const {
  return left_time_;
}
inline void ChallengeCoolTimeMsg::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// optional int32 challenge_count = 2;
inline bool ChallengeCoolTimeMsg::has_challenge_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChallengeCoolTimeMsg::set_has_challenge_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChallengeCoolTimeMsg::clear_has_challenge_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChallengeCoolTimeMsg::clear_challenge_count() {
  challenge_count_ = 0;
  clear_has_challenge_count();
}
inline ::google::protobuf::int32 ChallengeCoolTimeMsg::challenge_count() const {
  return challenge_count_;
}
inline void ChallengeCoolTimeMsg::set_challenge_count(::google::protobuf::int32 value) {
  set_has_challenge_count();
  challenge_count_ = value;
}

// optional int32 total_count = 3;
inline bool ChallengeCoolTimeMsg::has_total_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChallengeCoolTimeMsg::set_has_total_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChallengeCoolTimeMsg::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChallengeCoolTimeMsg::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
inline ::google::protobuf::int32 ChallengeCoolTimeMsg::total_count() const {
  return total_count_;
}
inline void ChallengeCoolTimeMsg::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
}

// optional int32 type = 4;
inline bool ChallengeCoolTimeMsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChallengeCoolTimeMsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChallengeCoolTimeMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChallengeCoolTimeMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ChallengeCoolTimeMsg::type() const {
  return type_;
}
inline void ChallengeCoolTimeMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 total_buyCount = 5;
inline bool ChallengeCoolTimeMsg::has_total_buycount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChallengeCoolTimeMsg::set_has_total_buycount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChallengeCoolTimeMsg::clear_has_total_buycount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChallengeCoolTimeMsg::clear_total_buycount() {
  total_buycount_ = 0;
  clear_has_total_buycount();
}
inline ::google::protobuf::int32 ChallengeCoolTimeMsg::total_buycount() const {
  return total_buycount_;
}
inline void ChallengeCoolTimeMsg::set_total_buycount(::google::protobuf::int32 value) {
  set_has_total_buycount();
  total_buycount_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace yishi
}  // namespace road
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChallengeCoolTime_2eproto__INCLUDED
